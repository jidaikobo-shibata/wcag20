<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE spec
  SYSTEM "xmlspec.dtd">
<spec status="final" w3c-doctype="wgnote"><header><title>Flashの実装方法</title><w3c-designation>WCAG20-FLASH-TECHS</w3c-designation><w3c-doctype>W3C Working Group Note</w3c-doctype><pubdate><day>3</day><month>January</month><year>2012</year></pubdate><publoc>
			<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/WAI/GL/WCAG20/WD-WCAG20-FLASH-TECHS-20060331/">http://www.w3.org/WAI/GL/WCAG20/WD-WCAG20-FLASH-TECHS-20060331/</loc>
		</publoc><latestloc><loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/WAI/GL/WCAG20/WD-WCAG20-FLASH-TECHS/">http://www.w3.org/WAI/GL/WCAG20/WD-WCAG20-FLASH-TECHS/</loc></latestloc><prevlocs>
			<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/WAI/GL/WCAG20/WD-WCAG20-FLASH-TECHS-20100107/">http://www.w3.org/WAI/GL/WCAG20/WD-WCAG20-FLASH-TECHS-20100107/</loc>
		</prevlocs><authlist><author><name>Andrew Kirkpatrick, Adobe</name></author><author><name>Michael Cooper, W3C</name></author></authlist><status><p>
				<emph>This section describes the status of this document at the time of its publication. Other documents may supersede this document. A list of current W3C publications and the latest revision of this technical report can be found in the <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/">W3C technical reports index</loc> at http://www.w3.org/TR/.</emph>
			</p><p>This version of CSS techniques has not significantly changed since the 19 November 2004 Working Draft. The <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="/WAI/GL/">Web Content  Accessibility Guidelines Working Group</loc> (WCAG WG) has focused on addressing issues related to Guidelines and Success Criteria. This publication  demonstrates how the different documents may link to each other. As the focus of the WCAG WG returns to techniques and test suites, the structure and presentation of the techniques documents will likely change to  reflect the relationships between Guidelines, Techniques, and testing documents. In future revisions, we expect to distinguish between techniques required for conformance versus those that are optional. Please refer to "<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://trace.wisc.edu/bugzilla_wcag/condensedreports/css_issues.php">Issue tracking for WCAG 2.0 Techniques for CSS</loc>" for a list of open issues related to this Working Draft. The "<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="/WAI/GL/WCAG20/css-tech-change-history.html">History of Changes to CSS Techniques for WCAG 2.0 Working Drafts</loc>" is also available.
			</p><p>Please send comments about this document to <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="mailto:public-comments-wcag20@w3.org">public-comments-wcag20@w3.org</loc>. The <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://lists.w3.org/Archives/Public/public-comments-wcag20/">archives for the public comments list</loc> are publicly available.   <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://lists.w3.org/Archives/Public/w3c-wai-gl">Archives of the WCAG WG mailing list</loc> are also publicly available.</p><p>Publication as a Working Draft does not imply endorsement by the W3C Membership. This is a draft document and may be updated, replaced or obsoleted by other documents at any time. It is inappropriate to cite this document as other than work in progress.  The WCAG WG intends to publish this as a Working Group Note at the time that WCAG 2.0 becomes a Recommendation.</p><!-- do not need patent section since these are not on the Rec track --><p>This document has been produced as part of the W3C <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/WAI/">Web Accessibility Initiative</loc> (WAI). The goals of the WCAG WG are discussed in the <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/WAI/GL/new-charter-2000.html">Working Group charter</loc>. The WCAG WG is part of the <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/WAI/Technical/Activity">WAI Technical Activity</loc>.</p></status><abstract><p>This document provides information to Web content developers who wish to satisfy the Success Criteria of "Web Content Accessibility Guidelines 2.0" <bibref ref="WCAG20"/> (currently a W3C Working Draft).   The techniques in this document are specific to Flash content <bibref ref="FLASH"/>.  Use of the illustrative techniques provided in this document may make it more likely for Web content to demonstrate conformance to WCAG 2.0 Success Criteria (by passing the relevant tests in the WCAG 2.0 test suite - <emph>to be developed</emph>) than if these illustrative techniques are not used.</p><p>There may be other techniques besides those provided in this document that may be used to demonstrate conformance to WCAG 2.0; in that case, it is encouraged to submit those techniques to the WCAG WG for consideration for inclusion in this document, so that the set of techniques  maintained by the WCAG WG is as comprehensive as possible. Deprecated examples illustrate techniques that the Working Group no longer recommends, but may be applicable in some cases. </p><p>This document is part of a series of documents published by the W3C
Web Accessibility Initiative (WAI) to support WCAG 2.0.</p></abstract><langusage><language id="ja"/></langusage><revisiondesc><p/></revisiondesc></header><body><!-- techniques --><div1 id="flash"><head>Flashの実装方法</head><div2 id="flash_notes"><head>Flash テクノロジーノート</head><p>Adobe Flash Player は、クロスプラットフォームなブラウザのプラグインである。Flash Player によって表示されるコンテンツの制作者は、映像サポート、オーサリングの好み、ベクターベースのグラフィック能力などの様々な要因から Flash Player を用いてコンテンツを提供したり、Flashの標準コンポーネントを利活用したりすることを選択する。コンテンツ制作者がFlashを用いるそういった動機が何であれ、他のウェブコンテンツ技術を用いたウェブコンテンツと同様に、Flash Player で提供されるコンテンツが WCAG 2.0 のアクセシビリティ基準を満たすようにすることは重要である。</p><div3 id="flash_ua_support"><head>Flash のユーザーエージェントによるサポート</head><p>Flash Player は、アクセシビリティのビルトインでのサポートと、コンテンツ制作者およびオーサリングツールがコンテンツをアクセシブルにするために利活用できる性能とのコンビネーションを提供している。Flash コンテンツ制作者は、アクセシブルな Flash コンテンツを制作するためには次のどのツールを用いてもよい（ただし、必ずしもこれらに限定されない）。</p><ulist><item><p> Flash MX, MX2004, 8, CS3, CS4, CS5 </p></item><item><p> Flex 1.5 以降</p></item><item><p> Flex Builder 2, Flex Builder 3, Flash Builder 4 </p></item><item><p> Flash Catalyst 4 </p></item><item><p> その他、Adobe Presenter、Adobe Captivate など</p></item></ulist><p>全盲の利用者、ロービジョンの利用者およびその他の支援技術利用者向けに、Flash Player は2001年に Flash Player 6 でアクセシビリティAPIのサポートを実現した。Flashのアクセシビリティに関する支援技術サポートは、Flash コンテンツに関する情報を支援技術に正しく伝えるという点においては、MSAA（Microsoft   Active  Accessibility）インタフェースと Flash Player 特有のインタフェースに依存している。支援技術のサポートは、次の組み合わせによる閲覧環境の利用者に対して提供されている：</p><ulist><item><p> Windows OS上での Internet Explorer 6 以降とFlash Player 6 以降の組み合わせ</p></item><item><p> Windows OS上での Mozilla Firefox 3 以降と Flash Player 9 以降の組み合わせ</p></item></ulist><p>支援技術によるMSAAのサポートは、次のような支援技術製品で提供されている（ただし、必ずしもこれらに限定されない）。</p><ulist><item><p> JAWS (4.5 以降) </p></item><item><p> Window-Eyes (4.2 以降) </p></item><item><p> NVDA </p></item><item><p>ZoomText (8 以降) </p></item></ulist></div3><div3 id="flash_accessibility_support"><head>Flash によるアクセシビリティのサポート</head><p>Flash Player は、マウスを使用することのできない利用者向けにキーボード操作もサポートしている。キーボード操作のサポートに関しては、Internet Explorer で用いられている Flash Player の ActiveX 版が最も高いレベルだが、Mozilla Firefox でのサポートを提供するための実装方法もこの文書で提供されている。「WCAG 2.0 実装方法集」で紹介されているように、Flash コンテンツ制作者はパブリッシュしたコンテンツ内でのタブ順序を制御することができる。</p><p>Flash player は、映像を表示するのに用いられることが多く、あらゆる言語のクローズド・キャプションやサブタイトルを提供することのできるテキストトラックがある。また、音声ガイドを提供できるように複数の音声トラックも用意されている。さらに、視聴覚コンテンツに手話通訳の提供を可能にする映像トラックも複数ある。</p><p>現時点では、Flash Player はWindows OSによるハイコントラスト・モードやテキストのサイズ変更をサポートしていない。しかし、Flashコンテンツ制作者は、Flashによるカスケーディング・スタイルシート（CSS）のサポート、その他の標準搭載スタイルのサポート、あるいはFlashの画面フィルタ機能を利用することによって、Flashベースのインタフェースを大きめのテキストで閲覧可能な代替ビュー、代替フォント、あるいは代替ハイコントラスト・カラースキームなどを提供することが可能である。</p><p>支援技術向けのFlashによるアクセシビリティのサポートは、Windows OS上で、Internet Explorer 6以降（Flash Player 6 以降）または Mozilla Firefox 3 以降（Flash Player 9以降）を使用した場合に限られている。</p><p>Adobe は、Flash Playerにおけるアクセシビリティのサポート向上を継続していく。2010年3月には、Adobeは  IAccessible2 のサポート及びMac OSとLinuxプラットフォームの双方に対するアクセシビリティAPIのサポートを追加することを発表した。</p><p>Flash Playerに関する詳細な情報は、Adobeサイトで提供されている <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.adobe.com/products/flashplayer/faq.html">Flash Player FAQ（英語）</loc>を参照のこと。</p></div3><div3 id="flash_conformance_considerations"><head> WCAG 2.0 適合に向けた特記事項 </head><ulist><item><p>
								<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="navigation-mechanisms-title" linktype="guideline">2.4.2 ページタイトル</loc> - 達成基準 2.4.2 を満たすためには、Flash コンテンツは <code><![CDATA[title]]></code>要素によるページタイトルを有したHTMLのウェブページ内に埋め込まれていなければならない。<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="H25" linktype="html">H25</loc> を参照のこと。</p></item><item><p>
								<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="meaning-doc-lang-id" linktype="guideline">3.1.1 ページの言語</loc> - Flash コンテンツの言語は、FlashのSWFファイル自体ではなく、HTMLにある<code><![CDATA[object]]></code>要素を含んだ部分のlang属性によって示される。また、コンテンツ制作者は、<code><![CDATA[object]]></code>要素の<code><![CDATA[lang]]></code>属性によって異なる言語をそれぞれに示した複数のFlashのSWFファイルを一つのウェブページ内に埋め込むことができる。<specref ref="FLASH13"/>を参照のこと。</p></item><item><p>
								<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="meaning-other-lang-id" linktype="guideline">3.1.2 部分的に用いられている言語</loc> - Flash コンテンツの言語は、FlashのSWFファイル内では示すことができないため、現時点ではSWFファイル内での言語の変更を示すことはできない。</p></item></ulist></div3></div2><technique id="FLASH1"><short-name>非テキストオブジェクトに名前プロパティを設定する</short-name><applicability><ulist><item><p>Adobe Flash Professional バージョン MX 以降</p></item><item><p>Adobe Flex</p></item></ulist></applicability><applies-to><success-criterion idref="text-equiv-all"/></applies-to><ua-issues><ua-issue><p>ユーザーエージェントによるサポートに関する全般的な情報は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="flash.html#flash_ua_support">Flashのユーザーエージェントによるサポート</loc>を参照のこと。</p></ua-issue></ua-issues><description><p>この実装方法の目的は、支援技術による読み上げが可能になるように Flash 内の非テキストオブジェクトをマークする方法を示すことである。</p><p>Flash Player は、非テキストオブジェクトについて、アクセシビリティオブジェクト内の名前プロパティを使用した代替テキストをサポートしている。この代替テキストは ActionScript または Flash オーサリングツールで定義することができる。</p><p>オブジェクトがコンテンツを理解する上で重要な語句を含んでいる場合は、名前プロパティにそれらの語句を含める必要がある。これにより、名前プロパティがオブジェクトと同等の機能をページ上で果たすことが可能になる。名前プロパティにはオブジェクトの見た目の特徴を記述するのではなく、オブジェクトの意味を伝える必要があることに注意する。</p></description><examples><eg-group><head>シンボル（グラフィック、ボタン、ムービークリップ）に代替テキストを適用する</head><description><p>Flash Professional のオーサリングツールのアクセシビリティパネルを使用すると、コンテンツ制作者は、支援技術にアクセシビリティ情報を提供したり、Flash の個々のオブジェクトや Flash アプリケーション全体に対してアクセシビリティ関連オプションを設定できる。</p><olist><item><p>非テキストオブジェクトに代替テキストを適用する際には、代替テキストをシンボルとしてムービーのライブラリに保存する必要がある。Flash ではグラフィックシンボル用の代替テキストを使用することはできない。グラフィックをムービークリップまたはボタンシンボルに変換するか、これらに保存する必要がある。</p></item><item><p>アプリケーションメニューで［ウィンドウ］&gt;［他のパネル］&gt;［アクセシビリティ］を選択するか、ショートカットキーの Alt+F11 を使用してアクセシビリティパネルを表示する。「オブジェクトをアクセス可能にする」チェックボックスがオンになっていることを確認する。</p></item><item><p>ムービーステージ上で非テキストインスタンスを選択すると、アクセシビリティパネル内のフィールドが編集可能になる。</p></item><item><p>「名前」フィールドに、シンボルの目的を的確に説明した意味のある代替テキストを入力する。</p></item></olist><p><img xmlns:xlink="http://www.w3.org/1999/xlink" class="eximg" src="http://www.w3.org/TR/WCAG20-TECHS/working-examples/FLASH1/acc_name_scrn.jpg" alt="画面スクリーンショット：Flash オーサリング環境のアクセシビリティパネル" height="218" width="541"/></p></description></eg-group><eg-group><head>ActionScript 2.0 でプログラムによる代替テキストを適用する</head><description><p>ActionScript 2 を使用してプログラムによってオブジェクトの等価テキストを制御するには、_accProps オブジェクトを使用する必要がある。このオブジェクトは、オブジェクトに対して設定されているアクセシビリティ関連プロパティが含まれているオブジェクトを参照する。以下に、_accProps オブジェクトを使用して ActionScript によってオブジェクトの名前を設定する簡単なコード例を示す。</p></description><code><![CDATA[// 'print_btn' は、ムービーのメインのタイムライン上に置かれたインスタンスである。
_root.print_btn._accProps = new Object();
_root.print_btn._accProps.name = "印刷する";]]></code></eg-group><eg-group><head>ActionScript 3.0 でプログラムによる代替テキストを適用する</head><description><p>ActionScript 3 を使用してプログラムによりオブジェクトの等価テキストを制御するには、AccessibilityProperties オブジェクトと名前プロパティを使用する必要がある。以下に、名前プロパティを使用して ActionScript でオブジェクトの名前を設定する簡単なコード例を示す。</p></description><code><![CDATA[// 'print_btn' は、ムービーのメインのタイムライン上に置かれたインスタンスである。
print_btn.accessibilityProperties = new AccessibilityProperties();
print_btn.accessibilityProperties.name = "印刷する";]]></code></eg-group></examples><resources/><related-techniques><relatedtech idref="G94"/></related-techniques><tests><procedure><olist><item><p>SWF ファイルを発行する。</p></item><item><p>Internet Explorer 6 以降（Flash Player 6 以降を使用）、または Firefox 3 以降（Flash Player 9 以降を使用）で SFW ファイルを開く。</p></item><item><p>オブジェクト名の代替テキストを表示できる aDesigner2 などのツールを使用して Flash ムービーを開く。</p></item><item><p>GUI 概要パネルで、Flash ムービーに含まれている各オブジェクトをチェックし、オブジェクトに名前が設定されている場合、ツールの画面にその名前属性が適切に表示される。</p></item><item><p>また、場合によってはスクリーンリーダーを使用して Flash コンテンツの読み上げをテストする。このテストでは、タブ移動の可能な非テキストオブジェクトにタブ移動したときにそのオブジェクトの等価テキストが読み上げられる。または、コンテンツを 1 行ずつ読み上げたときに代替テキストが読み上げられる。</p></item><item><p>すべての非テキストオブジェクトに、そのオブジェクトと同じ目的を持ち、同じ情報を伝える等価な代替テキストが設定されている。</p></item></olist></procedure><expected-results><p>6. を満たしている。</p></expected-results></tests><translationcredit><ulist><item>原文：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/FLASH1.html">FLASH1: Setting the name property for a non-text object（英語）</loc></item><item>日本語訳監修：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.infoaxia.co.jp/">植木 真（株式会社インフォアクシア）</loc></item><item>日本語訳：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.adobe.com/jp/accessibility/">アドビ システムズ 株式会社</loc></item></ulist></translationcredit></technique><technique id="FLASH2"><short-name>Flash 内の非テキストオブジェクトに説明プロパティを設定する</short-name><applicability><ulist><item><p>Adobe Flash Professional バージョン MX 以降</p></item><item><p>Adobe Flex</p></item></ulist></applicability><applies-to><success-criterion idref="text-equiv-all"/></applies-to><ua-issues><ua-issue><p>ユーザーエージェントによるサポートに関する全般的な情報は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="flash.html#flash_ua_support">Flashのユーザーエージェントによるサポート</loc>を参照のこと。</p></ua-issue></ua-issues><description><p>この実装方法の目的は、元の非テキストコンテンツと同じ目的を果たし、同じ情報を提示する際に、短い代替テキストでは不十分な場合、長い代替テキストを提供することを目的としている。</p><p>Flash Player は非テキストオブジェクトに対する長い代替テキストをサポートしている。長い代替テキストは ActionScript または Flash オーサリングツールで説明プロパティを使用して定義することができる。以下の事例ではこの方法について説明する。</p></description><examples><eg-group><head>シンボル（グラフィック、ボタン、ムービークリップ）に説明を適用する</head><description><p>Flash Professional のオーサリングツールのアクセシビリティパネルを使用すると、コンテンツ制作者は、支援技術にアクセシビリティ情報を提供したり、Flash の個々のオブジェクトや Flash アプリケーション全体に対してアクセシビリティ関連オプションを設定できる。</p><olist><item><p>非テキストオブジェクトに代替テキストを適用する際には、代替テキストをシンボルとしてムービーのライブラリに保存する必要がある。Flash ではグラフィックシンボル用の代替テキストを使用することはできない。グラフィックをムービークリップまたはボタンシンボルに変換するか、これらに保存する必要がある。</p></item><item><p>アプリケーションメニューで［ウィンドウ］&gt;［他のパネル］&gt;［アクセシビリティ］を選択するか、ショートカットキーの Alt+F11 を使用してアクセシビリティパネルを表示する。「オブジェクトをアクセス可能にする」チェックボックスがオンになっていることを確認する。</p></item><item><p>ムービーステージ上で非テキストインスタンスを選択すると、アクセシビリティパネル内のフィールドが編集可能になる。</p></item><item><p>非テキストオブジェクトのコンテンツを簡潔に説明した文章を入力する。例えば図の場合、図が伝える情報を示す「名前」を付け、「説明」フィールドには情報の完全な詳細を記述する。また、自動車の修理方法に関するムービーの一部としてアニメーションが使用されている場合、そのアニメーションの名前は「パンクしたタイヤを取り替える方法」とし、長い説明文ではその方法の詳細な手順を示すことができる。</p></item></olist><p><em>重要：</em>「説明」フィールドは、オブジェクトの目的を説明するのに短い代替テキストでは不十分な場合にのみ使用する。それ以外の場合は、「説明」フィールドは空のままにしておくこと。</p><p><img xmlns:xlink="http://www.w3.org/1999/xlink" class="eximg" src="http://www.w3.org/TR/WCAG20-TECHS/working-examples/FLASH2/acc_name_scrn.jpg" alt="画面スクリーンショット：Flash オーサリング環境のアクセシビリティパネル" height="218" width="541"/></p></description></eg-group><eg-group><head>ActionScript 2.0 でプログラムによる説明を適用する</head><description><p>ActionScript を使用してプログラムによりオブジェクトの等価なテキストを制御するには、_accProps オブジェクトを使用する必要がある。このオブジェクトは、オブジェクトに対して設定されているアクセシビリティ関連プロパティが含まれているオブジェクトを参照する。以下に、_accProps オブジェクトを使用して ActionScript によってオブジェクトの名前と説明を設定する簡単なコード例を示す。</p><p>10 月の売上実績を示すグラフがあり、「10月の売上実績グラフ」という短い代替テキストが設定されている。長い説明には、以下に示すコードによってより多くの情報を格納する。</p></description><code><![CDATA[// 'chart_mc' は、ムービーのメインのタイムライン上に置かれたインスタンスである。
_root.chart_mc._accProps = new Object();
_root.chart_mc._accProps.name = "10月の売上実績グラフ";
_root.chart_mc._accProps.description = "10月の売上実績を示す棒グラフ。\
  6名の営業がいて、マリアが最も高くて349件。その次が、フランシスで\
  301件。そして、ジュアンが256件、スーが250件、リーが200件、最後にマックスが\
  195件と続いている。棒グラフの用途は成績を示すことなので、件数の多い順に\
  紹介している。";]]></code></eg-group><eg-group><head>ActionScript 3.0 でプログラムによる説明を適用する</head><description><p>ActionScript を使用してプログラムによりオブジェクトの等価なテキストを制御するには、AccessibilityProperties オブジェクトを使用する必要がある。以下に、AccessibilityProperties オブジェクトを使用して ActionScript によってオブジェクトの名前と説明を設定する簡単なコード例を示す。</p><p>10 月の売上実績を示すグラフがあり、「10月の売上実績グラフ」という短い代替テキストが設定されている。長い説明には、以下に示すコードによってより多くの情報を格納する。</p></description><code><![CDATA[// 'chart_mc' は、ムービーのメインのタイムライン上に置かれたインスタンスである。
chart_mc.accessibilityProperties = new AccessibilityProperties();
chart_mc.accessibilityProperties.name = "10月の売上実績グラフ";
chart_mc.accessibilityProperties.description = "10月の売上実績を示す棒グラフ。\
  6名の営業がいて、マリアが最も高くて349件。その次が、フランシスで\
  301件。そして、ジュアンが256件、スーが250件、リーが200件、最後にマックスが\
  195件と続いている。棒グラフの用途は成績を示すことなので、件数の多い順に\
  紹介している。";]]></code></eg-group></examples><resources><see-also><ulist><item><p>
            <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.adobe.com/accessibility/products/flash/text.html">Adobe Flash Documentation for Text Equivalents</loc>
          </p></item><item><p>
            <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.eclipse.org/actf/downloads/tools/aDesigner/">aDesigner</loc>
          </p></item><item><p>
            <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://msdn.microsoft.com/en-us/library/ms695716.aspx">MS Active Accessibility 2.0 inspection tools</loc>
          </p></item></ulist></see-also></resources><related-techniques><relatedtech idref="FLASH1"/><relatedtech idref="G94"/></related-techniques><tests><procedure><olist><item><p>SWF ファイルを発行する。</p></item><item><p>Internet Explorer 6 以降（Flash Player 6 以降を使用）、または Firefox 3 以降（Flash Player 9 以降を使用）で SFW ファイルを開く。</p></item><item><p>オブジェクトの長い説明を表示できる aDesigner2 などのツールを使用して Flash ムービーを開く。</p></item><item><p>GUI 概要パネルで、Flash ムービーに含まれている各オブジェクトをチェックし、オブジェクトに説明が設定されている場合、ツールの画面にその説明が適切に表示されることを確認する。</p></item><item><p>また、場合によってはスクリーンリーダーを使用して Flash コンテンツの読み上げをテストする。このテストでは、タブ移動の可能な非テキストオブジェクトにタブを移動したときに、そのオブジェクトの説明が読み上げられること、またはコンテンツを 1 行ずつ読み上げたときに説明が読み上げられることを確認する。</p></item><item><p>すべての非テキストオブジェクトの説明として、そのオブジェクトと同じ目的を持ち、同じ情報を伝える等価なテキストが設定されていることを確認する。</p></item></olist></procedure><expected-results><p>6. を満たしている。</p></expected-results></tests><translationcredit><ulist><item>原文：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/FLASH2.html">FLASH2: Setting the description property for a non-text object in Flash（英語）</loc></item><item>日本語訳監修：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.infoaxia.co.jp/">植木 真（株式会社インフォアクシア）</loc></item><item>日本語訳：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.adobe.com/jp/accessibility/">アドビ システムズ 株式会社</loc></item></ulist></translationcredit></technique><technique id="FLASH3"><short-name>支援技術が無視できるように Flash のオブジェクトにマークを付ける</short-name><applicability><ulist><item><p>Adobe Flash Professional バージョン MX 以降</p></item><item><p>Adobe Flex</p></item></ulist></applicability><applies-to><success-criterion idref="text-equiv-all"/></applies-to><ua-issues><ua-issue><p>ユーザーエージェントによるサポートに関する全般的な情報は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="flash.html#flash_ua_support">Flashのユーザーエージェントによるサポート</loc>を参照のこと。</p></ua-issue></ua-issues><description><p>この実装方法は、支援技術が無視できるように画像にマークを付ける方法を示すことである。</p><p>Flash Player では、以下の事例に示すように、アクセシビリティオブジェクトの silent プロパティを使用すると、どのグラフィックを支援技術に認識させるかをコンテンツ制作者が制御できる。</p></description><examples><eg-group><head>Flash Professional のオーサリングツールでグラフィックを非表示にする</head><description><p>Flash Professional のオーサリングツールのアクセシビリティパネルを使用すると、コンテンツ制作者は、支援技術にアクセシビリティ情報を提供したり、Flash の個々のオブジェクトや Flash アプリケーション全体に対してアクセシビリティ関連オプションを設定できる。</p><olist><item><p>グラフィックのアクセシビリティ関連プロパティに対する変更を適用するには、変更したものをシンボルとしてムービーのライブラリに保存する必要がある。Flash ではグラフィックシンボル用の代替テキストを使用することはできない。グラフィックをムービークリップまたはボタンシンボルに変換するか、これらに保存する必要がある。</p></item><item><p>アプリケーションメニューで［ウィンドウ］&gt;［他のパネル］&gt;［アクセシビリティ］を選択するか、ショートカットキーの Alt+F11 を使用してアクセシビリティパネルを表示する。</p></item><item><p>グラフィックオブジェクトを選択する。</p></item><item><p>アクセシビリティパネルで「オブジェクトをアクセス可能にする」チェックボックスがオンになっている場合は、このオプションをオフにして、支援技術に伝達するアクセシビリティ情報からグラフィックを削除する。</p></item></olist></description></eg-group><eg-group><head>ActionScript 2.0 でプログラムによる代替テキストを適用する</head><description><p>ActionScript を使用してプログラムによりオブジェクトの等価なテキストを制御するには、_accProps プロパティを使用する必要がある。このオブジェクトは、オブジェクトに対して設定されているアクセシビリティ関連プロパティが含まれているオブジェクトを参照する。以下に、_accProps プロパティを使用して、ActionScript を使用しているムービー用のアクセシビリティ情報からオブジェクトを削除するための簡単なコードの例を示す。</p></description><code><![CDATA[// 'decorative_mc' は、ムービーのメインのタイムラインに置かれたインスタンスである。
_root.decorative_mc._accProps = new Object();
_root.decorative_mc._accProps.silent = true;]]></code></eg-group></examples><resources><see-also><ulist><item><p>
            <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://livedocs.adobe.com/flash/9.0/main/wwhelp/wwhimpl/common/html/wwhelp.htm?context=LiveDocs_Parts&amp;file=00001235.html">Flash CS3 Documention _accProps property</loc>
          </p></item><item><p>
            <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.eclipse.org/actf/downloads/tools/aDesigner/">aDesigner</loc>
          </p></item><item><p>
            <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.softpedia.com/get/Programming/SDK-DDK/Active-Accessibility-SDK.shtml">MS Active Accessibility 2.0 inspection tools</loc>
          </p></item></ulist></see-also></resources><related-techniques><relatedtech idref="G94"/></related-techniques><tests><procedure><olist><item><p>SWF ファイルを発行する。</p></item><item><p>Internet Explorer 6 以降（Flash Player 6 以降を使用）、または Firefox 3 以降（Flash Player 9 以降を使用）で SFW ファイルを開く。</p></item><item><p>オブジェクトのアクセシビリティ情報を表示できる aDesigner2 などのツールを使用して Flash ムービーを開く。</p></item><item><p>GUI 概要パネルで、Flash ムービーに含まれている各オブジェクトをチェックすると、表示されないように設定されているオブジェクトがツールの画面に表示されていない。</p></item><item><p>コンテンツ制作者は、テストにスクリーンリーダーを使用することもできる。その場合は、Flash コンテンツを読み上げて音声を聞くと、読み上げたページの内容にオブジェクトが含まれていない。</p></item><item><p>支援技術に無視されるようにコーディングされている非テキストオブジェクトは、支援技術からは認識できない。</p></item></olist></procedure><expected-results><p>6. を満たしている。</p></expected-results></tests><translationcredit><ulist><item>原文：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/FLASH3.html">FLASH3: Marking objects in Flash so that they can be ignored by AT（英語）</loc></item><item>日本語訳監修：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.infoaxia.co.jp/">植木 真（株式会社インフォアクシア）</loc></item><item>日本語訳：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.adobe.com/jp/accessibility/">アドビ システムズ 株式会社</loc></item></ulist></translationcredit></technique><technique id="FLASH4"><short-name>Flash で送信ボタンを提供する</short-name><applicability><ulist><item><p>Adobe Flash Professional バージョン MX 以降</p></item><item><p>Adobe Flex</p></item></ulist></applicability><applies-to><success-criterion idref="consistent-behavior-unpredictable-change"/></applies-to><ua-issues><ua-issue><p>ユーザーエージェントによるサポートに関する全般的な情報は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="flash.html#flash_ua_support">Flashのユーザーエージェントによるサポート</loc>を参照のこと。</p></ua-issue></ua-issues><description><p>この実装方法の目的は、状況の変化を送信ボタンを使用して引き起こすようにし、送信ボタン以外のコントロールの値または状態が変更された場合は状況の変化が発生しないようにすることである。この実装方法での送信ボタンの用途は、フォームに入力されたデータを送信する HTTP 要求を生成すること、または状況の変化をトリガーするアクションを実行することである（状況の変化を開始するのに適したコントロールがボタンの場合）。</p></description><examples><eg-group><head>ActionScript 3 によるコンボボックスと送信ボタンの実装</head><description><p>これは、コンボボックスコンポーネントと送信ボタンによって利用者を別のリソースにリダイレクトする、ActionScript 3 の基本的な事例である。</p></description><code><![CDATA[import fl.accessibility.ComboBoxAccImpl;
import flash.net.navigateToURL;
import flash.net.URLRequest;
ComboBoxAccImpl.enableAccessibility();
state_submit.addEventListener(MouseEvent.CLICK, submitHandler);
function submitHandler(e) {
  var url: URLRequest = new URLRequest("http://www.wikipedia.org/wiki/" + 
    state_combo.selectedLabel);
  navigateToURL(url, "_self");
}]]></code></eg-group><eg-group><head>ActionScript 2 によるコンボボックスと送信ボタンの実装</head><description><p>これは、コンボボックスコンポーネントと送信ボタンによって利用者を別のリソースにリダイレクトする、ActionScript 2 の基本的な事例である。ActionScript 2 を使用していること以外は、事例 1 と同じである。</p></description><code><![CDATA[import fl.accessibility.ComboBoxAccImpl;
ComboBoxAccImpl.enableAccessibility();
state_submit.addEventListener("click", submitHandler);
function submitHandler(e) {
  getURL("http://www.wikipedia.org/wiki/" + state_combo.selectedLabel, "_self");
}]]></code></eg-group></examples><resources/><related-techniques><relatedtech idref="G80"/></related-techniques><tests><procedure><olist><item><p>Flash ムービー内で状況の変化を開始するすべてのインタラクティブコントロールのインスタンス（送信ボタン以外）を見つける（コンボボックス、ラジオボタン、チェックボックスなど）。</p></item><item><p>それぞれのインスタンスについて、状況の変化を実行するイベントハンドラが、上記のコントロール自体ではなく個別のボタンに関連付けられている。</p></item></olist></procedure><expected-results><p>2. を満たしている。</p></expected-results></tests><translationcredit><ulist><item>原文：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/FLASH4.html">FLASH4: Providing submit buttons in Flash（英語）</loc></item><item>日本語訳監修：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.infoaxia.co.jp/">植木 真（株式会社インフォアクシア）</loc></item><item>日本語訳：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.adobe.com/jp/accessibility/">アドビ システムズ 株式会社</loc></item></ulist></translationcredit></technique><technique id="FLASH5"><short-name>リンク先が同じで隣接している画像とテキストのボタンを結合する</short-name><applicability><ulist><item><p>Adobe Flash Professional バージョン MX 以降</p></item><item><p>Adobe Flex</p></item></ulist></applicability><applies-to><success-criterion idref="text-equiv-all"/><success-criterion idref="navigation-mechanisms-refs"/><success-criterion idref="navigation-mechanisms-link"/></applies-to><ua-issues><ua-issue><p>ユーザーエージェントによるサポートに関する全般的な情報は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="flash.html#flash_ua_support">Flashのユーザーエージェントによるサポート</loc>を参照のこと。</p></ua-issue></ua-issues><description><p>この実装方法の目的は、隣接するテキストとボタンアイコンを Flash ムービーに含める際の不要な重複を回避することである。</p><p>テキストとボタンアイコンが隣接しているボタンがよく用いられている。視覚上多少離れた位置に配置するなどの目的で、テキストとアイコンボタンが個別のボタンとして表現されることも多い。視覚に問題のない利用者はこれらの位置が多少離れていることを視覚的に認識できるが、全盲やロービジョンの利用者は位置の距離を認識できないためボタンの重複に混乱する。これを避けるため、コンテンツ制作者によっては画像のアクセシブルな名前の指定を省略する場合があるが、そのような方法ではグラフィックボタンと同じ目的を果たす代替テキストがなくなってしまい、達成基準 1.1.1 を満たすことができない。この問題への対処として望ましいのは、テキストと画像を 1 つのボタンシンボルインスタンスに含め、ボタンに対して 1 つのアクセシブルな名前を割り当てることによってテキストの重複を回避する方法である。</p></description><examples><eg-group><head>アクセシビリティパネルを使用してアクセシブルな名前を指定する</head><description><p>アクセシビリティパネルを使用してアクセシブルな名前（この例の場合は表示されているテキストと同じ）を指定する。</p><p><img xmlns:xlink="http://www.w3.org/1999/xlink" class="eximg" src="http://www.w3.org/TR/WCAG20-TECHS/working-examples/FLASH5/findoutmore.jpg" alt="画面スクリーンショット：結合ボタンの「名前」を記述したアクセシビリティパネル" height="152" width="530"/></p></description></eg-group><eg-group><description><p>次のように、アクセシビリティパネルの代わりに ActionScript 3 を使用して、結合ボタンのアクセシビリティ名を指定することもできる。</p></description><code><![CDATA[// 'flashLink1' は、ムービーのメインのタイムラインに置かれたインスタンスである。
flashLink1.accessibilityProperties = new AccessibilityProperties();
flashLink1.accessibilityProperties.name = "Flashについてさらに学ぶ";]]></code><description><p>また、次のように、アクセシビリティパネルの代わりに ActionScript 2 を使用して、結合ボタンのアクセシビリティ名を指定することもできる。</p></description><code><![CDATA[// 'flashLink1' is an instance placed on the movie's main timeline
flashLink1._accProps = new Object();
flashLink1._accProps.name = "Flashについてさらに学ぶ";]]></code></eg-group></examples><resources/><related-techniques><relatedtech idref="G94"/><relatedtech idref="G53"/></related-techniques><tests><procedure><olist><item><p>SWF ファイルを発行する。</p></item><item><p>Internet Explorer 6 以降（Flash Player 6 以降を使用）、または Firefox 3 以降（Flash Player 9 以降を使用）で SFW ファイルを開く。</p></item><item><p>オブジェクト名の代替テキストを表示できる aDesigner2 などのツールを使用して Flash ムービーを開く。</p></item><item><p>aDesigner2 を使用する場合は、GUI 概要パネルを使用して Flash ムービー内の各画像ボタンを確認し、画像と同じ機能を持つ別の重複したテキストコントロールが画像の近くにないことを確かめる。</p></item></olist></procedure><expected-results><p>上記全てを満たしている。</p></expected-results></tests><translationcredit><ulist><item>原文：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/FLASH5.html">FLASH5: Combining adjacent image and text buttons for the same resource（英語）</loc></item><item>日本語訳監修：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.infoaxia.co.jp/">植木 真（株式会社インフォアクシア）</loc></item><item>日本語訳：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.adobe.com/jp/accessibility/">アドビ システムズ 株式会社</loc></item></ulist></translationcredit></technique><technique id="FLASH6"><short-name>非表示のボタンを使用してアクセシブルなホットスポットを作成する</short-name><applicability><ulist><item><p>Adobe Flash Professional バージョン MX 以降</p></item><item><p>Adobe Flex</p></item></ulist></applicability><applies-to><success-criterion idref="text-equiv-all"/></applies-to><ua-issues><ua-issue><p>ユーザーエージェントによるサポートに関する全般的な情報は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="flash.html#flash_ua_support">Flashのユーザーエージェントによるサポート</loc>を参照のこと。</p></ua-issue></ua-issues><description><p>この実装方法の目的は、画像のクリック可能なホットスポットと同じ目的を果たす代替テキストを提供することである。ホットスポットというのは、アクション（例えば、ホットスポットに対応する Web ページを開くこと等）をトリガできる画像内のクリック可能な領域である。ホットスポットは、非表示の Flash ボタンとして実装し、それぞれにホットスポットのリンク先を説明するアクセシブルな名前を指定する。</p></description><examples><eg-group><head>アクセシブルなクリック可能領域を含むグラフィック</head><description><olist><item><p>クリック可能なホットスポットを置く必要があるオリジナルのグラフィックをステージに追加する。</p></item><item><p>各ホットスポットについて、次の作業を行う。</p><olist><item><p>Flash Professional の［挿入］メニューから「新規シンボル」を選択するか Ctrl+F8 キーを押して、新しいボタンシンボルを作成する。</p></item><item><p>ボタンシンボルの中に、クリック可能な領域に一致するシェイプを作成する。</p></item><item><p>新しく作成したボタンを元のグラフィックの上に置く。</p></item><item><p>ボタンのプロパティパネルを開き、「カラー効果」の下にある「スタイル」ドロップダウンリストから「アルファ」を選択する。表示される「アルファ」スライダの値を 0 に変更し、ボタンを非表示にする。</p></item><item><p>アクセシビリティパネルを使用して「タブインデックス」フィールドの値を指定し、タブ順序内におけるボタンの論理的な位置を指定する。</p></item><item><p>アクセシビリティパネルを使用して、ホットスポットの目的を説明するアクセシブルな名前を指定する。</p></item></olist></item></olist><p><img xmlns:xlink="http://www.w3.org/1999/xlink" class="eximg" src="http://www.w3.org/TR/WCAG20-TECHS/working-examples/FLASH6/flash_hotspot_graphic.png" alt="画面スクリーンショット 1：Flashのオーサリングステージにグラフィックを追加" height="181" width="274"/></p><p><img xmlns:xlink="http://www.w3.org/1999/xlink" class="eximg" src="http://www.w3.org/TR/WCAG20-TECHS/working-examples/FLASH6/flash_hotspot_invisible.png" alt="画面スクリーンショット 2：プロパティパネルの「アルファ」スライダの値を 0 に変更して、ボタンを非表示に" height="297" width="429"/></p><p><img xmlns:xlink="http://www.w3.org/1999/xlink" class="eximg" src="http://www.w3.org/TR/WCAG20-TECHS/working-examples/FLASH6/flash_hotspot_accessibleName.png" alt="画面スクリーンショット 3：アクセシビリティパネルを用いて、ボタンの名前を設定" height="303" width="384"/></p></description><description><p>この結果は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/working-examples/FLASH6/invisible_buttons_as_image_map_regions.html">「非表示のボタンを使用してアクセシブルなホットスポットを作成する」のサンプル（英語）</loc>で確認できる。また、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/working-examples/FLASH6/invisible_buttons_as_image_map_regions.swf">「非表示のボタンを使用してアクセシブルなホットスポットを作成する」のソース（英語）</loc>をダウンロードすることもできる。</p></description></eg-group></examples><resources/><related-techniques><relatedtech idref="G91"/></related-techniques><tests><procedure><p>ホットスポットが含まれるすべての画像を見つけて、各ホットスポットについて次のことを確認する。</p><olist><item><p>ホットスポットが非表示のボタンとして実装されている。</p></item><item><p>アクセシビリティパネルまたは ActionScript を使用してホットスポットにアクセシブルな名前が指定されている。</p></item></olist></procedure><expected-results><ulist><item><p>1. および 2. を満たしている。</p></item></ulist></expected-results></tests><translationcredit><ulist><item>原文：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/FLASH6.html">FLASH6: Creating accessible hotspots using invisible buttons（英語）</loc></item><item>日本語訳監修：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.infoaxia.co.jp/">植木 真（株式会社インフォアクシア）</loc></item><item>日本語訳：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.adobe.com/jp/accessibility/">アドビ システムズ 株式会社</loc></item></ulist></translationcredit></technique><technique id="FLASH7"><short-name>スクリプトを使用してコントロールのラベルを変更する</short-name><applicability><ulist><item><p>Adobe Flash Professional バージョン MX 以降</p></item><item><p>Adobe Flex</p></item></ulist></applicability><applies-to><success-criterion idref="navigation-mechanisms-refs"/><success-criterion idref="navigation-mechanisms-link"/></applies-to><ua-issues><ua-issue><p>ユーザーエージェントによるサポートに関する全般的な情報は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="flash.html#flash_ua_support">Flashのユーザーエージェントによるサポート</loc>を参照のこと。</p></ua-issue></ua-issues><description><p>この実装方法の目的は、前後の文脈を把握しなくても理解できるように、利用者がボタンなどのコントロールのラベルに付加情報を追加できるようにすることである。</p><p>コントロールの前後にある文脈をわざわざ把握しなくてもすむように、コントロールのラベルによって十分な情報が提供されることを望む利用者がいる。その一方で、すべてのボタンに文脈を含む情報があるのはあまりにも冗長であり、サイトの利便性を低下させると考えるユーザーもいる。また、支援技術の利用者からワーキンググループに寄せられるフィードバックでも、どちらが好ましいかについて意見が分かれている。この実装方法は、ユーザー自身が好むほうを選択できるようにするものである。</p><p>ページの先頭近くにページ上のコントロールのラベルを拡張するためのコントロールを配置し、前後の文脈を加味しなくてもコントロールの目的を理解できるようにする。必ずコントロールの目的をラベルから直接理解できるようにすることが必要である。</p><p>この実装方法によってコントロールのラベルが拡張されるのは、現在参照しているページのみである。ただし、サイト全体で1回選択すればすむように、cookie やサーバー側のユーザープロファイルにこの設定を保存しておく方法もある。場合によっては、そのほうが望ましいかもしれない。</p></description><examples><eg-group><head>ActionScript を使用してボタンのラベルに文脈の情報を直接追加する</head><description><p>この事例では、ActionScript を使用してボタンのラベルに文脈の情報を直接追加している。「より詳細なボタン名に変更」ボタンをクリックすることによって、ページ上の各ボタンのラベルプロパティが変更される。</p></description><code><![CDATA[import fl.accessibility.ButtonAccImpl;
ButtonAccImpl.enableAccessibility();
btn1.addEventListener(MouseEvent.CLICK, clickHandler);

function clickHandler(e) {
  btn2.label = btn1.selected? "2010年版パンフレット PDF版": "PDF";
  btn2.width = btn1.selected? 200: 100;
  btn3.label = btn1.selected? "2010年版パンフレット テキスト版": "テキスト";
  btn3.width = btn1.selected? 200: 100;
  btn4.label = btn1.selected? "2010年版パンフレット Word版": "Word";
  btn4.width = btn1.selected? 200: 100;
}]]></code><description><p>この結果は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/working-examples/FLASH7/change_button_label.html">「ボタンのラベルにコンテキスト情報を追加する」のサンプル（英語）</loc>で確認できる。また、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/working-examples/FLASH7/change_button_label.swf">「ボタンのラベルにコンテキスト情報を追加する」のソース（英語）</loc>をダウンロードすることもできる。</p></description></eg-group></examples><resources/><related-techniques><relatedtech idref="SCR30"/></related-techniques><tests><procedure><p>Flash ムービーに前後の文脈に依存したラベルが含まれている場合、利用者がラベルに前後の文脈を加味しなくてもすむように、ラベルを拡張するためのトグルコントロールが提供されている。</p></procedure><expected-results><p>上記チェックポイントを満たしている。</p></expected-results></tests><translationcredit><ulist><item>原文：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/FLASH7.html">FLASH7: Using scripting to change control labels（英語）</loc></item><item>日本語訳監修：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.infoaxia.co.jp/">植木 真（株式会社インフォアクシア）</loc></item><item>日本語訳：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.adobe.com/jp/accessibility/">アドビ システムズ 株式会社</loc></item></ulist></translationcredit></technique><technique id="FLASH8"><short-name>フォーム・コントロールのアクセシブルな名前にグループ名を追加する</short-name><applicability><ulist><item><p>Adobe Flash Professional バージョン MX 以降</p></item><item><p>Adobe Flex</p></item></ulist></applicability><applies-to><success-criterion idref="content-structure-separation-programmatic"/><success-criterion idref="minimize-error-cues"/></applies-to><ua-issues><ua-issue><p>ユーザーエージェントによるサポートに関する全般的な情報は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="flash.html#flash_ua_support">Flashのユーザーエージェントによるサポート</loc>を参照のこと。</p></ua-issue></ua-issues><description><p>この実装方法の目的は、関連するフォーム・コントロールをセマンティックにグループ化することである。これにより、利用者が複数のコントロール間の関係を理解し、より早くかつ効率的にフォームを操作することができる。</p><p>Flash では、関連するフォーム・コントロールがグループ化されている場合、グループの名前を各フォーム・コントロールのアクセシブルな名前に追加することで、そのグループを示すことができる。</p><p>コントロールのグループ化は、関係性があるラジオボタンとチェックボックスの場合に最も重要である。ラジオボタンまたはチェックボックスの一式は、それらすべてが単一の名前付きフィールドに値を送信する場合に関係性があるといえる。これらは、選択リストと同じように機能し、ユーザーは複数の選択肢の中からどれかを選択できる。ただし、選択リストが一つのコントロールであるのに対して、ラジオボタンやチェックボックスは複数のコントロールである点が異なる。ラジオボタンやチェックボックスは、複数のコントロールであるため、これらを意味的にグループ化して一つのコントロールとして簡単に扱えるようにすることが特に重要である。多くの場合、ユーザーエージェントは、各コントロールのラベルの前にグループ名を示し、それらが同じグループのものであることをユーザーに知らせる。</p><p>ラジオボタンやチェックボックスの一式ほど密接な関係性があるわけではない他のコントロール一式でも、その一式をグループ化すると便利な場合がある。例えば、ユーザーに住所に関する情報を入力してもらう幾つかのテキストフィールドを「住所」という名前でグループ化することができる。</p></description><examples><eg-group><head>ラジオボタンのアクセシブルな名前にグループ名を追加する</head><description><p>この事例は、グループ内のラジオボタンのグループ名を各ボタンのアクセシブルな名前に追加して、それらのグループをアクセシブルにする方法を示している。</p><olist><item><p>ラジオボタンのコンポーネントをステージに追加する。</p></item><item><p>「ラベル」プロパティを使用して各ボタンのラベルを入力する。</p></item><item><p>視覚的なグループラベルを手順 1 で追加したボタンの左側または上に追加する。</p></item><item><p>各ラジオボタンを選択する。アクセシビリティパネルで、「名前」フィールドにグループ名を追加する。</p></item></olist><p>Flash は、「性別 男性」というふうに、グループ名を各ボタンの個別の名前に連結する。</p><p>次のスクリーンショットは、このアプローチについて示したものである。</p><p><img xmlns:xlink="http://www.w3.org/1999/xlink" class="eximg" src="http://www.w3.org/TR/WCAG20-TECHS/working-examples/FLASH8/groupname.png" alt="画面スクリーンショット：アクセシビリティパネルを用いて、フォーム・コントロールにグループ名を追加" height="236" width="584"/></p><note><p class="prefix">この事例のラジオボタンをアクセシブルにするには、次の2行をムービーのスクリプトに追加する必要がある。
</p><pre><code><![CDATA[import fl.accessibility.RadioButtonAccImpl;
RadioButtonAccImpl.enableAccessibility();]]></code></pre></note><p>このアプローチの実例については、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/working-examples/FLASH8/radio_button_group_as3.html">「ラジオボタンのアクセシブルな名前にグループ名を追加する」のサンプル（英語）</loc>を参照のこと。<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/working-examples/FLASH8/radio_button_group_as3.swf">「ラジオボタンのアクセシブルな名前にグループ名を追加する」のソース（英語）</loc>をダウンロードすることもできる。</p></description></eg-group><eg-group><head>プログラムによってラジオボタンのアクセシブルな名前にグループ名を追加する</head><description><p>次のコード例は、グループ名を含むフォーム・コントロール一式を長方形のようなフィールドセット内に配置するクラスの基本的な概念実証を示している。追加される各コントロールに対して AccessibilityProperties オブジェクトが作成され、その name プロパティが、グループ名のテキストと実際のフォーム・コントロールのラベルの組み合わせに設定される。</p></description><code><![CDATA[package wcagSamples {
  import flash.display. *;
  import flash.text. *;
  import fl.controls. *
  import flash.accessibility. *;
  import fl.accessibility. *;
  
  
  /**
  *  HTMLで提供されているfieldset要素を模倣する方法を実演する基本的なサンプル。
  *  FieldSet クラスは、複数のコントロールをグループ化してfieldsetの矩形内に配置し、
  *  その先頭にグループ名となるテキストを置く。各フォーム・コントロールに対して、
  *  グループ名のテキストはコントロールのアクセシブルな名前の前に追加される。
  *
  *  注記：これは概念の実証を目的にしたものであり、完全に機能するクラスではない。
  *
  *  @langversion 3.0
  *  @playerversion Flash 10
  *
  */
  public class FieldSet extends Sprite {
    private var legend: String;
    private var bBox: Shape;
    private var currentY: int = 20;
    
    public static var LABEL_OFFSET_X: int = 20;
    public static var CONTROL_OFFSET_X: int = 110;
    
    /**
    *  CONSTRUCTOR
    *  Legend は、FieldSetのグループ名となるテキストを特定する
    *  itemsは、そのFieldSetに追加されるコントロールを説明する
    */
    
    public function FieldSet(legend: String, items: Array) {
      // この事例で使われているコンポーネントのアクセシビリティを有効にする
      RadioButtonAccImpl.enableAccessibility();
      CheckBoxAccImpl.enableAccessibility();
      
      // FieldSet の矩形とグループ名を生成する
      legend = legend;
      bBox = new Shape();
      bBox.graphics.lineStyle(1);
      bBox.graphics.drawRect(10, 10, 300, 250);
      bBox.graphics.beginFill(0x0000FF, 1);
      addChild(bBox);
      
      var fieldSetLegend: TextField = new TextField();
      fieldSetLegend.text = legend;
      fieldSetLegend.x = 20;
      fieldSetLegend.y = 3;
      fieldSetLegend.background = true;
      fieldSetLegend.backgroundColor = 0xFFFFFF;
      fieldSetLegend.border = true;
      fieldSetLegend.borderColor = 0x000000;
      fieldSetLegend.autoSize = TextFieldAutoSize.LEFT;
      addChild(fieldSetLegend);
      
      // コントロールを追加する
      for (var i = 0; i < items.length; i++) {
        processItem(items[i]);
      }
    }
    
    /**
    * コントロールをFieldsetに追加し、アクセシブルな名前を設定する。 
    * コントロールは配列で表されており、次の値を含んでいる。
    * [0] : コンポーネントのタイプを表す文字列 
    *   (例： "TextInput", TextArea", Checkbox" または "RadioGroup")
    * [1] : コントロールを特定するために用いられるラベル
    * [2] : もし [0] が "RadioGroup" だった場合、[2] は個々のラジオボタンに対する 
    *    ラベルの配列を含んでいる必要がある。もし [0] が "CheckBox" だった場合、 
    *    [1] は空または質問（例：「喫煙しますか？」）のどちらかで、
    *    [2] は CheckBox のラベル（例：「はい」）となる。
    *
    */
    function processItem(item: Array) {
      if (item.length < 2)
      return;
      currentY += 30;
      var newControl;
      //create visual label
      var lbl: Label;
      lbl = new Label();
      lbl.text = item[1] + ": ";
      lbl.x = FieldSet.LABEL_OFFSET_X;
      lbl.y = currentY;
      lbl.width = FieldSet.CONTROL_OFFSET_X;
      lbl.autoSize = TextFieldAutoSize.RIGHT;
      lbl.wordWrap = true;
      addChild(lbl);
      
      switch (item[0]) {
        case "TextInput":
        case "TextArea":
        newControl = item[0] == "TextInput"? new TextInput(): new TextArea();
        newControl.x = FieldSet.CONTROL_OFFSET_X;
        //グループ名とラベルをつなげて、アクセシブルな名前にする。
        setAccName(newControl, legend + " " + item[1]);
        break;
        case "CheckBox":
        newControl = new CheckBox();
        newControl.label = item[2];
        newControl.x = FieldSet.CONTROL_OFFSET_X;
        setAccName(newControl, legend + " " + item[1] + " " + item[2]);
        break;
        case "RadioGroup":
        if (item[2] && item[2].length > 0) {
          var radioGroup: RadioButtonGroup = new RadioButtonGroup(item[0]);
          var newBtn: RadioButton;;
          for (var i = 0; i < item[2].length; i++) {
            newBtn = new RadioButton();
            // concatenate the legend, the group label, and the button label
            setAccName(newBtn, legend + " " + item[1] + " " + item[2][i]);
            newBtn.label = item[2][i];
            newBtn.group = radioGroup;
            newBtn.x = FieldSet.CONTROL_OFFSET_X;
            newBtn.y = currentY;
            addChild(newBtn);
            if (i < item[2].length - 1)
            currentY += 30;
          }
        }
        break;
      }
      
      if (newControl) {
        newControl.y = currentY;
        addChild(newControl);
      }
    }
    
    /**
    * オブジェクトに対するAccessibilityProperties オブジェクトを生成し、その name プロパティを設定する
    */
    public function setAccName(obj, accName) {
      var accProps: AccessibilityProperties = new AccessibilityProperties();
      accProps.name = accName;
      obj.accessibilityProperties = accProps;
    }
  }
}]]></code><description><p>この事例のクラスの初期化は次のように行う。</p></description><code><![CDATA[var myFieldSet = new FieldSet("Personal Details",  // グループ名 
  [["TextInput", "名前"],                          // テキストフィールド
  ["RadioGroup", "性別", ["男性", "女性"]],    // ラジオボタンのグループ
  ["CheckBox", "喫煙しますか？", "はい"],             // チェックボックス
  ["TextArea", "コメント"],                        // テキストエリア
]);
addChild(myFieldSet);]]></code><description><p>このアプローチの実例については、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/working-examples/FLASH8/grouped_form_controls.html">「プログラムによってラジオボタンのアクセシブルな名前にグループ名を追加する」のサンプル（英語）</loc>を参照のこと。<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="">「プログラムによってラジオボタンのアクセシブルな名前にグループ名を追加する」のソースはこちらからダウンロードできる。</loc></p><note><p class="prefix">Adobe Flex を使用すれば、&lt;form&gt;, &lt;formitem&gt; および &lt;formheading&gt; 要素を使用して、このタイプの動作を実現できる。</p></note></description></eg-group></examples><resources/><related-techniques><relatedtech idref="FLASH25"/></related-techniques><tests><procedure><p>Flash ムービーにグループ化されたｓフォーム・コントロールが含まれている場合は、次のいずれかを満たしていることを確認する。</p><ulist><item><p>各コントロールのアクセシビリティパネルの「名前」フィールドにグループ名が含まれている。</p></item><item><p>各コントロールに AccessibilityProperties.name プロパティがあり、グループ名とコントロールのラベルとなるテキストの両方を含んでいる。</p></item></ulist></procedure><expected-results><ulist><item><p>上記チェックポイントのいずれかを満たしている。</p></item></ulist></expected-results></tests><translationcredit><ulist><item>原文：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/FLASH8.html">FLASH8: Adding a group name to the accessible name of a form control（英語）</loc></item><item>日本語訳監修：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.infoaxia.co.jp/">植木 真（株式会社インフォアクシア）</loc></item><item>日本語訳：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.adobe.com/jp/accessibility/">アドビ システムズ 株式会社</loc></item></ulist></translationcredit></technique><technique id="FLASH9"><short-name>収録済みの同期したメディアにキャプションを提供する</short-name><applicability><p>Adobe Flashをベースにしたコンテンツ</p><ulist><item><p>Adobe Flash CS3 以降</p></item></ulist></applicability><applies-to><success-criterion idref="media-equiv-captions"/></applies-to><ua-issues><ua-issue><p>ユーザーエージェントによるサポートに関する全般的な情報は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="flash.html#flash_ua_support">Flashのユーザーエージェントによるサポート</loc>を参照のこと。</p></ua-issue></ua-issues><description><p>この実装方法の目的は、聴覚障害のあるユーザーや同期したメディア内の音声や会話を聞くことが困難な利用者が、音声情報の代替手段としてキャプションを見るように選択できるオプションを提供することである。この実装方法では、すべての会話と重要な音がテキストとして提供されるが、それらのテキストは利用者が要求した場合以外は表示されない。結果として、必要な場合にのみ表示される。これは、FLVPlayback コンポーネントと FLVPlaybackCaptioning コンポーネントを使用して実現できる。FLVPlayback のスキンを使用すると、クローズドキャプションボタンがデフォルトでアクセシブルになる。ただし、カスタムスキンを実装する場合は、クローズドキャプションボタンがアクセシブルかどうかをコンテンツ制作者がテストする必要がある。</p></description><examples><eg-group><head>Timed Textのキャプションファイルを Flash に追加する</head><description><olist><item><p>外部ツール（Magpie やシンプルなテキストエディタなど）を使用して、Timed Textを用いたキャプションの XML ファイルを作成する。ビデオコンテンツを停止して再生し、音声情報の適切な部分（会話、重要な背景音、イベントサウンドなど）ごとに開始と終了のタイムコードおよび代替テキストを挿入する。Magpie のようなツールにはこの作業を簡単に行うことができる高度な機能がある。これに対し、テキストエディタでは次のキャプション文書の例に示すようにメディアプレーヤーからタイムコードを読み取って XML に含める必要がある。</p></item><item><p>Flash では、ステージに FLVPlayback コンポーネントの新しいインスタンスを作成し、［コンポーネントインスペクタ］パネルまたは［パラメータ］パネルを使用して contentPath 値を flv ビデオファイルに設定する。</p></item><item><p>CC（クローズドキャプション）ボタンを含むスキンを使用するように「Skin」パラメータを設定する。</p></item><item><p>さらに、コンポーネントのリストから FLVPlayback キャプションコンポーネントのインスタンスを作成する。［コンポーネントインスペクタ］パネルで、「Source」パラメータをTimed TextのXMLファイルの名前に設定する。キャプションは、プレーヤーのフレームの下部に自動的に配置される。</p></item></olist></description><code><![CDATA[<?xml version="1.0" encoding="UTF-8"?>

<tt xml:lang="en" xmlns="http://www.w3.org/2006/04/ttaf1"
  xmlns:tts="http://www.w3.org/2006/04/ttaf1#styling">
  <head>
    <styling>
      <style id="defaultSpeaker" tts:backgroundColor="black"
        tts:color="white" tts:fontFamily="SansSerif" tts:fontSize="12"
        tts:fontStyle="normal" tts:fontWeight="normal"
        tts:textAlign="left" tts:textDecoration="none"/>
      <style id="defaultCaption" tts:backgroundColor="black"
        tts:color="white" tts:fontFamily="Arial" tts:fontSize="12"
        tts:fontStyle="normal" tts:fontWeight="normal"
        tts:textAlign="center" tts:textDecoration="none"/>
    </styling>

  </head>
  <body id="thebody" style="defaultCaption">
    <div xml:lang="en">
      <p begin="0:00:00.20" end="0:00:02.20">If there were nothing in
        our universe</p>
      <p begin="0:00:02.20" end="0:00:05.65">the fabric of space-time
        would be flat.</p>

      <p begin="0:00:05.65" end="0:00:08.88">But add a mass, and
        dimples form within it.</p>
      <p begin="0:00:16.61" end="0:00:19.84">Smaller objects that
        approach that large mass</p>
      <p begin="0:00:19.84" end="0:00:23.41">will follow the curve in
        space-time around it.</p>
      <p begin="0:00:32.64" end="0:00:36.84">Our nearest star, the
        sun, has formed such a dimple</p>

      <p begin="0:00:36.84" end="0:00:38.00">and our tiny planet
        Earth</p>
      <p begin="0:00:38.00" end="0:00:41.50">goes along for the ride
        in the curve of its dimple</p>
      <p begin="0:00:41.50" end="0:00:43.80">staying in orbit around
        the sun.</p>
      <p begin="0:00:45.67" end="0:01:55.00"/>

    </div>
  </body>
</tt>]]></code><description><p>この実例は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/working-examples/FLASH9/adding_captions_to_Flash_video_as3.html">「Timed Textのキャプションファイルを Flash に追加する」のサンプル（英語）</loc>で確認できる。また、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/working-examples/FLASH9/adding_captions_to_Flash_video_as3.zip">「Timed Textのキャプションファイルを Flash に追加する」のサンプルをダウンロード</loc>することもできる。</p></description></eg-group></examples><resources><see-also><p>
        <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://ncam.wgbh.org/invent_build/web_multimedia/tools-guidelines">http://ncam.wgbh.org/invent_build/web_multimedia/tools-guidelines</loc>
      </p><p>
        <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.buraks.com/captionate/">http://www.buraks.com/captionate/</loc>
      </p><p>
        <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/AudioVideo/TT/">http://www.w3.org/AudioVideo/TT/</loc>
      </p></see-also></resources><related-techniques><relatedtech idref="G87"/></related-techniques><tests><procedure><p>Flash ムービーで表示されるすべてのビデオコンテンツを見て、次のことを確認する。</p><olist><item><p>すべての音声コンテンツでキャプションを利用でき、デフォルトまたはユーザー環境設定によってオンになる。</p></item><item><p>ビデオに含まれるすべての音声情報がキャプションで適切に説明されている。</p></item></olist></procedure><expected-results><ulist><item><p>1. および 2. を満たしている。</p></item></ulist></expected-results></tests><translationcredit><ulist><item>原文：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/FLASH9.html">FLASH9: Applying captions to prerecorded synchronized media（英語）</loc></item><item>日本語訳監修：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.infoaxia.co.jp/">植木 真（株式会社インフォアクシア）</loc></item><item>日本語訳：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.adobe.com/jp/accessibility/">アドビ システムズ 株式会社</loc></item></ulist></translationcredit></technique><technique id="FLASH10"><short-name>Flashでフォーム・コントロールが必須項目であることを示す</short-name><applicability><ulist><item><p>Adobe Flash Professional バージョン MX 以降</p></item><item><p>Adobe Flex</p></item></ulist></applicability><applies-to><success-criterion idref="minimize-error-cues"/></applies-to><ua-issues><ua-issue><p>ユーザーエージェントによるサポートに関する全般的な情報は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="flash.html#flash_ua_support">Flashのユーザーエージェントによるサポート</loc>を参照のこと。</p></ua-issue></ua-issues><description><p>この実装方法の目的は、利用者がデータを正しく送信できるように、Web アプリケーションまたはフォームに含まれる特定のフォーム・コントロールが必須項目であることを明示することである。フォーム・コントロールのアクセシブルな名前に「必須」という語を追加し、視覚的な表示をラベルの横に配置する。</p></description><examples><eg-group><head>コントロールのアクセシブルな名前に「必須」という語を追加する</head><description><p>この事例では、アクセシビリティパネルを使用して、フィールドが「必須」であることを利用者に知らせる方法を示している。</p><olist><item><p>フォーム・コントロールのラベルの近くに、アスタリスク文字などの視覚的なマークを配置する。</p></item><item><p>アクセシビリティパネルを使用して、「名前」フィールドに記述したコントロールのラベルのすぐ後に「（必須）」と記述する。</p></item></olist><p>次のスクリーンショットは、このアプローチについて説明したものである。</p><p><img xmlns:xlink="http://www.w3.org/1999/xlink" class="eximg" src="http://www.w3.org/TR/WCAG20-TECHS/working-examples/FLASH10/required_flash_control.png" alt="画面スクリーンショット：アクセシビリティパネルを用いて、フォーム・コントロールが必須項目であることを明示" height="312" width="546"/></p><p>この実例は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/working-examples/FLASH10/required_form_fields_as2.html">「コントロールのアクセシブルな名前に「必須」という語を追加する」のサンプル（英語）</loc>で確認できる。また、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/working-examples/FLASH10/required_form_fields_as2.swf">「コントロールのアクセシブルな名前に「必須」という語を追加する」のソース（英語）</loc>をダウンロードすることもできる。</p></description></eg-group></examples><resources/><related-techniques/><tests><procedure><p>Flash ムービーに含まれる必須項目のフォーム・コントロールごとに、次のことを確認する。</p><ulist><item><p>必須項目であることが視覚的に示されている。</p></item><item><p>必須項目であることが、アクセシビリティパネルの「名前」フィールドを使用してテキストで記述されている。</p></item></ulist></procedure><expected-results><ulist><item><p>上記の二点を満たしている。</p></item></ulist></expected-results></tests><translationcredit><ulist><item>原文：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/FLASH10.html">FLASH10: Indicating required form controls in Flash（英語）</loc></item><item>日本語訳監修：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.infoaxia.co.jp/">植木 真（株式会社インフォアクシア）</loc></item><item>日本語訳：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.adobe.com/jp/accessibility/">アドビ システムズ 株式会社</loc></item></ulist></translationcredit></technique><technique id="FLASH11"><short-name>オブジェクトについて長いテキストの説明を提供する</short-name><applicability><ulist><item><p>Adobe Flash Professional バージョン MX 以降</p></item><item><p>Adobe Flex</p></item></ulist></applicability><applies-to><success-criterion idref="text-equiv-all"/></applies-to><ua-issues><ua-issue><p>ユーザーエージェントによるサポートに関する全般的な情報は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="flash.html#flash_ua_support">Flashのユーザーエージェントによるサポート</loc>を参照のこと。</p></ua-issue></ua-issues><description><p>この実装方法の目的は、画像のアクセシブルな名前として適切な、画像についての長くて詳細なテキスト情報を提供することである。画像の隣にアクセシブルなボタンを配置し、そのボタンによって画像の長いテキストの説明を含む新しいパネルを表示するようにする。</p></description><examples><eg-group><head>非表示の説明を利用者の要求に応じて表示する</head><description><p>この事例では、統計データを含む画像が用いられている。画像には、短い代替テキストが提供されている（「グラフ：一つ以上の障害があることを申告した米国の施設に入っていない16～64歳の人口比率」）。画像の下にあるボタンを押すことによって、ユーザーは統計情報自体の長いテキストの説明を表示することができる。ボタンを押すと、次のように動作する。</p><ulist><item><p>長いテキストの説明を含むムービークリップが表示され、AccessibilityProperties.silent プロパティが false に設定され、支援技術で認識可能となる。そして、そのコンテンツがタブ順序に配置される。</p></item><item><p>元の画像とボタンは、支援技術とタブ順序からは一時的に隠された状態になる。</p></item></ulist><p>画像と説明的なテキストは、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://webaim.org/techniques/images/longdesc">HTML example for long image descriptions on WebAIM.org：英語</loc>から引用した。</p><p>この実装方法の実例は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/working-examples/FLASH11/long_description_for_image_as3.html">「非表示の説明を利用者の要求に応じて表示する」のサンプル（英語）</loc>で確認できる。また、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/working-examples/FLASH11/long_description_for_image_as3.swf">「非表示の説明を利用者の要求に応じて表示する」のソース（英語）</loc>をダウンロードすることもできる。</p></description><code><![CDATA[import flash.accessibility. *;
import fl.accessibility.ButtonAccImpl;
import flash.system.Capabilities;

ButtonAccImpl.enableAccessibility();

//set accessibility properties
graph_mc.accessibilityProperties = new AccessibilityProperties();
graph_mc.accessibilityProperties.name = "Graph of percentage of total U.S. \ 
  noninsitutionalized population age 16-64 declaring one or more disabilities";
longDescBtn.accessibilityProperties = new AccessibilityProperties();
longDesc_mc.accessibilityProperties = new AccessibilityProperties();
longDesc_mc.accessibilityProperties.forceSimple = false;
hideLongDesc();

//set click handlers for button
longDescBtn.addEventListener("click", function () {
  showLongDesc()
});
longDesc_mc.longDescCloseBtn.addEventListener("click", function () {
  hideLongDesc()
});

function showLongDesc() {
  // hide the original content from screen readers
  graph_mc.accessibilityProperties.silent = true;
  graph_mc.tabEnabled = false;
  graph_mc.alpha = 0.2;
  longDescBtn.enabled = false;
  longDescBtn.accessibilityProperties.silent = true;
  longDesc_mc.accessibilityProperties.silent = false;
  // make the long description panel visible, both visually and to screen readers
  longDesc_mc.visible = true;
  longDesc_mc.tabEnabled = true;
  longDesc_mc.longDescTitle.stage.focus = longDesc_mc.longDescTitle;
  if (Capabilities.hasAccessibility)
  Accessibility.updateProperties();
}

function hideLongDesc() {
  //do the opposite to what showLongDesc does
  graph_mc.accessibilityProperties.silent = false;
  graph_mc.tabEnabled = true;
  graph_mc.alpha = 1;
  longDescBtn.enabled = true;
  longDescBtn.accessibilityProperties.silent = false;
  longDesc_mc.visible = false;
  longDesc_mc.accessibilityProperties.silent = true;
  longDesc_mc.tabEnabled = false;
  longDescBtn.stage.focus = longDescBtn;
  if (Capabilities.hasAccessibility)
  Accessibility.updateProperties();
}]]></code></eg-group></examples><resources/><related-techniques><relatedtech idref="G73"/><relatedtech idref="G74"/><relatedtech idref="G92"/><relatedtech idref="G94"/></related-techniques><tests><procedure><p>Flash ムービーに長い説明を要する画像が含まれている場合、近くにあるボタンを押すことによって長い説明が表示される。</p></procedure><expected-results><ulist><item><p>上記のチェックポイントを満たしている。</p></item></ulist></expected-results></tests><translationcredit><ulist><item>原文：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/FLASH11.html">FLASH11: Providing a longer text description of an object（英語）</loc></item><item>日本語訳監修：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.infoaxia.co.jp/">植木 真（株式会社インフォアクシア）</loc></item><item>日本語訳：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.adobe.com/jp/accessibility/">アドビ システムズ 株式会社</loc></item></ulist></translationcredit></technique><technique id="FLASH12"><short-name>クライアントサイドのバリデーションを提供し、エラーメッセージのテキストをアクセシブルな「説明」によって追加する</short-name><applicability><ulist><item><p>Adobe Flash Professional バージョン MX 以降</p></item><item><p>Adobe Flex</p></item></ulist></applicability><applies-to><success-criterion idref="minimize-error-identified"/><success-criterion idref="minimize-error-suggestions"/></applies-to><ua-issues><ua-issue><p>ユーザーエージェントによるサポートに関する全般的な情報は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="flash.html#flash_ua_support">Flashのユーザーエージェントによるサポート</loc>を参照のこと。</p></ua-issue></ua-issues><description><p>この実装方法の目的は、各フィールドに利用者が入力した値をクライアントサイドのスクリプトを用いてバリデートすることである。エラーが見つかった場合、無効なデータのあるコントロールにエラーメッセージが追加される。エラーメッセージは、コントロールのすぐ横に視覚的に配置される。また、エラーメッセージのテキストがコントロールのアクセシブルな「説明」に追加され、コントロールがフォーカスを受け取るときに、支援技術で読みやすくなる。</p></description><examples><eg-group><head>テキストフィールドのバリデート</head><description><p>この事例では、二つのテキストフィールド（「name」および「zip code」）を含むサンプルフォームが示されている。どちらのフィールドも必須入力である。フォームの「submit」ボタンが押されると、テキストフィールドの値が検証される。テキストフィールドに無効な値が含まれていると、<code><![CDATA[_accProps]]></code> オブジェクトがそのテキストフィールドに対して生成され、<code><![CDATA[description]]></code> プロパティにエラーメッセージが設定される。</p><note><p class="prefix">アクセシブルな「説明」（<code><![CDATA[_accProps.description]]></code> プロパティ）を使用する代わりに、エラーテキストをアクセシブルな「名前」（<code><![CDATA[_accProps.name]]></code>）に追加することもできる。これは、<code><![CDATA[_accProps.description]]></code>よりも広範囲の支援技術でサポートされている。</p></note><p>ActionScript 2.0 のコード</p></description><code><![CDATA[import flash.accessibility. *;
import mx.accessibilty.ButtonAccImpl;
import mx.controls.Alert;
import mx.accessibility.AlertAccImpl;

AlertAccImpl.enableAccessibility();
ButtonAccImpl.enableAccessibility;

resetTextFieldAccNames();
Accessibility.updateProperties();

submit_btn.addEventListener("click", handleClick);
function handleClick(e) {
  //reset values
  resetTextFieldAccNames();
  resetTextFieldAccDescriptions();
  resetErrorLabels();
  //perform validation
  var errors =[];
  if (name_txt.text == '')
    errors.push([name_txt, "You must enter your name", name_error_lbl]);
  if (zipcode_txt.text == '')
    errors.push([zipcode_txt, "You must enter your zip code", zipcode_error_lbl]);
  else if (zipcode_txt.text.length != 5 || isNaN(zipcode_txt.text))
    errors.push([zipcode_txt, "Zip code must be 5 digits", zipcode_error_lbl]);
  
  //add validation error messages, if any
  var field, errorMsg, errorLabel;
  if (errors.length > 0) {
    //loop over encountered errors
    for (var i = 0; i < errors.length; i++) {
      field = errors[i][0];
      errorMsg = errors[i][1];
      errorLabel = errors[i][2];
      
      updateAccDescription(field, "Warning: " + errorMsg);
      errorLabel.text = errorMsg;
    }
  } else {
    Alert.show("Form field values were entered correctly");
  }
  Accessibility.updateProperties();
}

function updateAccName(obj, newName: String) {
  if (! obj._accProps)
  obj._accProps = new Object();
  obj._accProps.name = newName;
}

function updateAccDescription(obj, newDescription: String) {
  if (! obj._accProps)
  obj._accProps = new Object();
  obj._accProps.description = newDescription;
}

function getAccName(obj) {
  return obj._accProps? obj._accProps.name: "";
}

function resetTextFieldAccNames() {
  updateAccName(name_txt, "name, required");
  updateAccName(zipcode_txt, "zip code, required");
}

function resetTextFieldAccDescriptions() {
  updateAccDescription(name_txt, "");
  updateAccDesciption(zipcode_txt, "");
}

function resetErrorLabels() {
  name_error_lbl.text = "";
  zipcode_error_lbl.text = "";
}]]></code><description><p>この方法は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/working-examples/FLASH12/client_side_validation_flash_forms_using_alert_as2.html">「テキストフィールドのバリデート」のサンプル（英語）</loc>で確認できる。また、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/working-examples/FLASH12/client_side_validation_flash_forms_using_alert_as2.swf">「テキストフィールドの検証」のソース（英語）</loc>をダウンロードすることもできる。</p></description></eg-group></examples><resources/><related-techniques><relatedtech idref="SCR32"/></related-techniques><tests><procedure><p>Flash ムービーが送信可能でインタラクティブなフォームを提供する場合、次のことを確認する。</p><olist><item><p>エラーメッセージ（アラート）が、視覚的にコントロールのすぐ隣に配置されている。</p></item><item><p>エラーメッセージ（アラート）が、コントロールのアクセシブルな「名前」または「説明」に追加されている。</p></item></olist></procedure><expected-results><ulist><item><p>1. および 2. を満たしている。</p></item></ulist></expected-results></tests><translationcredit><ulist><item>原文：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/FLASH12.html">FLASH12: Providing client-side validation and adding error text via the accessible description（英語）</loc></item><item>日本語訳監修：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.infoaxia.co.jp/">植木 真（株式会社インフォアクシア）</loc></item><item>日本語訳：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.adobe.com/jp/accessibility/">アドビ システムズ 株式会社</loc></item></ulist></translationcredit></technique><technique id="FLASH13"><short-name>HTML の言語属性を使用して Flash コンテンツの言語を指定する</short-name><applicability><ulist><item><p>Adobe Flash Professional バージョン MX 以降</p></item><item><p>Adobe Flex</p></item></ulist></applicability><applies-to><success-criterion idref="meaning-doc-lang-id"/><success-criterion idref="meaning-other-lang-id"/></applies-to><ua-issues><ua-issue><p>ユーザーエージェントによるサポートに関する全般的な情報は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="flash.html#flash_ua_support">Flashのユーザーエージェントによるサポート</loc>を参照のこと。</p></ua-issue><ua-issue><p>JAWS 8.0 以降は、言語属性に基づいて自動的に言語を変更するように設定することができる。ただし自動的に切り替えることができるのは、プライマリコードで指定される主要言語のみである。言語のサブコードによって地域的に変異した言語が指定されている場合、JAWS は設定されているデフォルトの主要言語を使用する。</p></ua-issue></ua-issues><description><p>この実装方法の目的は、Flash が含まれるページの HTML 要素または object 要素に lang 属性または xml:lang 属性（またはその両方）を指定することによって、Flash コンテンツのデフォルトの言語を特定することである。埋め込まれた Flash コンテンツは、この方法で指定された言語を継承する。Web ページ全体で 1 つの言語を使用する場合は、ページの HTML 要素に lang 属性および xml:lang 属性を指定することができる。これについては、「<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.ciaj.or.jp/access/web/docs/WCAG-TECHS/H57.html">H57： html要素の言語属性を用いる</loc>」で説明されている。</p><p>Flash は HTML 要素または object 要素から言語を継承する。したがって、Flash コンテンツ内のすべてのテキストは、そのようにして継承された言語であると想定される。これは、ある言語のページに別の言語の Flash オブジェクトを配置すること、また、異なる言語の複数の Flash オブジェクトを配置することが可能であることを意味する。ただし、この実装方法を使用して、<em>一つの Flash オブジェクト内で</em>コンテンツの言語（人間が使用する言語）を変更するように指定することはできない。</p></description><examples><eg-group><head>埋め込まれた Flash 内でページ全体の言語を使用する</head><description><p>この事例では、Web ページ全体のコンテンツをフランス語に定義する。Flash コンテンツは、HTML コンテナで指定された言語を継承する。</p></description><code><![CDATA[<?xml version="1.0" encoding="UTF-8"?>

<html lang="fr" xml:lang="fr" xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta content="text/html; charset=iso-8859-1"
      http-equiv="Content-Type"/>
    <title>Flash Languages Examples - French</title>
    <script src="swfobject.js" type="text/javascript"/>
    <script type="text/javascript">

    swfobject.registerObject("myMovie", "9.0.115", "expressInstall.swf");
</script>
  </head>
  <body>
    <object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
      height="420" id="myMovie" width="780">
      <param name="movie" value="myMovie.swf"/>
      <!--[if !IE]>-->

      <object data="languages.swf" height="420"
        type="application/x-shockwave-flash" width="780">
        <!--<![endif]-->
        <!--[if !IE]>-->
      </object>
      <!--<![endif]-->

    </object>
  </body>
</html>]]></code><description><p>この実例は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/working-examples/FLASH13/language_en.html">「埋め込まれた Flash 内でページ全体の言語を使用する」のサンプル（英語）</loc>で確認できる。また、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/working-examples/FLASH13/languages.swf">「埋め込まれた Flash 内でページ全体の言語を使用する」のソース（英語）</loc>をダウンロードすることもできる。</p></description></eg-group><eg-group><head>埋め込まれた Flash のみに言語を適用する</head><description><p>この事例では、Flash ムービーのコンテンツをフランス語に定義する。Flash ムービーは、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://code.google.com/p/swfobject/wiki/documentation#How_to_embed_Flash_Player_content_using_SWFObject_static_publish">SWFObject による静的なパブリッシュ手法（英語）</loc>を使用して埋め込まれている。この手法では 二つのネストした object 要素が使用され、外側の要素は Internet Explorer 向け、内側の要素はその他のブラウザ向けである。このため、lang 属性および xml:lang 属性を二つ追加する必要がある。</p></description><code><![CDATA[<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
  height="420" id="myMovie" lang="fr" width="780" xml:lang="fr">

  <param name="movie" value="myMovie.swf"/>
  <!--[if !IE]>-->
  <object data="languages.swf" height="420" lang="fr"
    type="application/x-shockwave-flash" width="780" xml:lang="fr">
    <!--<![endif]-->
    <!--[if !IE]>-->

  </object>
  <!--<![endif]-->
</object>]]></code></eg-group></examples><resources><see-also><ulist><item><p>
            <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.rfc-editor.org/rfc/bcp/bcp47.txt">BCP 47: Tags for the Identification of Languages</loc>
          </p></item><item><p>
            <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/1999/REC-html401-19991224/struct/dirlang.html#h-8.1.2">Inheritance of language codes</loc>
          </p></item></ulist></see-also></resources><related-techniques><relatedtech idref="H57"/><relatedtech idref="H58"/></related-techniques><tests><procedure><olist><item><p>SWF への参照が含まれている HTML ドキュメントの html 要素および object 要素を確認する。</p></item><item><p>Flash コンテンツの言語（人間が使用する言語）が、object 要素で継承されている言語（HTML 4.01 仕様書の「Inheritance of language codes」を参照）と同じである</p></item><item><p>lang 属性の値が、「BCP 47: Tags for the Identification of Languages」、またはその後続の仕様に準拠しており、Flash コンテンツで使用されている主要言語を反映したものである。</p></item><item><p>Flash コンテンツ内で人間が使用する言語に変更が生じていない</p></item></olist></procedure><expected-results><ulist><item><p>達成基準 3.1.1 については、1.～3. を全て満たしている。</p></item><item><p>達成基準 3.1.2 については、1.～4. を全て満たしている。</p></item></ulist></expected-results></tests><translationcredit><ulist><item>原文：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/FLASH13.html">FLASH13: Using HTML language attributes to specify language in Flash content（英語）</loc></item><item>日本語訳監修：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.infoaxia.co.jp/">植木 真（株式会社インフォアクシア）</loc></item><item>日本語訳：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.adobe.com/jp/accessibility/">アドビ システムズ 株式会社</loc></item></ulist></translationcredit></technique><technique id="FLASH14"><short-name>Flash でキーボード及びマウスのイベントハンドラを両方とも用いる</short-name><applicability><ulist><item><p>Adobe Flash Professional バージョン MX 以降</p></item><item><p>Adobe Flex</p></item></ulist></applicability><applies-to><success-criterion idref="keyboard-operation-keyboard-operable"/><success-criterion idref="keyboard-operation-all-funcs"/></applies-to><ua-issues><ua-issue><p>ユーザーエージェントによるサポートに関する全般的な情報は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="flash.html#flash_ua_support">Flashのユーザーエージェントによるサポート</loc>を参照のこと。</p></ua-issue></ua-issues><description><p>この実装方法の目的は、マウスイベント、フォーカスイベントそれぞれに対応するイベントハンドラを指定することによって、デバイスに依存しない操作を提供する方法を示すことである。マウスイベントとキーボードイベントの両方をサポートすることにより、ユーザーは使用している入力デバイスに関係なく、同じ情報を受け取ることができるようになる。イベントによってコントロールの状態が変更される場合は、イベントハンドラ内でコントロールの説明的な名前を変更することが重要になる場合がある。</p></description><examples><eg-group><head>複数のイベントハンドラを使用してボタンのテキストを更新する</head><description><p>この事例では、ボタンのグループに対して、flash.events.FocusEvent.FOCUS_IN イベントと flash.events.MouseEvent.MOUSE_OVER イベントに同じイベントハンドラを割り当てている。ボタンがフォーカスを受け取るか、またはマウスをボタンの上に移動すると、ボタンを説明するテキストが更新される。</p></description><code><![CDATA[import fl.accessibility.ButtonAccImpl;
import fl.controls.Button;
import flash.accessibility. *
import flash.events.FocusEvent;
import flash.events.MouseEvent;
import flash.net.navigateToURL;
import flash.net.URLRequest;

ButtonAccImpl.enableAccessibility();
var states: Object = {
  "Alabama": "Alabama is a state located in the southeastern region of the \
    United States of America.",
  "California": "California is the most populous state in the United States",
  "New York": "New York is a state in the Mid-Atlantic and Northeastern \
    regions of the United States"
};

var buttons: Array =[];
var button: Button;
var accProps: AccessibilityProperties;
var count = 0;
for (var i in states) {
  button = new Button();
  button.label = i;
  button.addEventListener(MouseEvent.CLICK, clickHandler);
  button.addEventListener(MouseEvent.MOUSE_OVER, highlightHandler);
  button.addEventListener(MouseEvent.MOUSE_OUT, unHighlightHandler);
  button.addEventListener(FocusEvent.FOCUS_IN, highlightHandler);
  button.addEventListener(FocusEvent.FOCUS_OUT, unHighlightHandler);
  accProps = new AccessibilityProperties();
  accProps.description = states[i];
  button.accessibilityProperties = accProps;
  addChild(button);
  button.x = 30
  button.y = 30 + count * 30;
  buttons[i] = button;
  count++;
}

function highlightHandler(e) {
  descText.text = states[e.target.label];
}

function unHighlightHandler(e) {
  descText.text = "";
}


function clickHandler(e) {
  var url: URLRequest = new URLRequest("http://www.wikipedia.org/wiki/" + e.target.label);
  navigateToURL(url, "_self");
}]]></code><description><note><p class="prefix">スクリーンリーダーを使用している利用者のアクセシビリティを向上させるには、説明文のテキストをアクセシブルな説明としてボタン自体に付加する。また、ボタンコンポーネントの MouseEvent.CLICK イベントは、マウスクリックだけではなく Enter キーを押したときにも発生することに注意しなければならない。</p></note><p>この実装方法は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/working-examples/FLASH14/redundant_event_handlers_as3.html">「複数のイベントハンドラを使用してボタンのテキストを更新する」のサンプル（英語）</loc>で確認できる。また、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/working-examples/FLASH14/redundant_event_handlers_as3.swf">「複数のイベントハンドラを使用してボタンのテキストを更新する」のソース（英語）</loc>をダウンロードすることもできる。</p></description></eg-group></examples><resources/><related-techniques><relatedtech idref="SCR2"/></related-techniques><tests><procedure><p>Flash ムービーのスクリプト内のすべてのイベントハンドラについて、次の手順を実行する。</p><olist><item><p>マウスとキーボードの両方のイベントにイベントハンドラが割り当てられている</p></item></olist></procedure><expected-results><ulist><item><p>1. を満たしている。</p></item></ulist></expected-results></tests><translationcredit><ulist><item>原文：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/FLASH14.html">FLASH14: Using redundant keyboard and mouse event handlers in Flash（英語）</loc></item><item>日本語訳監修：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.infoaxia.co.jp/">植木 真（株式会社インフォアクシア）</loc></item><item>日本語訳：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.adobe.com/jp/accessibility/">アドビ システムズ 株式会社</loc></item></ulist></translationcredit></technique><technique id="FLASH15"><short-name>tabIndex プロパティを使用して Flash 内の論理的な読み上げ順序及びタブ順序を指定する</short-name><applicability><ulist><item><p>Adobe Flash Professional バージョン MX 以降</p></item><item><p>Adobe Flex</p></item></ulist></applicability><applies-to><success-criterion idref="content-structure-separation-sequence"/><success-criterion idref="navigation-mechanisms-focus-order"/></applies-to><ua-issues><ua-issue><p>ユーザーエージェントによるサポートに関する全般的な情報は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="flash.html#flash_ua_support">Flashのユーザーエージェントによるサポート</loc>を参照のこと。</p></ua-issue></ua-issues><description><p>この実装方法の目的は、Flash ムービー内の各要素にタブインデックス（tabIndex）値を割り当てることによって音声読み上げ順序を制御することである。</p><p>タブ順序とは、利用者が Tab キーを押したときに、オブジェクトが入力フォーカスを受け取る順序である。音声読み上げ順序にフォーカスを受け取ることのできない要素が含まれているのと同様に、タブ順序には必ずしも音声読み上げ順序と同じ要素が含まれているわけではない。しかし、音声読み上げ順序とタブ順序は、どちらもタブインデックスの値を用いて制御することが可能である。</p><p>Flash Player では、デフォルトのタブインデックスの順序（左から右、上から下）が使用される。</p><p>カスタムの音声読み上げ順序を作成するには、ActionScript またはアクセシビリティパネルを使用して、ステージ上の各インスタンスにタブインデックス値を割り当てる。フォーカスを受け取ることが可能なオブジェクトだけではなく、アクセシビリティを有効にするすべてのオブジェクトに対してタブインデックス値を作成する。例えば、ユーザーはダイナミックテキストにタブ移動することはできないが、ダイナミックテキストにもタブインデックスを設定する必要がある。</p><p>キーボード操作のナビゲーションのために、次のオブジェクトに対して、アクセシビリティパネルを使用してカスタムのタブインデックス値を指定することができる。</p><ulist><item><p>ダイナミックテキスト</p></item><item><p>入力テキスト</p></item><item><p>ボタン</p></item><item><p>ムービークリップ（コンパイルしたムービークリップを含む）</p></item><item><p>コンポーネントと</p></item><item><p>スクリーン</p></item></ulist><p>Tab キーによるフォーカス移動は、タブインデックス値の最も小さいところからスタートする。Tab キーによるフォーカス移動が最も大きなタブインデックス値のオブジェクトに達すると、フォーカスはまた最も小さいタブインデックス値のオブジェクトに戻る。タブインデックス値が指定されているオブジェクトをドキュメント内または別のドキュメントへ移動させる際には、Flashはタブインデックス属性値を保持している。そのため、タブインデックス値の重複（例えば、ステージ上にある二つの異なるオブジェクトが同じタブインデックス値を持っていないか）をチェックして、必要に応じて修正する必要がある。フレーム内の複数のオブジェクトに同じタブインデックス値が設定されている場合は、Flash はオブジェクトがステージ上に配置された順序に従う</p><p>アクセシビリティパネルを使用してタブインデックス値を追加するには、ステージ上のアクセシビリティが有効なすべてのオブジェクトに対して以下の手順を実行する。</p><olist><item><p>要素をクリックして選択する。</p></item><item><p>アクセシビリティパネルで、「タブインデックス」フィールドに数値を入力する。この値には、選択されているオブジェクトの読み上げ順序を示す正の整数（最大 65535）を指定する必要がある。タブインデックスに小さい値が設定された要素が先に、大きい値が設定された要素が後に読み上げられる。フレーム内の複数のオブジェクトに同じタブインデックスが設定されている場合は、Flash はオブジェクトがステージ上に配置されている順序に従う。</p></item><item><p>現在定義されているタブ順序を表示するには、［表示］&gt;［タブ順序の表示］を選択する。個々のオブジェクトの左上にタブインデックスの数値が表示される。</p></item></olist><note><p class="prefix">ActionScript のコードを用いて、キーボード操作のナビゲーションのためにタブ順序のインデックスを作成することもできる。</p></note><p>上記の手順を以下のスクリーンショットで示す。</p><p>
      <img xmlns:xlink="http://www.w3.org/1999/xlink" class="eximg" src="http://www.w3.org/TR/WCAG20-TECHS/working-examples/FLASH15/ac_show_tab_order_view.png" alt="画面スクリーンショット：タブ順序を視覚化" height="232" width="214"/>
    </p><p>
      <img xmlns:xlink="http://www.w3.org/1999/xlink" class="eximg" src="http://www.w3.org/TR/WCAG20-TECHS/working-examples/FLASH15/setting_tabindex_in_accessibility_panel.png" alt="画面スクリーンショット：アクセシビリティパネルでタブインデックス値を設定" height="319" width="281"/>
    </p><note><p class="prefix">現在の Flash Player では、FLA ファイル内のすべてのオブジェクトをタブインデックス値のリストに追加する必要はない。すべてのオブジェクトにタブインデックスを指定しなくても、スクリーンリーダーは各オブジェクトを正しく読み上げる。</p></note></description><examples><eg-group><head>タブインデックスを使用して列の構造をナビゲートする</head><description><p>この事例には、列としてグループ化された動的な TextField インスタンスが含まれている。列の構造に従って読み上げ順序が設定されるようにする。TextField インスタンスには、テキストコンテンツに応じたタブインデックス値が指定されている（例えば、テキスト「Sample text 3」が格納されている TextField にはタブインデックス値 3 が設定されている）。また、タブインデックス値を設定していない TextField が 1 つ追加されている。このフィールドには、テキスト「Not in tab order」が格納されている。このフィールドは見かけ上は「Sample text 2」と「Sample text 3」の間に配置されているが、タブインデックス値が割り当てられていないため、カスタムタブ順序の中では最後に配置される。</p><p>この実例は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/working-examples/FLASH15/custom_reading_order_as3.html">「タブインデックスを使用して列の構造をナビゲートする」のサンプル（英語）</loc>で確認できる。また、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/working-examples/FLASH15/custom_reading_order_as3.swf">「タブインデックスを使用して列の構造をナビゲートする」のソース（英語）</loc>をダウンロードすることもできる。</p></description></eg-group><eg-group><head>2カラムレイアウトでタブ順序を制御する</head><description><p>この事例では、Flash ベースのフォームが2カラムでレイアウトされている。タブ順序がカラム構造に従うようにするには、アクセシビリティパネルを用いて各フォーム・コントロールにタブインデックス値を割り当てる。</p><p>この実例は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/working-examples/FLASH15/custom_tab_order_as3.html">「2カラムレイアウトでタブ順序を制御する」のサンプル（英語）</loc>で確認できる。また、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/working-examples/FLASH15/custom_tab_order_as3.swf">「2カラムレイアウトでタブ順序を制御する」のソース（英語）</loc>をダウンロードすることもできる。</p></description></eg-group></examples><resources><see-also><ulist><item><p>
            <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://help.adobe.com/en_US/Flash/10.0_UsingFlash/WSd60f23110762d6b883b18f10cb1fe1af6-7c3ea.html#WSd60f23110762d6b883b18f10cb1fe1af6-7c36a">Adobe Flash CS4 documentation regarding reading and tab order</loc>
          </p></item></ulist></see-also></resources><related-techniques><relatedtech idref="G57"/><relatedtech idref="G59"/></related-techniques><tests><procedure><olist><item><p>スクリーンリーダーを使用して Flash ムービーの各要素を一つずつ操作する。</p></item><item><p>スクリーンリーダーがコンテンツを読み上げる順序が、視覚的な論理構造に基づいた順序と一致している。</p></item><item><p>Flash ムービー内にフォーカスが置かれているとき、Tabキーを繰り返し押すことによってキーボード操作でコンテンツ間を行き来する。</p></item><item><p>インタラクティブでフォーカスを受け取ることのできる要素すべてに、キーボード操作によってフォーカスを論理的な順序で移動させることができる。</p></item></olist></procedure><expected-results><ulist><item><p>2. および 4. を満たしている。</p></item></ulist></expected-results></tests><translationcredit><ulist><item>原文：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/FLASH15.html">FLASH15: Using the tabIndex property to specify a logical reading order and a logical tab order in Flash（英語）</loc></item><item>日本語訳監修：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.infoaxia.co.jp/">植木 真（株式会社インフォアクシア）</loc></item><item>日本語訳：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.adobe.com/jp/accessibility/">アドビ システムズ 株式会社</loc></item></ulist></translationcredit></technique><technique id="FLASH16"><short-name>標準コンポーネントに対するクリックイベントを使用して、アクションをキーボードによって操作可能にする</short-name><applicability><ulist><item><p>Adobe Flash Professional バージョン MX 以降</p></item><item><p>Adobe Flex</p></item></ulist></applicability><applies-to><success-criterion idref="keyboard-operation-keyboard-operable"/><success-criterion idref="keyboard-operation-all-funcs"/></applies-to><ua-issues><ua-issue><p>ユーザーエージェントによるサポートに関する全般的な情報は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="flash.html#flash_ua_support">Flashのユーザーエージェントによるサポート</loc>を参照のこと。</p></ua-issue></ua-issues><description><p>この実装方法の目的は、Adobe Flash Profressional のオーサリングツールにより提供されるキーボード操作が可能な標準 Flash コンポーネントに関連付けることで、キーボード操作でスクリプト機能を呼び出す方法を示すことである。スクリプトで記述されたアクションをキーボードから呼び出せるようにするため、アクションを Button コンポーネントなどの標準的な Flash コンポーネントに関連付ける。これらのコンポーネントのクリックイベントは、デバイスに依存しない。"CLICK"イベントがマウスイベントである場合、このイベントは実際にボタンのデフォルトのアクションにマッピングされる。利用者がマウスで要素をクリックするとデフォルトのアクションが実行されるが、利用者が要素にフォーカスを移動してスペースキーを押した場合やアクセシビリティ API により要素がトリガされた場合も、デフォルトのアクションが実行される。</p></description><examples><eg-group><head>ボタンのクリックイベント</head><description><p>この事例では、MouseEvent.CLICK イベントを使用してそのラベルを変更するボタンを示している。このイベントは、マウスをクリックするかスペースキーを押した場合にトリガされる。</p></description><code><![CDATA[import fl.controls.Button;
import fl.accessibility.ButtonAccImpl;

ButtonAccImpl.enableAccessibility();

var testBtn = new Button();
testBtn.label = "click me";
testBtn.addEventListener(MouseEvent.CLICK, clickHandler, false);
addChild(testBtn);
testBtn.x = testBtn.y = 10;

function clickHandler(e) {
  e.target.label = "Thanks";
}]]></code><description><p>この実例は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/working-examples/FLASH16/device_independent_event_handler_on_component_as3.html">「ボタンのクリックイベント」のサンプル（英語）</loc>で確認できる。また、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/working-examples/FLASH16/device_independent_event_handler_on_component_as3.swf">「ボタンのクリックイベント」のソース（英語）</loc>をダウンロードすることもできる。</p></description></eg-group><eg-group><head>（ 作成中）</head><description/></eg-group></examples><resources/><related-techniques><relatedtech idref="SCR35"/></related-techniques><tests><procedure><p>Flash ムービーにインタラクティブなコントロールが含まれている場合は、次のことを確認する。</p><olist><item><p>コントロールに標準の Flash コンポーネントが使用されている。</p></item><item><p>コントロールで "click" イベントを使用している。</p></item></olist></procedure><expected-results><ulist><item><p>1. および 2. を満たしている。</p></item></ulist></expected-results></tests><translationcredit><ulist><item>原文：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/FLASH16.html">FLASH16: Making actions keyboard accessible by using the click event on standard components（英語）</loc></item><item>日本語訳監修：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.infoaxia.co.jp/">植木 真（株式会社インフォアクシア）</loc></item><item>日本語訳：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.adobe.com/jp/accessibility/">アドビ システムズ 株式会社</loc></item></ulist></translationcredit></technique><technique id="FLASH17"><short-name>Flash オブジェクトをキーボードで操作可能にして、キーボードトラップを回避する</short-name><applicability><ulist><item><p>Adobe Flash Professional バージョン MX 以降</p></item><item><p>Adobe Flex</p></item></ulist></applicability><applies-to><success-criterion idref="keyboard-operation-keyboard-operable"/><success-criterion idref="keyboard-operation-trapping"/></applies-to><ua-issues><ua-issue><p>ユーザーエージェントによるサポートに関する全般的な情報は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="flash.html#flash_ua_support">Flashのユーザーエージェントによるサポート</loc>を参照のこと。</p></ua-issue><ua-issue><p>この実装方法が対象としている問題は、Internet Explorer 以外のブラウザのみで発生する。ただし、現時点では、この実装方法で対処できるのは、Firefox（WindowsとMac OSX）、Google ChromeとSafari 5（いずれもMac OSXのみ）である。ChromeとSafariのWindows版は、今のところプラグインの中へフォーカスを移動させたり、プラグインから外へフォーカスを移動させたりすることができない。また、この実装方法が動作するためには JavaScript を有効にする必要がある。</p></ua-issue></ua-issues><description><p>この実装方法の目的は、キーボード・フォーカスがウェブページに埋め込まれた Flash コンテンツに入ったり、Flash コンテンツから出たりできるようにすることである。Internet Explorer 以外のブラウザでは、埋め込まれた Flash コンテンツのキーボード・アクセシビリティに関連した問題がある。その問題とは、Flash コンテンツとその周囲の HTML コンテンツのいずれもキーボードでアクセスが可能な場合、マウスを使用せずに Flash コンテンツと HTML コンテンツの間でキーボードフォーカスを移動させることができない点である。つまり、Flash コンテンツの内部にフォーカスがあると、キーボードのユーザーはフォーカスを移動できない。同様に、HTML コンテンツ（Flash ムービーの外部）のいずれかにフォーカスがあると、Flash コンテンツにフォーカスを移動することができなくなる。</p><p>これは長い間存在している問題であり、ブラウザによる埋め込みプラグインの実装方法に関連している。この問題が修正されるまで、回避策を用意するのは Flash 開発者の義務である。この実装方法は、その回避策の一つである。この実装方法の背景にある考え方は以下のとおりである。</p><ulist><item><p>ドキュメント内の各 Flash コンテンツに関して、隣接する二つのフォーカス可能な HTML オブジェクト（コンテンツの前後のオブジェクト）を特定する。これらの要素は、ウェブページ内でタブ順序が適用される任意の HTML 要素である（リンクやフォーム・コントロールなど）。</p></item><item><p>Flash コンテンツのオブジェクト自体をドキュメントのタブ順序にも追加する。これにより、コンテンツにタブを移動することが可能になる。</p></item><item><p>Flash コンテンツの内部では、Flash Player が独自のタブ順序を管理する。通常、Flash コンテンツの中をタブ移動していて、タブ順序の先頭または最後に到達したとき、フォーカスはラップされて　Flash コンテンツのタブ順序の反対側の先頭または最後に移動する。つまり、フォーカスを Tab キー（または Shift + Tab キー）によって Flash コンテンツから抜け出させることができない。しかし、この実装方法を使用することによって、「フォーカスのラップ」が検出された場合に HTML のタブ順序内の隣接する要素に移動するようになる（キーボードを使用して Flash コンテンツのタブ順序から抜け出すことが可能になる）。</p></item></ulist><p>Flash プロジェクトに SWFFocus クラスをインポートすると、次のようになる。</p><ulist><item><p>JavaScript の &lt;script&gt; タグが生成され、Flash コンテンツが格納されている HTML ドキュメントに追加される。この JavaScript コードは以下の処理を行う。</p><ulist><item><p>ページ内の各 Flash コンテンツの &lt;object&gt; 要素に対して、タブインデックス値 "0" を設定する。これにより、Flash オブジェクトがタブ順序に含まれるようになる。</p></item><item><p>オプションで、Flash コンテンツの前後に非表示のアンカー要素を作成する。この要素は、SWFFocus によってフォーカスを Flash コンテンツから HTML ページに戻すために使用される。または、開発者自身が、既存のフォーカス可能な HTML 要素を Flash コンテンツの前後のタブストップとして指定することもできる。</p></item><item><p>Flash コンテンツのオブジェクトのイベントハンドラを設定する。これによって、Flash コンテンツのオブジェクトがフォーカスを受け取った際に SWFFocus クラスに通知され、Flash コンテンツ内部のタブ順序を管理できるようにする。</p></item></ulist></item><item><p>SWFFocus クラスは Flash コンテンツ内のフォーカスの変更を監視する。コンテンツ内でフォーカスのラップが検出されたら JavaScript の関数が呼び出され、これによって隣接する HTML コンテンツにフォーカスが戻される。</p></item></ulist><p>上記で示したように、このテクニックの使用方法は二通りある。</p><olist><item><p>HTML のタブ順序内で各 Flash コンテンツに隣接するフォーカス可能な要素を、SWFFocus クラスに生成させる（下記の事例 1 で示す）。</p><p>デフォルトでは、SWFFocus クラスは埋め込まれた Flash コンテンツの前後に非表示のリンク要素を作成する。これらの要素は、Flash コンテンツの外部にタブ移動（または shift キーを押しながらタブ移動）する際に、フォーカスを移動するための「アンカー」として必要になる。この手法は、開発者による追加作業が必要ないため実装が最も簡単である。この手法の欠点は、非表示のリンクという意味のない要素が HTML のタブ順序の中に紛れ込むことである（これらの要素は、Flash コンテンツの外部にタブ移動する際のタブストップのみとして使用される。Flash コンテンツの内部にタブ移動する場合には使用されない）。以上の点から、この手法ではなく次の 2. の手法を使用することが推奨される。</p></item><item><p>HTML のタブ順序内における各 Flash コンテンツの前後のフォーカス可能な HTML 要素を明示的に指定する（下記の事例 2 で示す）。</p><p>この手法では、開発者は ID 値を使用することによって、HTML のタブ順序内で Flash コンテンツの前後に当たる要素を指定できる。これは、Flash コンテンツの &lt;object&gt; 要素に特別なクラス名を設定することによって実現される。タブ順序内に不必要な要素が入り込むことがないため、この手法を用いることがより好ましい。ただし、開発者自身がこの点を意識して追加作業を行う必要がある（ID 値を手動で設定する必要がある）。また、状況によっては、Flash コンテンツの前後にフォーカス可能な要素が存在しない場合もありうる。</p></item></olist></description><examples><eg-group><head>自動生成されるリンクを使用する</head><description><p>この事例では、フォーカス可能な HTML 要素を明示的に指定することなく、SWFFocus クラスを使用している。SWFFocus によって、Flash コンテンツの前後に非表示のリンクが動的に挿入される。</p><exsubhead>Flash コンテンツをロードする</exsubhead><p>この事例では、Flash オブジェクトは <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://code.google.com/p/swfobject/wiki/documentation#How_to_embed_Flash_Player_content_using_SWFObject_static_publish">SWFObject による動的なパブリッシュ手法（英語）</loc>によって追加されている。この手法では、JavaScript （ブラウザによってサポートされる方法）により動的に object タグが生成される。これは推奨される手法ではあるが、この実装方法を使用することは必須ではない。なお、HTML ドキュメント内に object タグがハードコーディングされている場合であっても SWFFocus クラスは動作する。</p><p>以下のサンプルコードは、SWFObject を使用して動的にコンテンツをロードする方法を示している。</p><exsubhead>事例 1 の HTML および Javascript のサンプルコード</exsubhead></description><code/><description><exsubhead>Flash 内に SWFFocus クラスをインポートし初期化する</exsubhead><p>Flash プロジェクトのソースパスに SWFFocus クラスを追加する必要がある。これを行うための最も簡単な方法は、com/swffocus/SWFFocus.as ファイル（ネストしたディレクトリ構造も含む）をプロジェクトのルートディレクトリにコピーすることである。</p><p>コンテンツのソースパスに SWFFocus クラスを追加したら、以下のコードによってこのクラスを初期化する必要がある。</p></description><code/><description><p>このクラス自身のコードはソースファイル内にある。</p></description></eg-group><eg-group><head>既存のフォーカス可能な HTML の要素を明示的に指定する</head><description><p>この実装方法の大部分は事例 1 と同じである。</p><ulist><item><p>SWFObject による動的ロードの手法を使用して Flash コンテンツをロードする。</p></item><item><p>コンテンツのソースパスに SWFFocus クラスを追加し、Flash コンテンツ内で初期化する必要がある。</p></item></ulist><p>これらの手順の詳細については、事例 1 を参照のこと。</p><p>しかし、このケースでは、Flash コンテンツのオブジェクトに特別なクラス名が追加される。これらのクラス名は、HTML のタブ順序においてコンテンツの前後に置かれる要素の ID 値を示す。このクラス名は以下のようになる。</p><ulist><item><p>'swfPref-&lt;previous ID&gt;'。この '&lt;previous element&gt;' にはタブ順序における前の要素の ID 値が設定される。</p></item><item><p>'swfNext-&lt;next ID&gt;'。この '&lt;next element&gt;' にはタブ順序における次の要素の ID 値が設定される。</p></item></ulist><p>以下に HTML コードの例を示す（object タグに追加されたクラス名に注目）。</p></description><code><![CDATA[<a href="http://www.lipsum.com/" id="focus1">test 1</a>

<object class="swfPrev-focus1 swfNext-focus2"
  data="keyboard_trap_fix_as3.swf" tabindex="0"
  type="application/x-shockwave-flash"/>
<a href="http://www.lipsum.com/" id="focus2">test 2</a>]]></code><description><p>この事例では SWFObject の動的ロードが使用されているため、このクラス名は SWFObject の初期化時に属性として指定される必要がある。次のコード例はこの処理を示したものである。</p><exsubhead>事例 2 の HTML および Javascript のサンプルコード</exsubhead></description><code><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
  <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" 
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
<head>
　  <title>Keyboard Trap Fix Example </title>
  　<meta content="text/html; charset=utf-8" http-equiv="Content-Type"/>
  　<script src="swfobject_2_1.js" type="text/javascript"/>
 　 <script type="text/javascript">
      var flashvars = {};
      var params = {};
      params.scale = "noscale";
      var attributes = {};
      attributes.id = "FlashSample2SWF";
      attributes.name = "FlashSample2SWF";
      attributes["class"] = "swfPrev-focus1 swfNext-focus2";
      swfobject.embedSWF("keyboard_trap_fix_as3.swf", "flashSample1", "150", 
      "200", "9.0.0", "expressInstall.swf", flashvars, params, attributes);
   </script>
</head>
<body>
   <a href="http://www.lipsum.com/" id="focus1">lorem</a>
   <p>The following Flash content uses existing links in the document
   to move focus to when (shift) tabbing out of the Flash content.
   The existing links are defined by placing special classnames on
   the Flash object.</p>
<div id="flashSample2">
   <a href="http://www.adobe.com/go/getflashplayer">
   <img alt="Get Adobe Flash player"
   src="http://www.adobe.com/images/shared/download_buttons/get_flash_player.gif"/>
   </a>
</div>
   <a href="http://www.lipsum.com/">lorem</a>
</body>
</html>]]></code><description><p>注記： この事例では、Flash コンテンツの挿入で SWFObject が呼び出される時点で、フォーカス可能な HTML 要素が既に存在し、ID 値が設定されているものと想定している。ただし、Flash コンテンツが作成される時点ではまだこれらの要素が存在しないこともありうる。また、後になってこれらの要素が動的に削除されることもありうる。こうした状況であっても、前後のフォーカス可能な要素に ID 値の再割り当てを行うことで対応できる。これを行うには、Flash コンテンツのオブジェクト上で SWFsetFocusIds() メソッドを呼び出す。以下にその例を示す。</p></description><code><![CDATA[var o = document.getElementById("FlashSample1SWF");
o.SWFsetFocusIds('prevId', 'nextId');]]></code><description><p>以降は、Flash コンテンツの外部にタブ移動する際にフォーカスを移動するために、更新された ID が使用される。</p></description></eg-group></examples><resources><see-also><ulist><item><p>
            <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="working-examples/FLASH17/keyboard_trap_fix_custom_as3.zip">Example source containing the SWFFocus class</loc>
          </p></item><item><p><loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.iheni.com/flash-and-keyboard-access-across-browsers/">Flash and keyboard access across browsers</loc>by Henny Swan</p></item></ulist></see-also></resources><related-techniques/><tests><procedure><p>ウェブページ上の Flash コンテンツについて：</p><olist><item><p>可能であれば、Flash コンテンツのソースが SWFFocus クラスをインポートし、初期化している。</p></item><item><p>Tab キーを押してページ上のタブ移動可能なアイテム間を移動する。</p></item><item><p>Flash コンテンツの内部にタブ移動できる。</p></item><item><p>さらに Tab キーを押し、Flash コンテンツの外部にタブ移動できる。</p></item></olist></procedure><expected-results><ulist><item><p>3. および 4. を満たしている。</p></item></ulist></expected-results></tests><translationcredit><ulist><item>原文：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/FLASH17.html">FLASH17: Providing keyboard access to a Flash object and avoiding a keyboard trap（英語）</loc></item><item>日本語訳監修：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.infoaxia.co.jp/">植木 真（株式会社インフォアクシア）</loc></item><item>日本語訳：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.adobe.com/jp/accessibility/">アドビ システムズ 株式会社</loc></item></ulist></translationcredit></technique><technique id="FLASH18"><short-name>Flash で自動的に再生される音声をオフにするコントロールを提供する</short-name><applicability><ulist><item><p>Adobe Flash Professional バージョン MX 以降</p></item><item><p>Adobe Flex</p></item></ulist></applicability><applies-to><success-criterion idref="visual-audio-contrast-dis-audio"/></applies-to><ua-issues><ua-issue><p>ユーザーエージェントによるサポートに関する全般的な情報は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="flash.html#flash_ua_support">Flashのユーザーエージェントによるサポート</loc>を参照のこと。</p></ua-issue></ua-issues><description><p>この実装方法の目的は、Flash ムービーの読み込み時に自動的に開始される音声を、利用者がオフにできるようにすることである。音声をオフにするコントロールは、利用者が素早く簡単に見つけられるようにページの先頭近くに置く必要がある。これは、スクリーンリーダー、画面拡大ソフト、スイッチメカニズムなどの支援技術を利用するユーザーにも利用しないユーザー（認知障害、学習障害、言語障害のあるユーザー）にも役立つ。</p><p>この実装方法では、自動的に再生される音声を利用者がオフにできるようにするコントロールをコンテンツ制作者が実装する。アクセシビリティを最大化するためには、 Flash ムービーではなく HTML 文書にコントロールを追加する。HTML コントロールは、ExternalInterface クラスを通じて Flash ムービーと通信する。つまり、ユーザーは Flash コンテンツを操作しなくても、音声の再生を制御できるということである。実際のコンテンツでこの方法が適していない場合は、Flash コンテンツの内部にコントロールを配置することができる。その場合、このコントロールはキーボードで操作できるようにし、またタブ順序と読み上げ順序の最初に配置し、再生中の音声をオフにできることを明確に示すラベルを付ける。</p></description><examples><eg-group><head>Flash 内に音声を停止するボタンを提供する</head><description><p>この事例は、利用者が音声の再生を停止できるように Flash ムービーの内部にボタンを実装する方法を示している。ムービーがロードされると自動的に mp3 ファイルの再生を開始する、SoundHandler というクラスが作成される。</p></description><code><![CDATA[package wcagSamples {
  import flash.display.Sprite;
  import flash.net.URLRequest;
  import flash.media.Sound;
  import flash.media.SoundChannel;
  
  import fl.controls.Button;
  import fl.accessibility.ButtonAccImpl;
  
  import flash.events.MouseEvent;
  public class SoundHandler extends Sprite {
    private var snd: Sound = new Sound();
    private var button: Button = new Button();
    private var req: URLRequest = new URLRequest("http://av.adobe.com/podcast\
      /csbu_dev_podcast_epi_2.mp3");
    private var channel: SoundChannel = new SoundChannel();
    
    public function SoundHandler() {
      ButtonAccImpl.enableAccessibility();
      button.label = "Stop Sound";
      button.x = 10;
      button.y = 10;
      button.addEventListener(MouseEvent.CLICK, clickHandler);
      this.addChild(button);
      snd.load(req);
      channel = snd.play();
    }
    private function clickHandler(e: MouseEvent): void {
      if (button.label == "Stop Sound") {
        button.label = "Start Sound";
        channel.stop();
      } else {
        channel = snd.play();
        button.label = "Stop Sound";
      }
    }
  }
}]]></code><description><p>この実例は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/working-examples/FLASH18/control_to_toggle_audio_as3.html">「Flash 内に音声を停止するボタンを提供する」のサンプル（英語）</loc>で確認できる。また、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/working-examples/FLASH18/control_to_toggle_audio_as3.swf">「Flash 内に音声を停止するボタンを提供する」のソース（英語）</loc>をダウンロードすることもできる。</p></description></eg-group><eg-group><head>Flash オブジェクトの前に音声を停止するボタンを提供する</head><description><p>ムービーがロードされると自動的に mp3 ファイルの再生を開始する、SoundHandler というクラスが作成される。HTML のボタンは、Flash ムービーを含む HTML 文書に配置される。このボタンをクリックすると、Flash Player JavaScript API を通じて HTML ページと Flash ムービーの間でアクションが通知され、その結果として SoundHandler クラスの toggleSound メソッドが呼び出される。</p><exsubhead>事例 2 の ActionScript 3.0 のコード</exsubhead></description><code><![CDATA[package wcagSamples {
  import flash.display.Sprite;
  import flash.external.ExternalInterface;
  import flash.net.URLRequest;
  import flash.media.Sound;
  import flash.media.SoundChannel;
  
  import flash.events.MouseEvent;
  public class SoundHandler extends Sprite {
    private var snd: Sound = new Sound();
    private var soundOn: Boolean = true;
    private var req: URLRequest = new URLRequest("http://av.adobe.com/podcast/\
      csbu_dev_podcast_epi_2.mp3");
    private var channel: SoundChannel = new SoundChannel();
    
    public function SoundHandler() {
      if (ExternalInterface.available)
      ExternalInterface.addCallback("toggleSound", this.toggleSound);
      snd.load(req);
      channel = snd.play();
    }
    
    private function toggleSound(enable: Boolean): void {
      if (! enable) {
        channel.stop();
        soundOn = true;
      } else {
        channel = snd.play();
        soundOn = true
      }
    }
  }
}]]></code><description><exsubhead>事例 2 の HTML コード</exsubhead></description><code><![CDATA[<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" 
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta content="text/html; charset=UTF-8" http-equiv="Content-Type"/>
    <title>Flash Sound Toggle example</title>
    <script src="swfobject.js" type="text/javascript"/>

    <script type="text/javascript">
    function $(id) {
        return document.getElementById(id);
    }
    
    swfobject.embedSWF("html_control_to_toggle_audio_as3.swf", 
      "flashPlaceHolder", "0", "0", "8");
    function init() {
            var soundOn = true;
            $("soundToggle").onclick = function(event){
                soundOn = !soundOn;
                $("flashPlaceHolder").toggleSound(soundOn);
                event.target.value = soundOn ? "Stop Sound" : "Start Sound";
            };
    }
    window.onload = init;
</script>

  </head>
  <body id="header">
    <h1>Flash Automatic Sound Demo</h1>

    <p>This page contains a Flash movie that automatically starts
      playing sound. Use the button below to stop or start the
      sound</p>
    <input id="soundToggle" type="button" value="Stop Sound"/>
    <p id="flashPlaceHolder">Flash needs to be installed for this
      example to work</p>
  </body>
</html>]]></code><description><p>この実例は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/working-examples/FLASH18/html_control_to_toggle_audio_as3.html">「Flash オブジェクトの前に音声を停止するボタンを提供する」のサンプル（英語）</loc>で確認できる。また、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/working-examples/FLASH18/html_control_to_toggle_audio_as3.zip">「Flash オブジェクトの前に音声を停止するボタンを提供する」のソース（英語）</loc>をダウンロードすることもできる。</p></description></eg-group></examples><resources/><related-techniques><relatedtech idref="G170"/></related-techniques><tests><procedure><p>ロード後に自動的に音声の再生を開始する Flash ムービーについて：</p><olist><item><p>ドキュメントのタブ順序の先頭にアクセシブルな HTML コントロールが配置されている。</p></item><item><p>HTML ベースのコントロールがない場合は、Flash ムービーのタブ順序の先頭にアクセシブルなコントロールが配置されている。</p></item><item><p>HTML コントロールまたは Flash ベースのコントロールを操作する。</p></item><item><p>音声の再生が停止される。</p></item></olist></procedure><expected-results><ulist><item><p>1. または 2. を満たしていて、かつ 4. を満たしている。</p></item></ulist></expected-results></tests><translationcredit><ulist><item>原文：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/FLASH18.html">FLASH18: Providing a control to turn off sounds that play automatically in Flash（英語）</loc></item><item>日本語訳監修：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.infoaxia.co.jp/">植木 真（株式会社インフォアクシア）</loc></item><item>日本語訳：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.adobe.com/jp/accessibility/">アドビ システムズ 株式会社</loc></item></ulist></translationcredit></technique><technique id="FLASH19"><short-name>スクリプトを用いて、ユーザーに制限時間が間もなく終了することを警告し、制限時間を延長する方法を提供する</short-name><applicability><ulist><item><p>Adobe Flash Professional バージョン MX 以降</p></item><item><p>Adobe Flex</p></item></ulist></applicability><applies-to><success-criterion idref="time-limits-required-behaviors"/></applies-to><ua-issues><ua-issue><p>ユーザーエージェントによるサポートに関する全般的な情報は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="flash.html#flash_ua_support">Flashのユーザーエージェントによるサポート</loc>を参照のこと。</p></ua-issue></ua-issues><description><p>この実装方法の目的は、ユーザーにインタラクションを完了させるための時間が終了することを通知することである。スクリプトで制限時間のある機能を提供している場合、スクリプトを用いて、ユーザーに制限時間が間もなく終了することを警告し、制限時間の延長を要求できるメカニズムを提供することが可能である。少なくとも制限時間の 20 秒前に、制限時間が間もなく終了することを通知して時間の延長が必要かどうかを利用者に確認する確認ダイアログをスクリプトにより提供する。利用者が「はい」と回答した場合は、制限時間をリセットする。利用者が「いいえ」と回答した場合、または応答がない場合は、制限時間の終了が認められる。</p><p>この実装方法では、setTimeout() メソッドで制限時間を設定する。例えば、制限時間を 60 秒にする場合、40 秒の制限時間を設定し（目的のタイムアウトよりも 20 秒前）、確認ダイアログを表示するという方法がある。この確認ダイアログで、残りの 20 秒間のタイムアウトを新たに設定する。利用者がより長い時間を必要としている場合は、新しいタイムアウトを設定する。ただし、20 秒間の「制限時間の猶予期間」が終了すると（つまり 60 秒が経過すると）、元々の設計で 60 秒の制限時間が終了するときに想定されている動作が実行される。</p></description><examples><eg-group><head>ActionScript を使用してタイムアウトに到達する前に制限時間の延長機能を提供する</head><description><p>これは、ユーザーにより延長可能な制限時間の AS2 の基本例である。40 秒間操作しない場合は警告が表示され、セッションが間もなく終了すると警告される。ユーザーは、所定の 20 秒で、スペースバーを押すか、「はい」ボタンを押下する。40 秒という長さは、ほとんどのタスクで不十分であり、デモを簡単に行うために意図的に短くしていることに留意すること。</p></description><code><![CDATA[import mx.controls.Alert;
import flash.accessibility.Accessibility;

mx.accessibility.AlertAccImpl.enableAccessibility();

var sessionTimeout;
var sessionNotificationTimeout;
var timeLimit: Number = 60000;
var sessionAlert: Alert;
resetTimeout();

testField.addEventListener("change", resetTimeout);

function resetTimeout() {
  clearTimeout(sessionTimeout);
  clearTimeout(sessionNotificationTimeout);
  sessionTimeout = setTimeout(endSession, timeLimit);
  sessionNotificationTimeout = setTimeout(showTimeoutAlert, timeLimit - 20000);
}

function showTimeoutAlert() {
  sessionAlert = Alert.show("Click the YES button to extend your session",
  "Your login session is about to expire, do you need more time?",
  Alert.YES | Alert.NO, null, handleAlertClick);
}

function endSession() {
  sessionAlert.deletePopUp();
  Alert.show("please log in again",
  "Your session has expired");
}

function handleAlertClick(e) {
  if (e && e.detail && e.detail == Alert.YES)
  resetTimeout();
}]]></code><description><p>この実例は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG-TECHS/working-examples/FLASH19/timeout_extension_as2.html">「ActionScript を使用してタイムアウトに到達する前に制限時間の延長機能を提供する」のサンプル（英語）</loc>で確認できる。また、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="working-examples/FLASH19/timeout_extension_as2.swf">「ActionScript を使用してタイムアウトに到達する前に制限時間の延長機能を提供する」のソース（英語）</loc>をダウンロードすることもできる。
For a demonstration, see a <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG-TECHS/working-examples/FLASH19/timeout_extension_as2.html">working example of Using ActionScript to offer a time limit extension before the timeout expires</loc>. The <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="working-examples/FLASH19/timeout_extension_as2.swf">source of Using ActionScript to offer a time limit extension before the timeout expires</loc> is available.</p></description></eg-group></examples><resources/><related-techniques><relatedtech idref="SCR16"/></related-techniques><tests><procedure><olist><item><p>ページをロードし、制限時間の 20 秒前まで待つ。</p></item><item><p>制限時間の 20 秒前になったとき、制限時間が間もなく終了することを警告する確認ダイアログが表示され、利用者が 20 秒以内に制限時間を延長できる。</p></item></olist></procedure><expected-results><p>2. を満たしている。</p></expected-results></tests><translationcredit><ulist><item>原文：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/FLASH19.html">FLASH19: Providing a script that warns the user a time limit is about to expire and provides a way to extend it（英語）</loc></item><item>日本語訳監修：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.infoaxia.co.jp/">植木 真（株式会社インフォアクシア）</loc></item><item>日本語訳：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.adobe.com/jp/accessibility/">アドビ システムズ 株式会社</loc></item></ulist></translationcredit></technique><technique id="FLASH20"><short-name>フォーカス表示を視覚的により認識しやすくするために Flash コンポーネントのスキンを切り替える</short-name><applicability><ulist><item><p>Adobe Flash Professional バージョン MX 以降</p></item><item><p>Adobe Flex</p></item></ulist></applicability><applies-to><success-criterion idref="navigation-mechanisms-focus-visible"/></applies-to><ua-issues><ua-issue><p>ユーザーエージェントによるサポートに関する全般的な情報は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="flash.html#flash_ua_support">Flashのユーザーエージェントによるサポート</loc>を参照のこと。</p></ua-issue></ua-issues><description><p>この実装方法の目的は、コンテンツ制作者が ActionScript やコンポーネントのスキンを使用して、コンポーネントにフォーカスがあるときに視覚的な強調表示を行えるようにすることである。このテクニックでは、コンポーネントの背景色と境界線の両方を変更する。コンポーネントがフォーカスを失ったら、通常のスタイルに戻る。</p><p>視覚的な強調表示は、コンポーネントのスキンの一部を切り替えることによって行う。標準の Flash コンポーネントは、それぞれコンポーネントの外観を構成する独自のスキンのセットを持っている。各部分はムービークリップによって表現される。このムービークリップを編集するか、または置き換えることによって、コンポーネントの外観をカスタマイズすることができる。このテクニックに最も適したスキンは focusRectSkin スキンであり、これはすべてのコンポーネント間で共有される。このスキンのデフォルトでは、コンポーネントがフォーカスを受け取ると、わずかに視覚的な強調表示が行われる。</p><p>この実装方法は、次の手順で行うことができる。</p><olist><item><p>focusRectSkin のカスタマイズバージョンを作成する。</p></item><item><p>スクリプトを使用して、カスタマイズしたスキンにコンポーネントを関連付ける。</p></item></olist><p>スキンをカスタマイズするには次の 2 つの方法がある。</p><olist><item><p>既存のスキンを複製する</p><p>この方法では、既存の focusRect スキンのコピーを作成して、それを変更する。このスキンは、コンポーネントの各インスタンスに手動で適用する必要がある（下記の手順 5）。</p><olist><item><p>スタイルを適用するコンポーネントをステージにドラッグする。この操作により、スキンに関連付けられた適切なコンポーネントがムービーのライブラリに追加される。</p></item><item><p>「ライブラリ」パネルを開き、Component Assets フォルダー &gt; Shared フォルダーの順に移動する。</p></item><item><p>focusRectSkin ムービークリップを右クリック（Mac では Ctrl キーを押しながらクリック）し、コンテキストメニューから「複製」を選択する。</p></item><item><p>スキンのムービークリップの境界線の外観を編集する。例えば、より目立つようにフォーカス矩形の境界線を太くする（この手順は、以下のスクリーンショットで示されている）。&#xD;
</p></item><item><p>ActionScript を使用して、フォームコンポーネントのインスタンスを focusRectSkin のカスタマイズバージョンに関連付ける。これは、setStyle メソッドを使用して実現できる。</p></item></olist><p><img xmlns:xlink="http://www.w3.org/1999/xlink" class="eximg" src="http://www.w3.org/TR/WCAG20-TECHS/working-examples/FLASH20/editing_focusrect.png" alt="画面スクリーンショット：複製した focusRectSkin ムービークリップの編集"/></p></item><item><p>既存のスキンを変更する</p><p>この方法では、元の focusRect スキンを変更する。つまり、この変更はフォーカス可能なすべてのコンポーネントのフォーカス視覚表示に適用される。</p><olist><item><p>スタイルを適用するコンポーネントをステージにドラッグする。この操作により、スキンに関連付けられた適切なコンポーネントがムービーのライブラリに追加される。</p></item><item><p>「ライブラリ」パネルを開き、Component Assets フォルダー &gt; Shared フォルダーの順に移動する。</p></item><item><p>focusRectSkin ムービークリップをダブルクリックして、編集用として開く。</p></item><item><p>スキンのムービークリップの境界線の外観を編集する。例えば、より目立つようにフォーカス矩形の境界線を太くする。</p></item></olist><note><p class="prefix">この方法では、既存のスキンが上書きされることになる。上書きしたくない場合は、この方法ではなく「1. 既存のスキンを複製する」方法を用いること。</p></note></item></olist><p>focusRect スキンは、フォーカス可能なすべての Flash コンポーネントに適用される。他の強調表示（例えばコンポーネントの上にマウスを移動させた際に適用される強調表示など）を変更する場合は、各コンポーネントのスキンを個別に編集する必要がある。例えば、チェックボックスコンポーネントのマウスオーバーの強調表示を編集するには、 Checkbox_overIcon と Checkbox_selectedOverIcon の両方を変更するか、または複製する必要がある。同様に、ボタンコンポーネントのマウスオーバーの強調表示を編集するには、Button_over スキンを変更する必要がある。</p><p>また、特定のイベント（フォーカス、マウスオーバーなど）では、既存のスキンが自動的に適用されることを念頭に置く必要がある。ただし、開発者が選ぶタイミングでスキンを手動で切り替えることも可能である（例えば、テキストフィールドに無効なコンテンツが入力されていることを示す場合など）。これを行うには、setStyle メソッドを呼び出す。</p></description><examples><eg-group><head>フォーカスを太い青の境界線で表示する</head><description><p>次のコードは、フォームコンポーネントのインスタンスを、focusRectSkin ムービークリップの変更されたバージョンに関連付ける例を示している。この結果として、コンポーネントには Flash が提供するデフォルトの細い境界線ではなく、太い青の境界線が表示されるようになる。このコードは、Focus_custom という名前の変更されたスキンを参照しており、このスキンは事前にムービーのライブラリに追加されている。</p><p>focusRectSkin のこのカスタムバージョンでは、視覚的な強調表示をさらに高めるため、透過性のある黄色の背景も設定している。ボタンやチェックボックスなどのコンポーネントではこの背景が表示されるが、TextInput コンポーネントでは表示されない。TextInput のインスタンスにもこの黄色の背景が適用されるようにするには、次の手法を利用する。</p><olist><item><p>TextInput の「normal」スキン（これはライブラリの「Component Asssets &gt; TextInputSkins &gt; TextInput_upSkin」にある）の複製バージョンを作成し、黄色の背景を表示するように編集する。</p></item><item><p>TextInput のインスタンスには FocusIn、FocusOut、MouseOver、MouseOut のハンドラが割り当てられており、これを利用して、コンポーネントにフォーカスがある間、またはコンポーネント上にマウスが置かれている間、デフォルトの「normal」スキンをカスタムの「normal」スキンに一時的に切り替えることができる。</p></item></olist><p>また、button_over スキンを複製して変更することによって、ボタンコンポーネントインスタンスのデフォルトのマウスオーバーの強調表示を変更する。 checkbox_overIcon スキン、および checkbox_selectedOverIcon スキンは直接変更する。これにより、チェックボックスのすべてのインスタンスに対してこの変更が適用されることになる。</p><p>この実例は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG-TECHS/working-examples/FLASH20/change_styles_on_focus_as3.html">「フォーカスを太い青の境界線で表示する」のサンプル（英語）</loc>で確認できる。</p><exsubhead>事例 1 のコード（ActionScript 3.0）</exsubhead></description><code><![CDATA[package wcagSamples {
  import fl.accessibility.ButtonAccImpl;
  import fl.accessibility.CheckBoxAccImpl;
  import fl.controls.CheckBox;
  import fl.controls.Button;
  import fl.controls.Label;
  import fl.controls.TextInput;
  import flash.display.Sprite;
  import flash.events.FocusEvent;
  import flash.events.MouseEvent;
  
  public class FocusStyler extends Sprite {
    public function FocusStyler() {
      ButtonAccImpl.enableAccessibility()
      CheckBoxAccImpl.enableAccessibility()
      
      var lbl1: Label = new Label();
      lbl1.text = "name";
      lbl1.x = lbl1.y = 20;
      addChild(lbl1);
      
      var txt1: TextInput = new TextInput();
      txt1.x = 60;
      txt1.y = 20;
      txt1.width = 200;
      txt1.addEventListener(FocusEvent.FOCUS_IN, handleFocusIn);
      txt1.addEventListener(FocusEvent.FOCUS_OUT, handleFocusOut);
      txt1.addEventListener(MouseEvent.MOUSE_OVER, handleFocusIn);
      txt1.addEventListener(MouseEvent.MOUSE_OUT, handleFocusOut);
      txt1.setStyle("focusRectSkin", "focus_custom");
      addChild(txt1);
      
      var chk1: CheckBox = new CheckBox();
      chk1.label = "Check Me";
      chk1.x = 60;
      chk1.y = 70;
      chk1.setStyle("focusRectSkin", "focus_custom");
      addChild(chk1);
      
      var btn1: Button = new Button();
      btn1.label = "Click Me";
      btn1.x = 60;
      btn1.y = 110;
      btn1.setStyle("focusRectSkin", "focus_custom");
      btn1.setStyle("overSkin", "Button_over_custom");
      addChild(btn1);
    }
    
    private function handleFocusIn(event) {
      event.currentTarget.setStyle("upSkin", "TextInput_upSkin_custom");
    }
    
    private function handleFocusOut(event) {
      event.currentTarget.setStyle("upSkin", "TextInput_upSkin");
    }
  }
}]]></code><description><p>この実例は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG-TECHS/working-examples/FLASH20/change_styles_on_focus_as3.html">「フォーカスを太い青の境界線で表示する」のサンプル（英語）</loc>で確認できる。また、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG-TECHS/working-examples/FLASH20/change_styles_on_focus_as3.zip">「フォーカスを太い青の境界線で表示する」のソース（英語）</loc>をダウンロードすることもできる。</p></description></eg-group></examples><resources><see-also><ulist><item><p>
            <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.adobe.com/devnet/flash/articles/creating_as3_components_pt5.html">Creating ActionScript 3.0 components in Flash – Part 5:   Styles and skins</loc>
          </p></item></ulist></see-also></resources><related-techniques><relatedtech idref="SCR31"/></related-techniques><tests><procedure><p>Flash ムービーにフォーカス可能なコンポーネントが含まれている場合は、次のことを確認する。</p><olist><item><p>視覚的な強調表示が、コンポーネントのスキンを変更することによって適用されている。</p></item><item><p>コンポーネントがフォーカスを受け取ると、視覚的な強調された表示になる。</p></item></olist></procedure><expected-results><ulist><item><p>1. および 2. を満たしている。</p></item></ulist></expected-results></tests><translationcredit><ulist><item>原文：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/FLASH20.html">FLASH20: Reskinning Flash components to provide highly visible focus indication（英語）</loc></item><item>日本語訳監修：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.infoaxia.co.jp/">植木 真（株式会社インフォアクシア）</loc></item><item>日本語訳：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.adobe.com/jp/accessibility/">アドビ システムズ 株式会社</loc></item></ulist></translationcredit></technique><technique id="FLASH21"><short-name>DataGrid コンポーネントを使用して列見出しとデータセルを関連付ける</short-name><applicability><ulist><item><p>Adobe Flash Professional バージョン MX 以降</p></item><item><p>Adobe Flex</p></item></ulist></applicability><applies-to><success-criterion idref="content-structure-separation-programmatic"/></applies-to><ua-issues><ua-issue><p>ユーザーエージェントによるサポートに関する全般的な情報は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="flash.html#flash_ua_support">Flashのユーザーエージェントによるサポート</loc>を参照のこと。</p></ua-issue></ua-issues><description><p>この実装方法の目的は、データテーブルで視覚的に示されている情報とそれらの関連性を、プログラムが解釈できるようにすることである。具体的には、テーブルの列見出しとそれに対応するデータセルの関連性を支援技術が解釈できるようにする必要がある。Flash では、この実現方法として DataGrid コンポーネントを使用できる。DataGrid コンポーネントでアクセシビリティを有効にした場合、Flash はグリッドの行のアクセシブルな名前を支援技術に渡す際に、各セルの値の前に自動的に列名を付加する。例えば、次のスクリーンショットの行は、スクリーンリーダーによって「13行中の6行目 Name Patty Crawford Bats L Throws L Year Jr Home Whittier, CA」と読み上げられる。</p><note><p class="prefix">Flash の DataGrid コンポーネントは列見出しのみをサポートし、行見出しはサポートしていない。</p></note><p>
      <img xmlns:xlink="http://www.w3.org/1999/xlink" class="eximg" src="http://www.w3.org/TR/WCAG20-TECHS/working-examples/FLASH21/highlighted_row_in_flash_datagrid.png" alt="画面スクリーンショット：6行目が強調表示されたDataGrid コンポーネント" height="283" width="424"/>
    </p></description><examples><eg-group><head>統計データのテーブル</head><description><p>この事例では、DataGrid コンポーネントを動的に作成し、そのデータプロバイダとして静的なデータが使用されている。import fl.accessibility.DataGridAccImpl; DataGridAccImpl.enableAccessibility(); は、Datagrid コンポーネントのアクセシビリティを有効にするために必要な行である。</p></description><code><![CDATA[import fl.accessibility.DataGridAccImpl;
DataGridAccImpl.enableAccessibility();

import fl.data.DataProvider;
bldRosterGrid(aDg);
var aRoster: Array = new Array();
aRoster = [ {
  Name: "Wilma Carter", Bats: "R", Throws: "R", Year: "So", Home: "Redlands, CA"}, {
  Name: "Sue Pennypacker", Bats: "L", Throws: "R", Year: "Fr", Home: "Athens, GA"}, {
  Name: "Jill Smithfield", Bats: "R", Throws: "L", Year: "Sr", Home: "Spokane, WA"}, {
  Name: "Shirley Goth", Bats: "R", Throws: "R", Year: "Sr", Home: "Carson, NV"}, {
  Name: "Jennifer Dunbar", Bats: "R", Throws: "R", Year: "Fr", Home: "Seaside, CA"}, {
  Name: "Patty Crawford", Bats: "L", Throws: "L", Year: "Jr", Home: "Whittier, CA"}, {
  Name: "Angelina Davis", Bats: "R", Throws: "R", Year: "So", Home: "Odessa, TX"}, {
  Name: "Maria Santiago", Bats: "L", Throws: "L", Year: "Sr", Home: "Tacoma, WA"}, {
  Name: "Debbie Ferguson", Bats: "R", Throws: "R", Year: "Jr", Home: "Bend, OR"}, {
  Name: "Karen Bronson", Bats: "R", Throws: "R", Year: "Sr", Home: "Billings, MO"}, {
  Name: "Sylvia Munson", Bats: "R", Throws: "R", Year: "Jr", Home: "Pasadena, CA"}, {
  Name: "Carla Gomez", Bats: "R", Throws: "L", Year: "Sr", Home: "Corona, CA"}, {
  Name: "Betty Kay", Bats: "R", Throws: "R", Year: "Fr", Home: "Palo Alto, CA"}
];
aDg.dataProvider = new DataProvider(aRoster);
aDg.rowCount = aDg.length;

function bldRosterGrid(dg: DataGrid) {
  dg.setSize(400, 300);
  dg.columns =[ "Name", "Bats", "Throws", "Year", "Home"];
  dg.columns[0].width = 120;
  dg.columns[1].width = 50;
  dg.columns[2].width = 50;
  dg.columns[3].width = 40;
  dg.columns[4].width = 120;
  dg.move(50, 50);
};]]></code><description><p>この実例は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG-TECHS/working-examples/FLASH21/using_datagrid_to_associate_headers_with_cells_as3.html">「統計データのテーブル」のサンプル（英語）</loc>で確認できる。また、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="working-examples/FLASH21/using_datagrid_to_associate_headers_with_cells_as3.swf">「統計データのテーブル」のソース</loc>をダウンロードすることもできる。</p></description></eg-group></examples><resources/><related-techniques/><tests><procedure><p>テーブル形式のデータを含む Flash コンテンツで以下を実行する。</p><olist><item><p>Internet Explorer 6 以降（Flash Player 6 以降を使用）、または Firefox 3 以降（Flash Player 9 以降を使用）で SFW ファイルを開く。</p></item><item><p>オブジェクトのアクセシビリティ名を表示できる aDesigner2 などのツールを使用して Flash ムービーを開く。</p></item><item><p>GUI 概要パネルでデータグリッドの行とセルのアクセシビリティ名を調べて、見出しデータとデータセルのデータがともに存在する。</p></item><item><p>コンテンツ制作者は、テストにスクリーンリーダーを使用することもできる。その場合は、Flash コンテンツを読み上げて音声を聞き、データグリッドが読み上げられる際に見出しとデータセルのデータが読み上げられる。</p></item><item><p>または、Flash オーサリングツールで、DataGrid コンポーネントを使用してデータが構造化されており、<code><![CDATA[DataGridAccImpl.enableAccessibility]]></code> メソッドによって DataGrid がアクセシブルになっている。</p></item></olist></procedure><expected-results><ulist><item><p>3., 4. または 5. を満たしている。</p></item></ulist></expected-results></tests><translationcredit><ulist><item>原文：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/FLASH21.html">FLASH21: Using the DataGrid component to associate column headers with cells（英語）</loc></item><item>日本語訳監修：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.infoaxia.co.jp/">植木 真（株式会社インフォアクシア）</loc></item><item>日本語訳：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.adobe.com/jp/accessibility/">アドビ システムズ 株式会社</loc></item></ulist></translationcredit></technique><technique id="FLASH22"><short-name>キーボードで操作可能なアクションを静的エレメントに追加する</short-name><applicability><ulist><item><p>Adobe Flash Professional バージョン MX 以降</p></item><item><p>Adobe Flex</p></item></ulist></applicability><applies-to><success-criterion idref="keyboard-operation-keyboard-operable"/><success-criterion idref="keyboard-operation-all-funcs"/></applies-to><ua-issues><ua-issue><p>ユーザーエージェントによるサポートに関する全般的な情報は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="flash.html#flash_ua_support">Flashのユーザーエージェントによるサポート</loc>を参照のこと。</p></ua-issue></ua-issues><description><p>この実装方法の目的は、デフォルトではキーボードで操作できない Flash ムービークリップをキーボードで操作可能にする方法を示すことである。この実装方法では、tabenabled プロパティを設定してエレメントをフォーカス可能にし、click ハンドラに加えて keydown ハンドラを提供してキーボードからアクションをトリガできるようにする。</p></description><examples><eg-group><head>ムービークリップをボタンとして使用する</head><description><p>この事例では、カスタムムービークリップをボタンとして使用する。キーボードでの操作を可能にするため、tabEnabled を使用してムービークリップをタブの順序に配置する。さらに、カスタムボタンがマウスクリックとスペースバーの打鍵の両方に反応するように、冗長なイベントハンドラを追加する。最後に、ムービークリップの AccessibilityProperties オブジェクトを使用して、カスタムボタンにアクセシブルな名前を付ける。これにより、支援技術でボタンのラベルを認識できるようになる。</p><p>この実例は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG-TECHS/working-examples/FLASH22/event_handlers_to_static_objects_as3.html">「ムービークリップをボタンとして使用する」のサンプル（英語）</loc>で確認できる。 <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG-TECHS/working-examples/FLASH22/event_handlers_to_static_objects_as3.swf">「ムービークリップをボタンとして使用する」のソース（英語）</loc>をダウンロードすることもできる。</p><note><p class="prefix">カスタムボタンはボタンではなくフォーカス可能なグラフィックとして認識されるので、汎用のムービークリップを使用することは一般的に推奨されない。代わりに、標準の Flash の Button コンポーネントを使用するか、「button」タイプの新規シンボルを作成することが望ましい。</p></note></description><code><![CDATA[import flash.accessibility. *
import flash.events.KeyboardEvent;
import flash.events.MouseEvent;
import flash.net.navigateToURL;
import flash.net.URLRequest;

testMC.tabEnabled = true;
updateAccName(testMC);
testMC.addEventListener(MouseEvent.CLICK, clickHandler, false);
testMC.addEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);

updateAccName(testMC);

function clickHandler(e) {
  testMC.labelText.text = "THANKS";
  updateAccName(testMC);
}

function keyDownHandler(e) {
  if (e.keyCode == 32)
  clickHandler(e);
}

function updateAccName(mc: MovieClip) {
  if (! mc.accessibilityProperties)
  mc.accessibilityProperties = new AccessibilityProperties();
  mc.accessibilityProperties.name = mc.labelText.text;
  Accessibility.updateProperties();
}]]></code></eg-group></examples><resources/><related-techniques><relatedtech idref="SCR29"/><relatedtech idref="FLASH17"/></related-techniques><tests><procedure><p>インタラクティブコントロールとして使用されるムービークリップの汎用インスタンスが Flash ムービーに含まれている場合は、次のことを確認する。</p><olist><item><p>ムービークリップインスタンスの tabEnabled プロパティが true に設定されている。</p></item><item><p>ムービークリップインスタンスにマウスとキーボードの両方のイベントに対応するイベントハンドラがある。</p></item></olist></procedure><expected-results><ulist><item><p>1. および 2. を満たしている。</p></item></ulist></expected-results></tests><translationcredit><ulist><item>原文：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/FLASH22.html">FLASH22: Adding keyboard-accessible actions to static elements（英語）</loc></item><item>日本語訳監修：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.infoaxia.co.jp/">植木 真（株式会社インフォアクシア）</loc></item><item>日本語訳：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.adobe.com/jp/accessibility/">アドビ システムズ 株式会社</loc></item></ulist></translationcredit></technique><technique id="FLASH23"><short-name>データグリッドに要約を追加する</short-name><applicability><ulist><item><p>Adobe Flash Professional バージョン MX 以降</p></item><item><p>Adobe Flex</p></item></ulist></applicability><applies-to><success-criterion idref="content-structure-separation-programmatic"/></applies-to><ua-issues><ua-issue><p>ユーザーエージェントによるサポートに関する全般的な情報は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="flash.html#flash_ua_support">Flashのユーザーエージェントによるサポート</loc>を参照のこと。</p></ua-issue></ua-issues><description><p>この実装方法の目的は、データグリッド内でデータがどのように提示されているかについて要約を提供したり、グリッド内での移動方法について簡単に説明したりすることである。</p><p>Flash は summary 属性を提供しないので、代わりにこの説明的なテキストがデータグリッドのアクセシブルな説明に追加される。このアプローチでは、スクリーンリーダーを使用する利用者が要約の情報を利用できるようになる。情報は視覚的に表示されない。</p><p>要約は、テーブルの構造が複雑な場合（例えば、行見出しまたは列見出しのセットが複数ある場合や、列または行のグループが複数ある場合）に役立つ。また、要約は、多くのデータ列またはデータ行を含む単純なデータテーブルでも役に立つ場合がある。</p></description><examples><eg-group><head>アクセシビリティパネルを使用してデータグリッドに一覧を追加する</head><description><p>ここでは、Flash Professional でコンポーネントパネルからステージに追加されるデータグリッドの例を示す。データグリッドの要約を提供するために、Flash のアクセシビリティパネルの「説明」フィールドを使用する。</p><olist><item><p>新しい Flash ファイル（.fla）を作成するか、既存のファイルを開いてデータグリッドを挿入する。</p></item><item><p>ウィンドウメニューから Flash のコンポーネントパネルを開く。</p></item><item><p>データグリッドコンポーネントをステージ上にドラッグし、目的の位置に配置する。</p></item><item><p>データグリッドコンポーネントを選択し、アクセシビリティパネルを使用して、データグリッドの要約を「説明」フィールドに追加する。</p></item></olist></description></eg-group><eg-group><head>ActionScript 3 を使用してデータグリッドに一覧を追加する</head><description><p>アクセシブルな説明として要約テキストが追加されたデータグリッドコンポーネントの、基本的な AS3 の例を示す。</p></description><code><![CDATA[import fl.accessibility.DataGridAccImpl;
import fl.controls.DataGrid;
import fl.controls.Label;
import fl.data.DataProvider;
import flash.accessibility.Accessibility;
import flash.accessibility.AccessibilityProperties;
import flash.system.Capabilities;

DataGridAccImpl.enableAccessibility();

createGrid();

//要約テキストをアクセシブルな「説明」として設定する
var accProps: AccessibilityProperties = new AccessibilityProperties();
accProps.description = "The first column shows the player's name," +
  "the second and third column shows the player's gaming statistics." +
  "the fourth column shows the player's year as FR (Freshman), JR (junior) or SO (Sophomore)." +
  "The fifth column shows the player's home city and state";
aDg.accessibilityProperties = accProps;
if (Capabilities.hasAccessibility)
Accessibility.updateProperties();

function createGrid() {
  
  //コンポーネントを作成して追加する
  var aDg: DataGrid = new DataGrid();
  addChild(aDg);
  aDg.move(50, 50);
  bldRosterGrid(aDg);
  
  var aRoster: Array = new Array();
  aRoster =[ {
    Name: "Wilma Carter", Bats: "R", Throws: "R", Year: "So", Home: "Redlands, CA"
  }, {
    Name: "Sue Pennypacker", Bats: "L", Throws: "R", Year: "Fr", Home: "Athens, GA"
  }, {
    Name: "Jill Smithfield", Bats: "R", Throws: "L", Year: "Sr", Home: "Spokane, WA"
  }, {
    Name: "Betty Kay", Bats: "R", Throws: "R", Year: "Fr", Home: "Palo Alto, CA"
  },];
  aDg.dataProvider = new DataProvider(aRoster);
  aDg.rowCount = aDg.length;
}

function bldRosterGrid(dg: DataGrid) {
  dg.setSize(400, 300);
  dg.columns =[ "Name", "Bats", "Throws", "Year", "Home"];
  dg.columns[0].width = 120;
  dg.columns[1].width = 50;
  dg.columns[2].width = 50;
  dg.columns[3].width = 40;
  dg.columns[4].width = 120;
};]]></code><description><p>この実例は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="working-examples/FLASH23/datagrid_with_summary_as3.html">「ActionScript 3 を使用してデータグリッドに一覧を追加する」のサンプル（英語）</loc>で確認できる。また、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="working-examples/FLASH23/datagrid_with_summary_as3.swf">「ActionScript 3 を使用してデータグリッドに一覧を追加する」のソース（英語）</loc>をダウンロードすることもできる。</p></description></eg-group></examples><resources/><related-techniques/><tests><procedure><p>Flash ムービーにデータグリッドコンポーネントが含まれている場合、対応するアクセシブルな説明プロパティを使用して、要約テキストが追加されている。</p></procedure><expected-results><p>上記チェックポイントを満たしている。</p></expected-results></tests><translationcredit><ulist><item>原文：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/FLASH23.html">FLASH23: Adding summary information to a DataGrid（英語）</loc></item><item>日本語訳監修：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.infoaxia.co.jp/">植木 真（株式会社インフォアクシア）</loc></item><item>日本語訳：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.adobe.com/jp/accessibility/">アドビ システムズ 株式会社</loc></item></ulist></translationcredit></technique><technique id="FLASH24"><short-name>利用者がデフォルトの制限時間を延長できるようにする</short-name><applicability><ulist><item><p>Adobe Flash Professional バージョン MX 以降</p></item><item><p>Adobe Flex</p></item></ulist></applicability><applies-to><success-criterion idref="time-limits-required-behaviors"/></applies-to><ua-issues><ua-issue><p>ユーザーエージェントによるサポートに関する全般的な情報は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="flash.html#flash_ua_support">Flashのユーザーエージェントによるサポート</loc>を参照のこと。</p></ua-issue></ua-issues><description><p>この実装方法の目的は、スクリプトでデフォルトの制限時間が設定されている場合に、制限時間を延長するメカニズムを提供して、利用者がデフォルトの制限時間を延長できるようにすることである。利用者が制限時間の延長を要求できるように、利用者が長い制限時間を入力したり長い時間が必要なことを指定したりできるフォームなどをスクリプトで提供することができる。</p></description><examples><eg-group><head>ドロップダウンリストを使用してタイムアウトを変更する</head><description><p>ここでは、利用者がドロップダウンリストを使用してタイムアウト時間を変更できる、基本的な AS2 の例を示す。この例には、sessionLimitDuration というインスタンス名のコンボボックスがある。</p></description><code><![CDATA[import mx.controls.Alert;
import mx.accessibility.AlertAccImpl;
import mx.accessibility.ComboBoxAccImpl;

ComboBoxAccImpl.enableAccessibility();
AlertAccImpl.enableAccessibility();

var sessionTimeout;
var sessionNotificationTimeout;
var timeLimit: Number;
var sessionAlert: Alert;

adjustTimeoutDuration();
// インタラクションが発生したらタイムアウトをリセットする
testField.addEventListener("change", resetTimeout);

//
//combobox の値が変更されたら制限時間を更新する
//
sessionLimitDuration.addEventListener("change", adjustTimeoutDuration);

function adjustTimeoutDuration(e) {
  timeLimit = sessionLimitDuration.value * 1000;
  resetTimeout();
  timeoutDescription.text = "A session timeout will be simulated after " + 
    sessionLimitDuration.selectedLabel + " without interaction in the form field below."
}

function resetTimeout() {
  clearTimeout(sessionTimeout);
  sessionTimeout = setTimeout(endSession, timeLimit);
}

function endSession() {
  sessionAlert.deletePopUp();
  Alert.show("please log in again",
  "Your session has expired");
}]]></code><description><p>この実例は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG-TECHS/working-examples/FLASH24/checkbox_for_extending_timelimit_as3.html">「ドロップダウンリストを使用してタイムアウトを変更する」のサンプル（英語）</loc>で確認できる。また、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG-TECHS/working-examples/FLASH24/checkbox_for_extending_timelimit_as3.swf">「ドロップダウンリストを使用してタイムアウトを変更する」のソース（英語）</loc>をダウンロードすることもできる。なお、このサンプルではデモンストレーションが目的であるため、セッション時間を意図的に短くしてある。コンテンツ制作者は、「<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.ciaj.or.jp/access/web/docs/UNDERSTANDING-WCAG20/time-limits-required-behaviors.html">達成基準 2.2.1 （調整可能な制限時間）</loc>」の要件を満たすための十分な時間を提供する必要がある。</p></description></eg-group></examples><resources/><related-techniques><relatedtech idref="SCR1"/><relatedtech idref="G133"/><relatedtech idref="G198"/><relatedtech idref="G180"/></related-techniques><tests><procedure><p>制限時間を含む Flash コンテンツで次のことを確認する。</p><olist><item><p>ページの先頭に制限時間を調整するためのコントロールがあり、利用者がデフォルトの 10 倍以上の時間に調整できる</p></item><item><p>ページのデフォルトの制限時間が、普通の 10 倍の時間が必要な利用者でも1.のコントロールに簡単に移動できる長さである</p></item></olist></procedure><expected-results><p>1. および 2. を満たしている。</p></expected-results></tests><translationcredit><ulist><item>原文：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/FLASH24.html">FLASH24: Allowing the user to extend the default time limit（英語）</loc></item><item>日本語訳監修：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.infoaxia.co.jp/">植木 真（株式会社インフォアクシア）</loc></item><item>日本語訳：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.adobe.com/jp/accessibility/">アドビ システムズ 株式会社</loc></item></ulist></translationcredit></technique><technique id="FLASH25"><short-name>アクセシブルな名前を設定することによって、フォーム・コントロールにラベルを付ける</short-name><applicability><ulist><item><p>Adobe Flash Professional バージョン MX 以降</p></item><item><p>Adobe Flex</p></item></ulist></applicability><applies-to><success-criterion idref="text-equiv-all"/><success-criterion idref="content-structure-separation-programmatic"/><success-criterion idref="minimize-error-cues"/></applies-to><ua-issues><ua-issue><p>ユーザーエージェントによるサポートに関する全般的な情報は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="flash.html#flash_ua_support">Flashのユーザーエージェントによるサポート</loc>を参照のこと。</p></ua-issue></ua-issues><description><p>この実装方法の目的は、Flash で提供されるフォーム・コンポーネントに組み込むアクセシブルな名前を設定することである。ラジオボタン、チェックボックス、ボタンなど、コンポーネントによっては自身に固有な「ラベル」プロパティが既に与えられているが、その他のコンポーネントについては、コンテンツ制作者がコンポーネントのアクセシブルな名前となるラベルテキストを指定する必要がある。そのためには、アクセシビリティパネルを使用するか（オーサリング中にステージ上にコンポーネントを配置する場合）、スクリプトを使用する（実行時に動的にコンポーネントを生成する場合）。</p><p>ActionScript 2</p><p>ActionScript 2 では、コンポーネントの<code><![CDATA[_accProps]]></code>プロパティにアクセシブルな名前を設定する必要がある。このプロパティはオブジェクトでなければならない。プロパティがまだ設定されていない場合は、コンテンツ制作者がカスタムオブジェクトを作成して<code><![CDATA[_accProps]]></code>プロパティに割り当てる必要がある。場合によっては、1 つのオブジェクトに対し、アクセシブルな名前を指定する<code><![CDATA[_accProps.name]]></code>を含む複数のアクセシビリティ関連プロパティがある。<code><![CDATA[_accProps]]></code>プロパティを変更した場合、コンテンツ制作者は、<code><![CDATA[Accessibility.UpdateProperties()]]></code>を呼び出してその変更を有効にする必要がある。MSAA に対応していない環境でエラーが発生するのを防ぐため、<code><![CDATA[Accessibility.UpdateProperties()]]></code>を呼び出す前に<var>System.capabilities.hasAccessibility</var>フラグを確認することを推奨する。</p><p>ActionScript 2 には、以下のアクセシブルなコンポーネントが用意されている。</p><ulist><item><p> SimpleButton </p></item><item><p> CheckBox </p></item><item><p> RadioButton </p></item><item><p> Label </p></item><item><p> TextInput </p></item><item><p> TextArea </p></item><item><p> ComboBox </p></item><item><p> ListBox </p></item><item><p> Window </p></item><item><p> Alert </p></item><item><p> DataGrid </p></item></ulist><p>ActionScript 3</p><p>ActionScript 3 では、コンポーネントの<code><![CDATA[accessibilityProperties]]></code>プロパティにアクセシブルな名前を設定する必要がある。このプロパティは<code><![CDATA[flash.accessibility.AccessibilityProperties]]></code>のインスタンスでなければならない。プロパティがまだ設定されていない場合は、コンテンツ制作者が新しい<code><![CDATA[accessibilityProperties]]></code>インスタンスを作成して<code><![CDATA[accessibilityProperties]]></code>プロパティに割り当てる必要がある。場合によっては、1 つのオブジェクトに対し、アクセシブルな名前を指定する<code><![CDATA[accessibilityProperties.name]]></code>を含む複数のアクセシビリティ関連プロパティがある。<code><![CDATA[accessibilityProperties]]></code>プロパティを変更した場合、コンテンツ制作者は、<code><![CDATA[flash.accessibility.AccessibilityProperties()]]></code>を呼び出してその変更を有効にする必要がある。MSAA に対応していない環境でエラーが発生するのを防ぐため、<code><![CDATA[Accessibility.UpdateProperties()]]></code>を呼び出す前に<var>flash.system.capabilities.hasAccessibility</var>フラグを確認することを推奨する。</p><p>ActionScript 3 には、以下のアクセシブルなコンポーネントが用意されている。</p><ulist><item><p> Button </p></item><item><p> CheckBox </p></item><item><p> ComboBox </p></item><item><p> List </p></item><item><p> RadioButton </p></item><item><p> TileList </p></item></ulist></description><examples><eg-group><head>アクセシビリティパネルを使用してコンポーネントのアクセシブルな名前を設定する</head><description><p>コンポーネントコントロールを追加してラベルを付ける手順は次の通りである。</p><olist><item><p>コンポーネントパネルからコンポーネントをステージへドラッグするか、スクリプトを使用して新しいインスタンスを作成する。</p></item><item><p>新しく作成したコンポーネントインスタンスを選択した状態で、対応するラベルテキストをアクセシビリティパネルの「名前」フィールドに入力する。</p></item></olist></description></eg-group><eg-group><head>ActionScript 2.0 を使用してアクセシブルな名前を設定する</head><description><p>次のコード例は、ListBox コンポーネントを作成してアクセシブルな名前を割り当てる方法を示している。</p></description><code><![CDATA[mx.accessibility.ListAccImpl.enableAccessibility();

this.createClassObject(mx.controls.List, "my_list", 1);
my_list.addItem({label: "R. Davis", data: 1});
my_list.addItem({label: "V. Mann", data: 2});
my_list.addItem({label: "L. Heart", data: 3});
my_list.addItem({label: "P. Hill", data: dt4});
my_list.addItem({label: "D. Gribble", data: 5});
my_list.move(10, 10);

if (System.capabilities.hasAccessibility) {
  my_list._accProps = new Object();
  my_list._accProps.name = "Staff Members";
  Accessibility.updateProperties();
}]]></code><description><p>この実例は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG-TECHS/working-examples/FLASH25/accessible_name_for_form_components_as2.html">「ActionScript 2.0 を使用してアクセシブルな名前を設定する」のサンプル（英語）</loc>で確認できる。また、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG-TECHS/working-examples/FLASH25/accessible_name_for_form_components_as2.swf">「ActionScript 2.0 を使用してアクセシブルな名前を設定する」のソース（英語）</loc>をダウンロードすることもできる。</p></description></eg-group><eg-group><head>ActionScript 3.0 を使用してアクセシブルな名前を設定する</head><description><p>次のコード例は、ListBox コンポーネントを作成してアクセシブルな名前を割り当てる方法を示している。</p></description><code><![CDATA[import fl.controls.List;
import fl.accessibility.ListAccImpl;
import flash.system.Capabilities;
import flash.accessibility.*;

ListAccImpl.enableAccessibility();
var my_list:List = new List();
my_list.addItem({label:"R. Davis", data:1});
my_list.addItem({label:"V. Mann", data:2});
my_list.addItem({label:"L. Heart", data:3});
my_list.addItem({label:"P. Hill", data:4});
my_list.addItem({label:"D. Gribble", data:5});
my_list.x = my_list.y = 10;

if (Capabilities.hasAccessibility) {
  var accProps:AccessibilityProperties = new AccessibilityProperties();
  accProps.name = "Staff Members";
  my_list.accessibilityProperties = accProps;
  Accessibility.updateProperties();
}
addChild(my_list);]]></code><description><p>この実例は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG-TECHS/working-examples/FLASH25/accessible_name_for_form_components_as3.html">「ActionScript 3.0 を使用してアクセシブルな名前を設定する」のサンプル（英語）</loc>で確認できる。また、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG-TECHS/working-examples/FLASH25/accessible_name_for_form_components_as3.swf">「ActionScript 3.0 を使用してアクセシブルな名前を設定する」のソース（英語）</loc>をダウンロードすることもできる。</p></description></eg-group></examples><resources/><related-techniques><relatedtech idref="G94"/></related-techniques><tests><procedure><p>フォームコンポーネントを含む Flash ムービーについて、以下のいずれかを満たしているか確認する。</p><olist><item><p>選択されているコンポーネントのラベルテキストがアクセシビリティパネルの「名前」フィールドで指定されている。</p></item><item><p>（ActionScript 2.0 の場合）スクリプトを使用してコンポーネントの <code><![CDATA[_accProps.name]]></code> プロパティが動的に設定されている。</p></item><item><p>（ActionScript 3.0 の場合）スクリプトを使用してコンポーネントの <code><![CDATA[accessibilityProperties.name]]></code> プロパティが動的に設定されている。</p></item></olist></procedure><expected-results><p>上記のどれか一つを満たしている。</p></expected-results></tests><translationcredit><ulist><item>原文：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/FLASH25.html">FLASH25: Labeling a form control by setting its accessible name（英語）</loc></item><item>日本語訳監修：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.infoaxia.co.jp/">植木 真（株式会社インフォアクシア）</loc></item><item>日本語訳：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.adobe.com/jp/accessibility/">アドビ システムズ 株式会社</loc></item></ulist></translationcredit></technique><technique id="FLASH26"><short-name>Flash ビデオに音声ガイドを提供する</short-name><applicability><ulist><item><p> Flash CS3 and higher </p></item><item><p> ActionScript 3.0 and higher </p></item></ulist></applicability><applies-to><success-criterion idref="media-equiv-audio-desc"/><success-criterion idref="media-equiv-audio-desc-only"/></applies-to><ua-issues><ua-issue><p>ユーザーエージェントによるサポートに関する全般的な情報は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="flash.html#flash_ua_support">Flashのユーザーエージェントによるサポート</loc>を参照のこと。</p></ua-issue></ua-issues><description><p>この実装方法の目的は、全盲の利用者または視聴覚素材の映像を見ることが困難な利用者がコンテンツの内容を理解できるようにする方法を提供することである。この実装方法では、視聴覚素材の会話の合間に、映像だけで伝えられている情報を説明する音声ガイドを挿入する。</p></description><examples><eg-group><head>キューポイントに到達したときにガイドを再生する</head><description><p>この事例では、FLVPlayback コンポーネントを使用してビデオプレーヤーを作成する。AudioDescriptions という名前のカスタムクラスを追加して、拡張音声ガイドの再生を管理する。このクラスは、メディア内で音声ガイドのプロバイダによって識別されるキューポイントをリッスンするイベントリスナーを提供する。これらのキューポイントに到達すると、対応するガイドを含む mp3 ファイルの再生が開始される。録音されたガイドはムービーの会話の合間に収まる時間に設定されている。</p><p>音声ガイドはデフォルトで有効になる。ビデオプレーヤーの下に用意されているボタンによって、利用者は音声ガイドをオンまたはオフにできる（このボタンは他の達成基準を満たすためにアクセシブルである必要がある）。</p></description><code><![CDATA[package {
  import fl.video. *;
  import flash.events. *;
  import flash.media.Sound;
  import flash.media.SoundChannel;
  import flash.net.URLRequest;
  import flash.display.Sprite;
  
  public class AudioDescriptions extends Sprite {
    private var channel: SoundChannel = new SoundChannel;
    private var myPlayer: FLVPlayback;
    private var _enabled: Boolean = true;
    private var _toggleBtn: Button;
    private var snd: Sound = new Sound();
    public function AudioDescriptions() {
      // point myPlayer to the FLVPlayback component instance on the stage, 
      // which should be loaded with a valid video source.
      myPlayer = my_FLVPlybk;
      // add cue points. When any of these are reached, the 
      // MetadataEvent.CUE_POINT event will fire
      myPlayer.addASCuePoint(8.35, "ASpt1");
      myPlayer.addASCuePoint(23.23, "ASpt2");
      
      enable();
      
      enable_AD_btn.addEventListener(MouseEvent.CLICK, handleBtnClick);
    }
    
    private function handleBtnClick(e) {
      _enabled = ! _enabled;
      if (! _enabled) {
        disable();
        enable_AD_btn.label = "Enable Audio Descriptions";
      } else {
        enable();
        enable_AD_btn.label = "Disable Audio Descriptions";
      }
    }
    
    public function enable() {
      // set up an event handler which will be called each time a cue point is reached
      myPlayer.addEventListener(MetadataEvent.CUE_POINT, cp_listener);
    }
    
    public function disable() {
      // remove the event handler called each time a cue point is reached, so 
      // that audio description is disabled.
      myPlayer.removeEventListener(MetadataEvent.CUE_POINT, cp_listener);
    }
    
    private function cp_listener(eventObject: MetadataEvent): void {
      snd = new Sound();
      //recreate sound object as it can only load one mp3 file
      //check to see which cue point was reached
      switch (eventObject.info.name) {
        case "ASpt1":
        snd.load(new URLRequest("sphere.mp3"));
        //create a new Sound object, and load the appropriate mp3
        channel = snd.play();
        // play the audio description, and assign it to the SoundChannel object
        break;
        case "ASpt2":
        snd.load(new URLRequest("transfrm.mp3"));
        channel = snd.play();
        break;
      }
    }
  }
}]]></code><description><p>この実例は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG-TECHS/working-examples/FLASH26/audio_descriptions_as3.html">「キューポイントに到達したときにガイドを再生する」のサンプル（英語）</loc>で確認できる。また、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG-TECHS/working-examples/FLASH26/audio_descriptions_as3.zip">「キューポイントに到達したときにガイドを再生する」のソース（英語）</loc>をダウンロードすることもできる。</p></description></eg-group><eg-group><head>ガイドのための追加の音声トラックを提供する</head><description><p>音声ガイドは、追加の音声トラックを通して提供することもできる。この場合、追加の音声トラックはメインのメディアと同じ長さにし、同期して再生させる。ただし、音声ガイドの再生が必要な箇所のみに音声を含め、他の部分は無音にする。Flash 制作者は、リスナーの好みに応じてこの追加の音声トラックのオン/オフを切り替えるための機能を提供することができる。追加のトラックが有効になっている場合は、二つの音声トラック（一つはメイン音声、もう一つは音声ガイドのみが含まれているトラック）が並行して再生される。音声ガイドとメイン音声は、音声が重なって聞き取りが困難になることのないようにする必要がある。この手法は、事例 1 で使用されている手法と同じ効果が期待できる。ただし、Flash 制作者に提供される音声ガイドファイルの種類によっては、こちらの手法を選択したほうがいい場合もある。</p></description></eg-group></examples><resources/><related-techniques><relatedtech idref="G78"/><relatedtech idref="G69"/></related-techniques><tests><procedure><p>Flash コンテンツに音声サウンドトラック付きの映像が含まれている場合は、次のことを確認する。</p><olist><item><p>別の音声ファイルを使用した音声ガイドが利用可能である</p></item><item><p>利用者が音声ガイドを有効または無効にするためのボタンが用意されている</p></item></olist></procedure><expected-results><ulist><item><p>1. および 2. を満たしている。</p></item></ulist></expected-results></tests><translationcredit><ulist><item>原文：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/FLASH26.html">FLASH26: Applying audio descriptions to Flash video（英語）</loc></item><item>日本語訳監修：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.infoaxia.co.jp/">植木 真（株式会社インフォアクシア）</loc></item><item>日本語訳：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.adobe.com/jp/accessibility/">アドビ システムズ 株式会社</loc></item></ulist></translationcredit></technique><technique id="FLASH27"><short-name>ボタンの目的を説明するラベルを提供する</short-name><applicability><ulist><item><p>Adobe Flash Professional バージョン MX 以降</p></item><item><p>Adobe Flex</p></item></ulist></applicability><applies-to><success-criterion idref="text-equiv-all"/><success-criterion idref="navigation-mechanisms-refs"/><success-criterion idref="navigation-mechanisms-link"/></applies-to><ua-issues><ua-issue><p>ユーザーエージェントによるサポートに関する全般的な情報は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="flash.html#flash_ua_support">Flashのユーザーエージェントによるサポート</loc>を参照のこと。</p></ua-issue></ua-issues><description><p>この実装方法の目的は、ボタンのアクセシブルな名前として説明的なテキストを提供して、ボタンの目的を記述することである。この説明により、利用者はこのボタンとその他の Flash ムービーのボタンを区別でき、このボタンを有効化するかどうかを決定できる。ボタンのアクセシブルな名前として、空の文字列では不十分である。</p><p>テキストラベル付きのボタンの場合、ラベルテキストがボタンのアクセシブルな名前として使用される。画像ベースのボタンでテキストラベルが付いていない場合、このボタンのアクセシブルな名前は、アクセシビリティパネルを使用するか、またはスクリプトによって、別途設定する必要がある。</p></description><examples><eg-group><head>ラベルプロパティを使用してボタンの目的を記述する</head><code><![CDATA[import fl.controls.Button;
import fl.accessibility.ButtonAccImpl;

ButtonAccImpl.enableAccessibility();

var myButton:Button = new Button();
myButton.label = "View Items in Cart";]]></code></eg-group><eg-group><head>スクリプトを使用して、ActionScript 3.0 により画像ボタンのアクセシブルな名前を設定する</head><description><p>この事例では、ボタンのラベルプロパティで意図的に空の文字列を設定する。支援技術で認識できるようにするには、ボタンの <code><![CDATA[accessibilityProperties.name]]></code> プロパティを設定する。</p></description><code><![CDATA[import fl.controls.Button;
import fl.accessibility.ButtonAccImpl;
import flash.accessibility.*;
import flash.system.Capabilities;
ButtonAccImpl.enableAccessibility();

var soundIsMuted = false;
var myButton:Button = new Button();
myButton.setStyle("icon", unmuted);
myButton.label = "";
myButton.x = myButton.y = 10;
myButton.width = myButton.height = 50;
updateAccName(myButton, "mute sound");
myButton.setStyle("icon", unmuted);
myButton.addEventListener(MouseEvent.CLICK, handleBtnClick);
addChild(myButton);

function handleBtnClick(e) {
  soundIsMuted = !soundIsMuted;
  myButton.setStyle("icon", soundIsMuted ? muted : unmuted);
  updateAccName(myButton, soundIsMuted ? "unmute sound" : "mute sound");
}

function updateAccName(obj, newName:String) {
  if (!obj.accessibilityProperties)
    obj.accessibilityProperties = new AccessibilityProperties();
  obj.accessibilityProperties.name = newName;
  if (Capabilities.hasAccessibility)
    Accessibility.updateProperties();
}]]></code></eg-group></examples><resources/><related-techniques><relatedtech idref="G91"/><relatedtech idref="FLASH5"/><relatedtech idref="FLASH4"/><relatedtech idref="FLASH30"/></related-techniques><tests><procedure><p>この実装方法を用いている Flash ムービーの各ボタンについて、次のことを確認する。</p><olist><item><p>ボタンのラベルテキストがボタンの目的を正しく説明している</p></item><item><p>ボタンにテキストラベルがない場合、ボタンのアクセシブルな名前として説明的なテキストが追加されている</p></item><item><p>ボタンにラベルテキストとアクセシブルな名前の両方が含まれている場合、その二つの組み合わせが、ボタンの目的の説明として正しいものである</p></item></olist></procedure><expected-results><ulist><item><p>1., 2. または 3. を満たしている。</p></item></ulist></expected-results></tests><translationcredit><ulist><item>原文：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/FLASH27.html">FLASH27: Providing button labels that describe the purpose of a button（英語）</loc></item><item>日本語訳監修：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.infoaxia.co.jp/">植木 真（株式会社インフォアクシア）</loc></item><item>日本語訳：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.adobe.com/jp/accessibility/">アドビ システムズ 株式会社</loc></item></ulist></translationcredit></technique><technique id="FLASH28"><short-name>Flash で ASCII アート、顔文字、リート語の代替テキストを提供する</short-name><applicability><ulist><item><p>Adobe Flash Professional バージョン MX 以降</p></item><item><p>Adobe Flex</p></item></ulist></applicability><applies-to><success-criterion idref="text-equiv-all"/></applies-to><ua-issues><ua-issue><p>ユーザーエージェントによるサポートに関する全般的な情報は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="flash.html#flash_ua_support">Flashのユーザーエージェントによるサポート</loc>を参照のこと。</p></ua-issue></ua-issues><description><p>ASCII 文字、顔文字、リート語（当て字）が使用されると、アクセシビリティ上の問題が発生することがある。その理由は、文字のグループの見た目によって意味を伝えているからである。</p><p>Flash では、このような文字のグループをムービークリップにラップし、アクセシブルな名前を提供することによってアクセシビリティが確保される。ムービークリップの forceSimple プロパティに true を設定することも重要である。この設定により、実際の ASCII 文字は支援技術からアクセス不可になる。</p></description><examples><eg-group><head>アクセシビリティパネルを使用して ASCII アートの代替テキストを提供する</head><description><p>この事例には、当て字を使用した ASCII アートによる語が含まれている（テキストは「WCAG 2 rulez」を表している）。次の手順で、このテキストのアクセシビリティを確保する。</p><olist><item><p>ムービークリップインスタンスに ASCII 文字を配置する。</p></item><item><p>テキストが配置されたムービークリップインスタンスを選択し、アクセシビリティパネルで次の変更を行う。</p><ulist><item><p>ASCII アートに対して、当て字を使用していない意味のある代替テキストを追加する（「WCAG 2 RULEZ」など）。</p></item><item><p>「子オブジェクトをアクセス可能にする」チェックボックスをオフにし、ASCII 文字がスクリーンリーダーによって読み上げられないようにする。</p></item></ulist></item></olist><p>上記の手順を次のスクリーンショットで示す。</p><p><img xmlns:xlink="http://www.w3.org/1999/xlink" class="eximg" src="http://www.w3.org/TR/WCAG20-TECHS/working-examples/FLASH28/ascii_art_alternative.png" alt="画面スクリーンショット：アクセシビリティパネルを用いて、ASCIIアートの代替テキストを提供" height="308" width="695"/></p></description></eg-group><eg-group><head>ActionScript を使用して ASCII アートの代替テキストを提供する</head><description><p>この事例では、Flash Professional のオーサリングツールのアクセシビリティパネルの代わりに ActionScript を使用している。それ以外は事例 1 と同じである。</p><olist><item><p>ムービークリップインスタンスに ASCII 文字を配置する。</p></item><item><p>ムービークリップインスタンスのインスタンス名（myASCII など）を指定する。</p></item><item><p>ムービークリップにアクセシブルな名前を設定し、ムービークリップ内部のテキストをアクセス不可にするために forceSimple プロパティを true に設定する。</p></item></olist></description><code><![CDATA[// 'myASCII' はムービーのメインのタイムライン上に置かれたムービークリップインスタンスである
myASCII.accessibilityProperties = new AccessibilityProperties();
myASCII.accessibilityProperties.name = "WCAG 2 Rulez";
myASCII.accessibilityProperties.forceSimple = true;]]></code><description><p>この実例は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG-TECHS/working-examples/FLASH28/ascii_art_alternatives_as3.html">「ActionScript を使用して ASCII アートの代替テキストを提供する」のサンプル（英語）</loc>で確認できる。また、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG-TECHS/working-examples/FLASH28/ascii_art_alternatives_as3.html">「ActionScript を使用して ASCII アートの代替テキストを提供する」のソース（英語）</loc>をダウンロードすることもできる。</p></description></eg-group></examples><resources/><related-techniques/><tests><procedure><olist><item><p>SWF ファイルを発行する。</p></item><item><p>オブジェクトの名前を表示できるツールを使用して Flash ムービーを開く。</p></item><item><p>グループ化された ASCII 文字、当て字、顔文字に、同じ情報がアクセシビリティの name プロパティによって提供されている。</p></item><item><p>また、場合によってはスクリーンリーダーを使用して Flash コンテンツの読み上げをテストする。このテストでは、タブ移動の可能な非テキストオブジェクトにタブ移動したときにそのオブジェクトの代替テキストが読み上げられる。または、コンテンツを 1 行ずつ読み上げたときに代替テキストが読み上げられる。</p></item></olist></procedure><expected-results><ulist><item><p>3. または 4. を満たしている。</p></item></ulist></expected-results></tests><translationcredit><ulist><item>原文：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/FLASH28.html">FLASH28: Providing text alternatives for ASCII art, emoticons, and leetspeak in Flash（英語）</loc></item><item>日本語訳監修：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.infoaxia.co.jp/">植木 真（株式会社インフォアクシア）</loc></item><item>日本語訳：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.adobe.com/jp/accessibility/">アドビ システムズ 株式会社</loc></item></ulist></translationcredit></technique><technique id="FLASH29"><short-name>フォーム・コンポーネントに label プロパティを設定する</short-name><applicability><ulist><item><p>Adobe Flash Professional バージョン MX 以降</p></item><item><p>Adobe Flex</p></item></ulist></applicability><applies-to><success-criterion idref="text-equiv-all"/><success-criterion idref="content-structure-separation-programmatic"/><success-criterion idref="minimize-error-cues"/><success-criterion idref="ensure-compat-rsv"/></applies-to><ua-issues><ua-issue><p>ユーザーエージェントによるサポートに関する全般的な情報は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="flash.html#flash_ua_support">Flashのユーザーエージェントによるサポート</loc>を参照のこと。</p></ua-issue></ua-issues><description><p>この実装方法の目的は、フォーム・コンポーネントに label プロパティを設定することによって、フォーム・コンポーネントにラベルテキストを明示的に関連付けることを目的としている。このプロパティを設定することにより、コンポーネントの隣にラベルが視覚的に配置されるようになり、支援技術に対してラベルテキストが提示されるようになる。</p><p>label プロパティをサポートするコンポーネントは以下のとおりである。</p><ulist><item><p> <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/fl/controls/Button.html">Button</loc></p></item><item><p> <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/fl/controls/CheckBox.html">CheckBox</loc></p></item><item><p> <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/fl/controls/RadioButton.html">RadioButton</loc></p></item></ulist><p>その他のコンポーネントについては、手動でフォーム・コンポーネントの隣にラベルテキストを配置する必要がある。これらのコンポーネントについては、以下のいずれかのアプローチを用いて、フォーム・コンポーネントにラベルテキストを関連付けることができる。</p><ulist><item><p> <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/2010/NOTE-WCAG20-TECHS-20101014/FLASH25">FLASH25： アクセシブルな名前を設定することによって、フォーム・コントロールにラベルを付ける</loc> (Flash)</p></item><item><p> <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/2010/NOTE-WCAG20-TECHS-20101014/FLASH32">FLASH32： 自動ラベル機能を使用してフォーム・コントロールにテキストラベルを関連付ける</loc> (Flash)</p></item></ulist></description><examples><eg-group><head>コンポーネントインスペクタパネルを使用してラベルを設定する</head><description><olist><item><p>コンポーネントパネルから Button、CheckBox、RadioButton のいずれかのコンポーネントをステージにドラッグしてムービーに追加する。</p></item><item><p>コンポーネントを選択した状態で、「ウィンドウ」メニューまたは Shift + F7 ショートカットを使用して、コンポーネントインスペクタパネルを開く。</p></item><item><p>コンポーネントインスペクタの「パラメータ」タブで、「label」パラメータにラベルテキストを入力する。</p></item></olist><p>下のスクリーンショットはこの実装方法を示している。</p><p><img xmlns:xlink="http://www.w3.org/1999/xlink" class="eximg" src="http://www.w3.org/TR/WCAG20-TECHS/working-examples/FLASH29/component_inspector_label.png" alt="画面スクリーンショット：コンポーネントインスペクタパネルで、コンポーネントのラベルを設定" height="349" width="513"/></p></description></eg-group><eg-group><head>ActionScript 3.0 を使用して、Button、CheckBox、RadioButton の各コンポーネントのラベルを設定する</head><code><![CDATA[import fl.accessibility.ButtonAccImpl
import fl.accessibility.CheckBoxAccImpl
import fl.accessibility.RadioButtonAccImpl
import fl.controls.Button;
import fl.controls.CheckBox;
import fl.controls.RadioButton;

ButtonAccImpl.enableAccessibility();
var myButton: Button = new Button();
myButton.label = "Submit Details";
myButton.x = 10;
myButton.y = 10
addChild(myButton);

CheckBoxAccImpl.enableAccessibility();
var myCheckBox: CheckBox = new CheckBox();
myCheckBox.label = "notify me";
myCheckBox.x = 10;
myCheckBox.y = 40
addChild(myCheckBox);

RadioButtonAccImpl.enableAccessibility();
var myRadioButton: RadioButton = new RadioButton();
myRadioButton.label = "Male";
myRadioButton.x = 10;
myRadioButton.y = 60;
addChild(myRadioButton);]]></code><description><p>この実例は、 <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG-TECHS/working-examples/FLASH29/setting_label_property_as3.html">「ActionScript 3.0 を使用して、Button、CheckBox、RadioButton の各コンポーネントのラベルを設定する」のサンプル（英語）</loc>で確認できる。また、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG-TECHS/working-examples/FLASH29/setting_label_property_as3.swf">「ActionScript 3.0 を使用して、Button、CheckBox、RadioButton の各コンポーネントのラベルを設定する」のソース（英語）</loc>をダウンロードすることもできる。</p></description></eg-group></examples><resources/><related-techniques><relatedtech idref="FLASH25"/><relatedtech idref="FLASH32"/></related-techniques><tests><procedure><p>Button、CheckBox、RadioButton の各コンポーネントを使用している場合、次のことを確認する。</p><olist><item><p>コンポーネントの label プロパティによって、ボタンの目的を説明したラベルが提供されている</p></item></olist></procedure><expected-results><olist><item><p>1. を満たしている。</p></item></olist></expected-results></tests><translationcredit><ulist><item>原文：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/FLASH29.html">FLASH29: Setting the label property for form components（英語）</loc></item><item>日本語訳監修：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.infoaxia.co.jp/">植木 真（株式会社インフォアクシア）</loc></item><item>日本語訳：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.adobe.com/jp/accessibility/">アドビ システムズ 株式会社</loc></item></ulist></translationcredit></technique><technique id="FLASH30"><short-name>画像ボタンにアクセシブルな名前を指定する</short-name><applicability><ulist><item><p>Adobe Flash Professional バージョン MX 以降</p></item><item><p>Adobe Flex</p></item></ulist></applicability><applies-to><success-criterion idref="text-equiv-all"/><success-criterion idref="ensure-compat-rsv"/></applies-to><ua-issues><ua-issue><p>ユーザーエージェントによるサポートに関する全般的な情報は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="flash.html#flash_ua_support">Flashのユーザーエージェントによるサポート</loc>を参照のこと。</p></ua-issue></ua-issues><description><p>画像ベースの Button コンポーネントには、機能的なラベルを提供するためにアクセシブルな名前を設定する必要がある。このラベルはボタンの機能を示すもので、画像を説明するものではない。ページ内に異なる結果をもたらす複数のボタンがある場合、ラベルは特に重要である。</p><p>Flash ムービーの使用中にボタンが変更されるときは、ボタンのアクセシブルな名前も更新しなければならない場合がある。</p></description><examples><eg-group><head>シンプルな画像ボタンにアクセシブルな名前を設定する</head><description><p>この事例では、スクリプトによってアイコンベースのボタンにアクセシブルな名前を設定している。ボタンをクリックすると Web ページが開かれる。</p></description><code><![CDATA[//画像ボタンの代替テキストを提供する
this.check_btn.accessibilityProperties = new AccessibilityProperties();
this.check_btn.accessibilityProperties.name = "Check page validation";

//URLにナビゲートするイベントリスナーと関数を設定する

this.check_btn.addEventListener(MouseEvent.CLICK, onClickHandler);

function onClickHandler(e: MouseEvent): void {
  var btn = e.target;
  var url: String = "http://validator.w3.org";
  var request: URLRequest = new URLRequest(url);
  navigateToURL(request, '_blank');
}]]></code><description><p>この実例は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG-TECHS/working-examples/FLASH30/Text_description_for_simpleimage_buttons_as3.html">「シンプルな画像ボタンにアクセシブルな名前を設定する」のサンプル（英語）</loc>で確認できる。また、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG-TECHS/working-examples/FLASH30/Text_description_for_simpleimage_buttons_as3.swf">「シンプルな画像ボタンにアクセシブルな名前を設定する」のソース（英語）</loc>をダウンロードすることもできる。</p></description></eg-group><eg-group><head>動的な画像ボタンにアクセシブルな名前を設定する</head><description/><code><![CDATA[import fl.controls.Button;
import fl.accessibility.ButtonAccImpl;

ButtonAccImpl.enableAccessibility();

var soundIsMuted = false;
var myButton: Button = new Button();
myButton.label = "";
myButton.x = myButton.y = 10;
myButton.width = myButton.height = 50;
updateAccName(myButton, "mute sound");
myButton.setStyle("icon", unmuted);
myButton.addEventListener(MouseEvent.CLICK, handleBtnClick);
addChild(myButton);

function handleBtnClick(e) {
  soundIsMuted = ! soundIsMuted;
  myButton.setStyle("icon", soundIsMuted? muted: unmuted);
  updateAccName(myButton, soundIsMuted? "unmute sound": "mute sound");
}

function updateAccName(obj, newName: String) {
  if (! obj.accessibilityProperties)
  obj.accessibilityProperties = new AccessibilityProperties();
  obj.accessibilityProperties.name = newName;
  if (Capabilities.hasAccessibility)
  Accessibility.updateProperties();
}]]></code><description><p>この実例は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="working-examples/FLASH30/text_description_for_image_buttons_as3.html">「動的な画像ボタンにアクセシブルな名前を設定する」のサンプル（英語）</loc>で確認できる。また、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG-TECHS/working-examples/FLASH30/text_description_for_image_buttons_as3.swf">「動的な画像ボタンにアクセシブルな名前を設定する」のソース（英語）</loc>をダウンロードすることもできる。</p></description></eg-group></examples><resources/><related-techniques><relatedtech idref="FLASH1"/></related-techniques><tests><procedure><p>Flash ムービーに画像ベースのボタンが含まれている場合は、次のことを確認する。</p><olist><item><p>ボタンのアクションを説明したアクセシブルな名前がボタンに設定されている。</p></item><item><p>ボタンのアクションが変更された場合（クリックされた場合など）は、それに応じてアクセシブルな名前も変更される。</p></item></olist></procedure><expected-results><ulist><item><p>1. および 2. を満たしている。</p></item></ulist></expected-results></tests><translationcredit><ulist><item>原文：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/FLASH30.html">FLASH30: Specifying accessible names for image buttons（英語）</loc></item><item>日本語訳監修：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.infoaxia.co.jp/">植木 真（株式会社インフォアクシア）</loc></item><item>日本語訳：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.adobe.com/jp/accessibility/">アドビ システムズ 株式会社</loc></item></ulist></translationcredit></technique><technique id="FLASH31"><short-name>データグリッドの表題を指定する</short-name><applicability><ulist><item><p>Adobe Flash Professional バージョン MX 以降</p></item><item><p>Adobe Flex</p></item></ulist></applicability><applies-to><success-criterion idref="content-structure-separation-programmatic"/></applies-to><ua-issues><ua-issue><p>ユーザーエージェントによるサポートに関する全般的な情報は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="flash.html#flash_ua_support">Flashのユーザーエージェントによるサポート</loc>を参照のこと。</p></ua-issue></ua-issues><description><p>この実装方法の目的は、見た目で表題が提供されている場合に、プログラムによって表題をデータグリッドに関連付けることである。通常、テーブルの表題はテーブルの識別子であり、テーブルのタイトルまたは見出しとして機能する。</p><p>Flash には DataGrid コンポーネント用の caption 要素はない。ただし、以下のアプローチによって同じ効果を得ることができる。</p><olist><item><p>データグリッドの上にラベルコンポーネントまたはテキストフィールドを配置し、グリッドの表題を設定する。</p></item><item><p>表題のテキストを複製し、グリッドのアクセシブルな名前として追加する。これを行うには、グリッドのアクセシビリティパネルの「名前」フィールドに値を設定するか、またはグリッドの AccessibilityProperties.name プロパティを設定する。</p></item></olist></description><examples><eg-group><head>データグリッドにラベルを関連付ける</head><description><p>ここでは、Flash Professional でコンポーネントパネルからステージに追加されるデータグリッドの例を示す。また、コンポーネントパネルから表題となるテキストを格納するためのラベル要素も追加される。この表題は Flash のアクセシビリティパネルで使用され、データグリッドのアクセシビリティ用の名前として機能する。</p><ulist><item><p>新しい Flash ファイル（.fla）を作成するか、既存のファイルを開いてデータグリッドを挿入する。</p></item><item><p>ウィンドウメニューから Flash のコンポーネントパネルを開く。</p></item><item><p>データグリッドコンポーネントをステージ上にドラッグし、目的の位置に配置する。</p></item><item><p>ラベルコンポーネントをステージ上にドラッグし、目的の位置に配置する。</p></item><item><p>ラベルコンポーネントにテキストを追加する。</p></item><item><p>データグリッドコンポーネントを選択し、アクセシビリティパネルを使用して、データグリッドの「名前」フィールドにラベルコンポーネントで使用しているのと同じテキストを追加する。</p></item></ulist></description></eg-group><eg-group><head>ActiveScript 3 を使用してデータグリッドにキャプションを関連付ける</head><description><p>ここでは、AS3 のスクリプトによってデータグリッドを生成する基本的な事例を示す。また、表題となるテキストを格納するラベル要素も作成する。この表題は、アクセシブルな名前としてグリッドに追加する。</p></description><code><![CDATA[import fl.accessibility.DataGridAccImpl;
import fl.controls.DataGrid;
import fl.controls.Label;
import fl.data.DataProvider;
import flash.accessibility.Accessibility;
import flash.accessibility.AccessibilityProperties;
import flash.system.Capabilities;

// データグリッドのアクセシビリティを有効にする
DataGridAccImpl.enableAccessibility();

createGrid();

// データグリッドの表題を設定する
var gridCaptionText: String = "Game Results";
gridCaption.text = gridCaptionText;
//表題をデータグリッドのアクセシブルな名前として追加する
var accProps: AccessibilityProperties = new AccessibilityProperties();
accProps.name = gridCaptionText;
aDg.accessibilityProperties = accProps;
if (Capabilities.hasAccessibility)
Accessibility.updateProperties();

function createGrid() {
  
  //コンポーネントを作成して追加する
  var aDg: DataGrid = new DataGrid();
  var gridCaption: Label = new Label();
  addChild(aDg);
  addChild(gridCaption);
  aDg.move(50, 50);
  gridCaption.move(50, 20);
  
  var captionFormat: TextFormat = new TextFormat();
  captionFormat.size = 24;
  gridCaption.setStyle("textFormat", captionFormat);
  gridCaption.width = 300;
  gridCaption.height = 100;
  bldRosterGrid(aDg);
  //データを準備する
  var aRoster: Array = new Array();
  aRoster =[ 
    {Name: "Wilma Carter", Bats: "R", Throws: "R", Year: "So", Home: "Redlands, CA"},
    {Name: "Sylvia Munson", Bats: "R", Throws: "R", Year: "Jr", Home: "Pasadena, CA"}, 
    {Name: "Carla Gomez", Bats: "R", Throws: "L", Year: "Sr", Home: "Corona, CA"}, 
    {Name: "Betty Kay", Bats: "R", Throws: "R", Year: "Fr", Home: "Palo Alto, CA"},
  ];
  aDg.dataProvider = new DataProvider(aRoster);
  aDg.rowCount = aDg.length;
};

function bldRosterGrid(dg: DataGrid) {
  dg.setSize(400, 300);
  dg.columns =[ "Name", "Bats", "Throws", "Year", "Home"];
  dg.columns[0].width = 120;
  dg.columns[1].width = 50;
  dg.columns[2].width = 50;
  dg.columns[3].width = 40;
  dg.columns[4].width = 120;
};]]></code><description><p>このコード例に関する注記：</p><ulist><item><p>この実例は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG-TECHS/working-examples/FLASH31/datagrid_with_caption_as3.html">「ActiveScript 3 を使用してデータグリッドにキャプションを関連付ける」のサンプル（英語）</loc>で確認できる。また、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG-TECHS/working-examples/FLASH31/datagrid_with_caption_as3.swf">「ActiveScript 3 を使用してデータグリッドにキャプションを関連付ける」のソース（英語）</loc>をダウンロードすることもできる。</p></item><item><p>Flash のオーサリングツールのアクセシビリティパネルを使用することによって、データグリッドにアクセシブルな名前を適用することもできる。</p></item><item><p>上記の事例では、データグリッドの表題として使用されるテキストは2回読み上げられる。1回目は視覚に問題のない利用者向けのテキストラベルとして、2回目はデータグリッドのアクセシブルな名前としてである。コンテンツ制作者は、ラベルテキストの <code><![CDATA[silent]]></code> プロパティを <code><![CDATA[true]]></code> に設定することによって、読み上げが重複するのを回避することができる。</p></item></ulist></description></eg-group></examples><resources/><related-techniques><relatedtech idref="H39"/></related-techniques><tests><procedure><olist><item><p>Flash ムービーに DataGrid コンポーネントが含まれているかどうかを確認する。</p></item><item><p>各データグリッドの表題となるテキストが、アクセシブルな名前としてコンポーネントに追加されている</p></item></olist></procedure><expected-results><p>2. を満たしている。</p></expected-results></tests><translationcredit><ulist><item>原文：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/FLASH31.html">FLASH31: Specifying caption text for a DataGrid（英語）</loc></item><item>日本語訳監修：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.infoaxia.co.jp/">植木 真（株式会社インフォアクシア）</loc></item><item>日本語訳：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.adobe.com/jp/accessibility/">アドビ システムズ 株式会社</loc></item></ulist></translationcredit></technique><technique id="FLASH32"><short-name>自動ラベル機能を使用してフォーム・コントロールにテキストラベルを関連付ける</short-name><applicability><ulist><item><p>Adobe Flash Professional バージョン MX 以降</p></item><item><p>Adobe Flex</p></item></ulist></applicability><applies-to><success-criterion idref="text-equiv-all"/><success-criterion idref="content-structure-separation-programmatic"/><success-criterion idref="minimize-error-cues"/><success-criterion idref="ensure-compat-rsv"/></applies-to><ua-issues><ua-issue><p>ユーザーエージェントによるサポートに関する全般的な情報は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="flash.html#flash_ua_support">Flashのユーザーエージェントによるサポート</loc>を参照のこと。</p></ua-issue></ua-issues><description><p><code><![CDATA[CheckBox]]></code>コンポーネントおよび<code><![CDATA[RadioButton]]></code>コンポーネント以外の Flash 標準コンポーネントでは、関連付けられたラベルが自動的に提供されることはない。これらのコンポーネントについては、<code><![CDATA[Label]]></code>コンポーネントを使用して、コントロールの隣にラベルテキストを手動で配置する必要がある。アクセシビリティパネルで「自動ラベル」機能を有効にしてある場合は、<code><![CDATA[TextInput]]></code>コンポーネントおよび<code><![CDATA[TextArea]]></code>コンポーネントについては Flash Player が自動的にラベルテキストを関連付ける。つまり、これらのコンポーネントでは、アクセシビリティパネルを使用してコントロールのラベルテキストを複製する必要はない。自動ラベル機能はデフォルトで有効になっている。</p><p>また、自動ラベル機能によって、Flash Player はボタンシンボルに含まれているテキストをシンボルのアクセシブルな名前として自動的に追加することが可能になる。これは、ボタンシンボルがテキストラベルを含む一つのレイヤーだけで構成されている場合のみ有効である。</p><note><p class="prefix">自動ラベル機能は人間が操作することなくラベルを関連付けるため、関連付けの正確性を検証する必要がある。予測可能な結果を得るためには、すべてのコントロールに対して明示的にラベルを追加することが推奨される。</p></note><p>次の手順で自動ラベル機能を利用する。</p><olist><item><p>Flash アプリケーションに含まれる各フォーム・コントロールの近くに、説明テキストが配置されていることを確認する。自動ラベル機能で使用されるテキストは、支援技術からアクセス可能にする必要がある。</p></item><item><p>ムービーステージを選択し、「アクセシビリティ」パネルを開く。</p></item><item><p>「自動ラベル」オプションがオンになっていることを確認する。この結果、TextInput コントロールおよび TextArea コントロールにラベルが自動的に関連付けられ、カスタムボタンシンボル内のテキストがアクセシブルな名前として追加される。</p></item><item><p>自動ラベル動作が適さない Flash コンテンツの場合は「自動ラベル」オプションをオフにし、「アクセシビリティ」パネルで各コントロールに分かりやすい「名前」の値を設定する。</p></item><item><p>自動ラベル機能を、ムービー全体に対してでなく特定のオブジェクトに対して無効にするには、プロパティインスペクタを使用してテキストのタイプを「ダイナミックテキスト」に変更する。次にそのテキストを選択し、「アクセシビリティ」パネルで「オブジェクトをアクセス可能にする」オプションをオフにする。</p></item></olist><note><p class="prefix">アクセシビリティパネルを使用する以外にも、ステージオブジェクトの <code><![CDATA[AccessibilityProperties.noAutoLabel]]></code> を <code><![CDATA[true]]></code> に設定することによって自動ラベル機能をオフにすることができる。</p></note></description><examples><eg-group><head>アクセシビリティパネルで「自動ラベル」オプションを使用する</head><description><p>この事例では、二つの TextInput コンポーネントと、TextArea コンポーネントとカスタムボタンシンボルのインスタンスが一つずつ表示される。各 TextInput コンポーネントには、コントロールの左に個別のラベル要素が配置されている。TextArea コンポーネントには、コントロールの上にラベルが配置されている。カスタムボタンには、ボタンシンボルの内部にラベルテキストが配置されている。アクセシビリティパネルで「自動ラベル」オプションを有効にしているため、すべてのコントロールに対してラベルに基づいたアクセシブルな名前が提供される。</p><p>次のスクリーンショットは、この事例を示したものである。&#xD;
 <img xmlns:xlink="http://www.w3.org/1999/xlink" class="eximg" src="http://www.w3.org/TR/WCAG20-TECHS/working-examples/FLASH32/using_auto_label.png" alt="画面スクリーンショット：Flashオーサリング環境で自動ラベル機能を使用" height="300" width="593"/></p><p>この実例は、 <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG-TECHS/working-examples/FLASH32/using_auto_labeling_to_associate_label_text_with_controls_as3.html">「アクセシビリティパネルで「自動ラベル」オプションを使用する」のサンプル（英語）</loc>で確認できる。また、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG-TECHS/working-examples/FLASH32/using_auto_labeling_to_associate_label_text_with_controls_as3.swf">「アクセシビリティパネルで「自動ラベル」オプションを使用する」のソース（英語）</loc>をダウンロードすることもできる。</p></description></eg-group></examples><resources/><related-techniques><relatedtech idref="FLASH25"/></related-techniques><tests><procedure><p>Flash フォームに TextInput コンポーネント、TextArea コンポーネント、またはテキストラベルを使用したカスタムボタンシンボルが含まれている場合、次のことを確認する。</p><olist><item><p>ムービーのアクセシビリティパネルで「自動ラベル」オプションが有効になっている。</p></item><item><p>スクリーンリーダーまたは MSAA チェッカーを使用して確認すると、ラベルテキストがコントロールのアクセシブルな名前として実際に利用されている。</p></item></olist></procedure><expected-results><ulist><item><p>1. および 2. を満たしている。</p></item></ulist></expected-results></tests><translationcredit><ulist><item>原文：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/FLASH32.html">FLASH32: Using auto labeling to associate text labels with form controls（英語）</loc></item><item>日本語訳監修：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.infoaxia.co.jp/">植木 真（株式会社インフォアクシア）</loc></item><item>日本語訳：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.adobe.com/jp/accessibility/">アドビ システムズ 株式会社</loc></item></ulist></translationcredit></technique><technique id="FLASH33"><short-name>Flash オブジェクトのサイズに相対値を使用する</short-name><applicability><ulist><item><p>Adobe Flash Professional バージョン MX 以降</p></item><item><p>Adobe Flex</p></item></ulist></applicability><applies-to><success-criterion idref="visual-audio-contrast-visual-presentation"/></applies-to><ua-issues><ua-issue><p>ユーザーエージェントによるサポートに関する全般的な情報は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="flash.html#flash_ua_support">Flashのユーザーエージェントによるサポート</loc>を参照のこと。</p></ua-issue></ua-issues><description><p>この実装方法の目的は、em の値など相対的な単位を使用して、埋め込みの Flash オブジェクトの幅や高さを指定することである。Flash オブジェクトのサイズは、ムービーの幅と高さを 100% に設定することによって、コンテナ（親要素）のサイズに合わせて拡大することができる。コンテナの幅と高さは、相対的な単位を使用して設定する。これにより、テキストサイズの変更をサポートするユーザーエージェントは、テキストサイズの設定の変更に応じて Flash オブジェクトのサイズを変更することが可能になる。Flash オブジェクトのサイズが調整されると、そのコンテンツが拡大または縮小され、ロービジョンの利用者でも読みやすくなる。</p><note><p class="prefix">この実装方法では、ブラウザでズーム機能を使用する利用者をサポートする必要はない。</p></note></description><examples><eg-group><head>テキストのサイズを変更する（最低限のサイズは維持する）</head><description><p>この事例では、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://code.google.com/p/swfobject/wiki/documentation#How_to_embed_Flash_Player_content_using_SWFObject_static_publish">SWFObject による動的なパブリッシュ手法（英語）</loc>を使用して HTML ドキュメント内に Flash オブジェクトをロードしている。Flash オブジェクトのコンテナ要素には、「flashPlaceHolder」というクラス名が付けられている。このクラス名は、CSS で相対的な em 値を使用して幅および高さを設定する際のターゲットとなる。利用者がブラウザのテキストサイズを拡大または縮小すると、それに応じて Flash オブジェクトも拡大または縮小される。テキストサイズを縮小したときにオブジェクトが小さくなりすぎることがないように、デフォルトのサイズに対して min-width および min-height プロパティを設定している。</p></description><code><![CDATA[<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" 
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta content="text/html; charset=UTF-8" http-equiv="Content-Type"/>
    <title>Flash Resize example</title>
    <script src="swfobject/swfobject.js" type="text/javascript"/>
    <script type="text/javascript">

    swfobject.embedSWF("scale_movie_dimensions_on_text_resize_as3.swf", 
    "flashPlaceHolder", "100%", "100%", "8")      
</script>

    <style type="text/css">
  #flashPlaceHolder {
    width: 20em;
    height: 15em;
    min-width: 320px;
    min-height: 240px;
  }
</style>
  </head>
  <body id="header">

    <h1>Flash Resize Demonstration</h1>
    <p>When the browser's text size is changed, the Flash movie will be
      resized accordingly.</p>
    <p id="flashPlaceHolder">Flash needs to be installed for this
      example to work</p>
  </body>

</html>]]></code><description><p>この実例は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG-TECHS/working-examples/FLASH33/scale_movie_dimensions_on_text_resize_as3.html">「テキストのサイズを変更する（最低限のサイズは維持する）」のサンプル（英語）</loc>で確認できる。また、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG-TECHS/working-examples/FLASH33/scale_movie_dimensions_on_text_resize_as3.swf">「テキストのサイズを変更する（最低限のサイズは維持する）」のソース（英語）</loc>をダウンロードすることもできる。</p></description></eg-group></examples><resources/><related-techniques><relatedtech idref="C24"/></related-techniques><tests><procedure><olist><item><p>Flash オブジェクトが埋め込まれている Web ページを開く。</p></item><item><p> HTML ソースコードで、Flash オブジェクトが格納されているオブジェクトの幅および高さのサイズが、em またはパーセント（%）などの相対的な単位で指定されている</p></item></olist></procedure><expected-results><ulist><item><p>2. を満たしている。</p></item></ulist></expected-results></tests><translationcredit><ulist><item>原文：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/FLASH33.html">FLASH33: Using relative values for Flash object dimensions（英語）</loc></item><item>日本語訳監修：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.infoaxia.co.jp/">植木 真（株式会社インフォアクシア）</loc></item><item>日本語訳：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.adobe.com/jp/accessibility/">アドビ システムズ 株式会社</loc></item></ulist></translationcredit></technique><technique id="FLASH34"><short-name>スクリーンリーダー検出機能を使用して、自動的に再生される音声をオフにする</short-name><applicability><ulist><item><p>Adobe Flash Professional バージョン MX 以降</p></item><item><p>Adobe Flex</p></item></ulist></applicability><applies-to><success-criterion idref="visual-audio-contrast-dis-audio"/></applies-to><ua-issues><ua-issue><p>ユーザーエージェントによるサポートに関する全般的な情報は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="flash.html#flash_ua_support">Flashのユーザーエージェントによるサポート</loc>を参照のこと。</p></ua-issue></ua-issues><description><p>この実装方法の目的は、Flash ムービーがロードされたときに音声が再生されないようにすることである。これは、スクリーンリーダー、スクリーン拡大鏡、スイッチメカニズムなどの支援技術の利用者や支援技術を使用しない利用者（認知障害、学習障害、言語障害を持つ人々）に役立つ。デフォルトでは、音声は自動的に再生される。ただし、JAWS などのスクリーンリーダーが検出された場合は、音声は手動で開始される必要がある。</p><p>Flash は、スクリーンリーダーを検出するための<code><![CDATA[flash.accessibility.Accessibility.active]]></code>プロパティを提供している。このプロパティが<code><![CDATA[true]]></code>に設定されている場合は、支援技術が実行されていることを Flash Player が検出したことを意味する。このフラグに基づいて、Flash のコンテンツ制作者は別の機能を実行するように選択できる。</p><note><p class="prefix">Flash Player が、実行されている支援技術を検出し、<code><![CDATA[Accessibility.active]]></code> プロパティを設定するまでには多少時間がかかる。したがって、正確な結果を得るためには、ムービーの最初のフレームですぐにこのプロパティをチェックしてはならない。5 フレーム後、またはタイムイベントを使用してチェックを行うようにする。</p><p class="prefix">このメカニズムでは検出されないスクリーンリーダーも存在する。一般的に、このプロパティが true に設定されるのは、<abbr expansion="Microsoft Active Accessibility">MSAA</abbr> クライアントが実行されている場合である。</p><p class="prefix">他の支援技術ツール（スクリーン拡大鏡など）、または支援技術としては使用されないツールの中にも MSAA を利用するものがあり、その結果として <code><![CDATA[Accessibility.active]]></code> が <code><![CDATA[true]]></code> に設定される場合がある。 </p></note></description><examples><eg-group><head>SoundHandler クラス</head><description><p><code><![CDATA[Accessibility.active]]></code> が <code><![CDATA[false]]></code> に設定されている場合のみ自動的に mp3 ファイルの再生を開始する、SoundHandler というクラスが作成される。この事例では <code><![CDATA[flash.system.Capabilities.hasAccessibility]]></code> プロパティもチェックしていることに注意する。このプロパティはスクリーンリーダーが実行されているかどうかをチェックするものではなく、Flash Player が MSAA （基本的には Windows オペレーティングシステムを意味する）をサポートする環境で実行されているかどうかを示すものである。</p></description><code><![CDATA[package wcagSamples {
  import flash.accessibility.Accessibility;
  import flash.display.Sprite;
  import flash.net.URLRequest;
  import flash.media.Sound;
  import flash.media.SoundChannel;
  import flash.system.Capabilities;
  import fl.controls.Button;
  import fl.accessibility.ButtonAccImpl;
  import fl.controls.Label;
  import flash.events.MouseEvent;
  
  public class SoundHandler extends Sprite {
    private var snd: Sound = new Sound();
    private var button: Button = new Button();
    private var req: URLRequest = new URLRequest(
      "http://av.adobe.com/podcast/csbu_dev_podcast_epi_2.mp3");
    private var channel: SoundChannel = new SoundChannel();
    private var statusLbl: Label = new Label();
    public function SoundHandler() {
      snd.load(req);
      ButtonAccImpl.enableAccessibility();
      button.x = 10;
      button.y = 10;
      statusLbl.autoSize = "left";
      statusLbl.x = 10;
      statusLbl.y = 40;
      addChild(statusLbl);
      button.addEventListener(MouseEvent.CLICK, clickHandler);
      this.addChild(button);
      if (! Capabilities.hasAccessibility || ! Accessibility.active) {
        channel = snd.play();
        button.label = "Stop Sound";
        statusLbl.text = "No Assistive technology detected. \
          Sound will play automatically";
      } else {
        button.label = "Start Sound";
        statusLbl.text = "Assistive technology detected. \
          Sound will not play automatically";
      }
    }
    private function clickHandler(e: MouseEvent): void {
      if (button.label == "Stop Sound") {
        button.label = "Start Sound";
        channel.stop();
      } else {
        channel = snd.play();
        button.label = "Stop Sound";
      }
    }
  }
}]]></code><description><p>この実例は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG-TECHS/working-examples/FLASH34/screen_reader_detection_to_prevent_autoplay_as3.html">「SoundHandler クラス」のサンプル（英語）</loc>で確認できる。また、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG-TECHS/working-examples/FLASH34/screen_reader_detection_to_prevent_autoplay_as3.swf">「SoundHandler クラス」のソース（英語）</loc>をダウンロードすることもできる。</p></description></eg-group></examples><resources><see-also><ulist><item><p>
            <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/flash/accessibility/Accessibility.html#active">ActionScript 3.0 Language and Components Reference: Accessibility.active property</loc>
          </p></item><item><p>
            <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.paciellogroup.com/blog/2008/04/developer-beware-using-flash-to-detect-screen-readers/">Developer Beware: Using Flash to Detect Screen Readers</loc>
          </p></item></ulist></see-also></resources><related-techniques><relatedtech idref="G170"/></related-techniques><tests><procedure><olist><item><p>MSAA をサポートしているスクリーンリーダーを起動する。</p></item><item><p>スクリーンリーダーが実行されていない場合は、自動的に音声を再生する Flash ムービーが含まれているページを開く。</p></item><item><p>音声の再生が停止している。</p></item></olist></procedure><expected-results><olist><item><p>3. を満たしている。</p></item></olist></expected-results></tests><translationcredit><ulist><item>原文：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/FLASH34.html">FLASH34: Turning off sounds that play automatically when an assistive technology is detected（英語）</loc></item><item>日本語訳監修：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.infoaxia.co.jp/">植木 真（株式会社インフォアクシア）</loc></item><item>日本語訳：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.adobe.com/jp/accessibility/">アドビ システムズ 株式会社</loc></item></ulist></translationcredit></technique><technique id="FLASH35"><short-name>スクリプトを使用して、 Flash コンテンツをスクロールする、およびそれを停止するメカニズムを提供する</short-name><applicability><ulist><item><p>Adobe Flash Professional バージョン MX 以降</p></item><item><p>Adobe Flex</p></item></ulist></applicability><applies-to><success-criterion idref="time-limits-pause"/></applies-to><ua-issues><ua-issue><p>ユーザーエージェントによるサポートに関する全般的な情報は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="flash.html#flash_ua_support">Flashのユーザーエージェントによるサポート</loc>を参照のこと。</p></ua-issue></ua-issues><description><p>この実装方法の目的は、コンテンツのスクロールがスクリプトによって生成された場合に、そのスクロールを停止する方法を利用者に提供することである。コンテンツをスクロールさせると、ロービジョンの利用者または認知障害を持つ利用者にとって読解が困難または不可能になる場合がある。また、利用者によっては、スクロールの動きに気を取られてしまい、Web ページの他の部分に集中できなくなる場合がある。</p></description><examples><eg-group><head>スクロールの一時停止と再開を行うためのトグルボタン</head><description><p>この事例では、テキストを左から右にスクロールさせている。利用者がこのスクロール動作を停止および再開できるようにするためのトグルボタンが用意されている。また、スクロールの速度を落とすためのチェックボックスも用意されている。</p><note><p class="prefix">スクロール速度のオプションについて、この事例で紹介されているよりも多くのオプションを希望する利用者もいる。こうした要求を満たすために、コンテンツ制作者はスライダやドロップダウンリストなどのコントロールを使用して、複数の速度オプションを提供することも可能である。</p></note></description><code><![CDATA[import fl.accessibility.ButtonAccImpl;
import fl.accessibility.CheckBoxAccImpl;

ButtonAccImpl.enableAccessibility();
CheckBoxAccImpl.enableAccessibility();

var scrollInterval: int;
var intervalLength: int = 15;

var expandedViewer: MovieClip = exampleScroller.expandedViewer;
var scrollText: MovieClip = exampleScroller.scrollText;
var scrollViewer: MovieClip = exampleScroller.scrollViewer;

var scrollingPaused: Boolean = true;

scrollStopper.addEventListener(MouseEvent.CLICK, handleBtnClick, false);
slowDown_chk.addEventListener(MouseEvent.CLICK, handleChkClick, false);

function handleBtnClick(e) {
  toggleScroll(false);
  e.target.label = scrollingPaused? "Resume Scrolling": "Stop Scrolling";
}

//スクロール速度を下げる
function handleChkClick(e) {
  intervalLength = e.target.selected? 50: 15;
  if (! scrollingPaused) {
    clearTimeout(scrollInterval);
    toggleScroll(true);
  }
}

//スクロールを一時停止または再開する
function toggleScroll(noToggle: Boolean) {
  if (noToggle || scrollingPaused)
  scrollInterval = setInterval(moveText, intervalLength); else
  clearTimeout(scrollInterval);
  if (! noToggle)
  scrollingPaused = ! scrollingPaused;
}

function moveText() {
  if (scrollText.x + scrollText.width < scrollViewer.x)
  scrollText.x = scrollViewer.x + scrollViewer.width;
  scrollText.x -= 1;
}

//スクロールを開始する
toggleScroll(false);]]></code><description><p>この実例は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG-TECHS/working-examples/FLASH35/pause_scrolling_as3.html">「スクロールの一時停止と再開を行うためのトグルボタン」のサンプル（英語）</loc>で確認できる。また、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG-TECHS/working-examples/FLASH35/pause_scrolling_as3.swf">「スクロールの一時停止と再開を行うためのトグルボタン」のソース（英語）</loc>をダウンロードすることもできる。</p></description></eg-group></examples><resources/><related-techniques><relatedtech idref="G4"/></related-techniques><tests><procedure><p>Flash ムービーにスクロールするコンテンツが含まれている場合、次のことを確認する。</p><olist><item><p>利用者がスクロールを一時停止したり再開したりすることのできるボタンが提供されている。</p></item><item><p>ボタンを押すと、スクロールが停止する。</p></item><item><p>もう一度ボタンを押すと、スクロールが再開する。</p></item></olist></procedure><expected-results><ulist><item><p>1., 2. および 3. を満たしている。</p></item></ulist></expected-results></tests><translationcredit><ulist><item>原文：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/FLASH35.html">FLASH35: Using script to scroll Flash content, and providing a mechanism to pause it（英語）</loc></item><item>日本語訳監修：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.infoaxia.co.jp/">植木 真（株式会社インフォアクシア）</loc></item><item>日本語訳：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.adobe.com/jp/accessibility/">アドビ システムズ 株式会社</loc></item></ulist></translationcredit></technique><technique id="FLASH36"><short-name>スクリプトを使用して点滅を制御し、5秒以内に点滅を停止させる</short-name><applicability><ulist><item><p>Adobe Flash Professional バージョン MX 以降</p></item><item><p>Adobe Flex</p></item></ulist></applicability><applies-to><success-criterion idref="time-limits-pause"/></applies-to><ua-issues><ua-issue><p>ユーザーエージェントによるサポートに関する全般的な情報は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="flash.html#flash_ua_support">Flashのユーザーエージェントによるサポート</loc>を参照のこと。</p></ua-issue></ua-issues><description><p>この実装方法の目的は、スクリプトを使用して点滅を制御し、点滅を5秒以内に停止させることである。ActionScript の<code><![CDATA[setTimeout()]]></code>メソッドを使用して、ムービークリップの点滅動作を5秒以内に停止させる。</p></description><examples><eg-group><head>タイムアウト後に点滅を停止させる</head><description><p>この事例では、ムービークリップ（blinkingTextMC）でタイムラインを使用して点滅効果を生成している。5 秒経過する前にムービークリップの <code><![CDATA[gotoAndStop()]]></code> メソッドが呼び出され、このメソッドにより点滅が停止する。</p></description><code><![CDATA[setTimeout(stopBlinking, 4500);
function stopBlinking() {
  var blinkingTextMC = getChildByName('blinkingTextMC');
  blinkingTextMC.gotoAndStop(1);
}]]></code><description><p>この実例は、<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG-TECHS/working-examples/FLASH36/control_blinking_with_script_as3.html">「タイムアウト後に点滅を停止させる」のサンプル（英語）</loc>で確認できる。<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG-TECHS/working-examples/FLASH36/control_blinking_with_script_as3.swf">「タイムアウト後に点滅を停止させる」のソース（英語）</loc>をダウンロードすることもできる。</p></description></eg-group></examples><resources/><related-techniques/><tests><procedure><p>点滅するコンテンツのインスタンスすべてについて、次のことを確認する。</p><olist><item><p>点滅が開始したら5秒経過するまで待つ。</p></item><item><p>5秒経過した時点で、点滅が停止する。</p></item></olist></procedure><expected-results><ulist><item><p>点滅するコンテンツのインスタンスすべてについて、2.を満たしている。</p></item></ulist></expected-results></tests><translationcredit><ulist><item>原文：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/WCAG20-TECHS/FLASH36.html">FLASH36: Using scripts to control blinking and stop it in five seconds or less（英語）</loc></item><item>日本語訳監修：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.infoaxia.co.jp/">植木 真（株式会社インフォアクシア）</loc></item><item>日本語訳：<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.adobe.com/jp/accessibility/">アドビ システムズ 株式会社</loc></item></ulist></translationcredit></technique></div1></body><back><div1 id="placeholders"><!-- note: this can be updated using /misc/id-list.xslt (requires cut and paste)--><head/><p id="UNKNOWN">place holder for idref</p><p id="cc1">placeholder for cc1</p><p id="cc2">placeholder for cc2</p><p id="cc3">placeholder for cc3</p><p id="cc4">placeholder for cc4</p><p id="cc5">placeholder for cc5</p><p id="text-equiv">placeholder for text-equiv</p><p id="text-equiv-all">placeholder for text-equiv-all</p><p id="media-equiv">placeholder for media-equiv</p><p id="media-equiv-av-only-alt">placeholder for media-equiv-av-only-alt</p><p id="media-equiv-captions">placeholder for media-equiv-captions</p><p id="media-equiv-audio-desc">placeholder for media-equiv-audio-desc</p><p id="media-equiv-real-time-captions">placeholder for media-equiv-real-time-captions</p><p id="media-equiv-audio-desc-only">placeholder for media-equiv-audio-desc-only</p><p id="media-equiv-sign">placeholder for media-equiv-sign</p><p id="media-equiv-extended-ad">placeholder for media-equiv-extended-ad</p><p id="media-equiv-text-doc">placeholder for media-equiv-text-doc</p><p id="media-equiv-live-audio-only">placeholder for media-equiv-live-audio-only</p><p id="content-structure-separation">placeholder for content-structure-separation</p><p id="content-structure-separation-programmatic">placeholder for content-structure-separation-programmatic</p><p id="content-structure-separation-sequence">placeholder for content-structure-separation-sequence</p><p id="content-structure-separation-understanding">placeholder for content-structure-separation-understanding</p><p id="visual-audio-contrast">placeholder for visual-audio-contrast</p><p id="visual-audio-contrast-without-color">placeholder for visual-audio-contrast-without-color</p><p id="visual-audio-contrast-dis-audio">placeholder for visual-audio-contrast-dis-audio</p><p id="visual-audio-contrast-contrast">placeholder for visual-audio-contrast-contrast</p><p id="visual-audio-contrast-scale">placeholder for visual-audio-contrast-scale</p><p id="visual-audio-contrast-text-presentation">placeholder for visual-audio-contrast-text-presentation</p><p id="visual-audio-contrast7">placeholder for visual-audio-contrast7</p><p id="visual-audio-contrast-noaudio">placeholder for visual-audio-contrast-noaudio</p><p id="visual-audio-contrast-visual-presentation">placeholder for visual-audio-contrast-visual-presentation</p><p id="visual-audio-contrast-text-images">placeholder for visual-audio-contrast-text-images</p><p id="keyboard-operation">placeholder for keyboard-operation</p><p id="keyboard-operation-keyboard-operable">placeholder for keyboard-operation-keyboard-operable</p><p id="keyboard-operation-trapping">placeholder for keyboard-operation-trapping</p><p id="keyboard-operation-all-funcs">placeholder for keyboard-operation-all-funcs</p><p id="time-limits">placeholder for time-limits</p><p id="time-limits-required-behaviors">placeholder for time-limits-required-behaviors</p><p id="time-limits-pause">placeholder for time-limits-pause</p><p id="time-limits-no-exceptions">placeholder for time-limits-no-exceptions</p><p id="time-limits-postponed">placeholder for time-limits-postponed</p><p id="time-limits-server-timeout">placeholder for time-limits-server-timeout</p><p id="seizure">placeholder for seizure</p><p id="seizure-does-not-violate">placeholder for seizure-does-not-violate</p><p id="seizure-three-times">placeholder for seizure-three-times</p><p id="navigation-mechanisms">placeholder for navigation-mechanisms</p><p id="navigation-mechanisms-skip">placeholder for navigation-mechanisms-skip</p><p id="navigation-mechanisms-title">placeholder for navigation-mechanisms-title</p><p id="navigation-mechanisms-focus-order">placeholder for navigation-mechanisms-focus-order</p><p id="navigation-mechanisms-refs">placeholder for navigation-mechanisms-refs</p><p id="navigation-mechanisms-mult-loc">placeholder for navigation-mechanisms-mult-loc</p><p id="navigation-mechanisms-descriptive">placeholder for navigation-mechanisms-descriptive</p><p id="navigation-mechanisms-focus-visible">placeholder for navigation-mechanisms-focus-visible</p><p id="navigation-mechanisms-location">placeholder for navigation-mechanisms-location</p><p id="navigation-mechanisms-link">placeholder for navigation-mechanisms-link</p><p id="navigation-mechanisms-headings">placeholder for navigation-mechanisms-headings</p><p id="meaning">placeholder for meaning</p><p id="meaning-doc-lang-id">placeholder for meaning-doc-lang-id</p><p id="meaning-other-lang-id">placeholder for meaning-other-lang-id</p><p id="meaning-idioms">placeholder for meaning-idioms</p><p id="meaning-located">placeholder for meaning-located</p><p id="meaning-supplements">placeholder for meaning-supplements</p><p id="meaning-pronunciation">placeholder for meaning-pronunciation</p><p id="consistent-behavior">placeholder for consistent-behavior</p><p id="consistent-behavior-receive-focus">placeholder for consistent-behavior-receive-focus</p><p id="consistent-behavior-unpredictable-change">placeholder for consistent-behavior-unpredictable-change</p><p id="consistent-behavior-consistent-locations">placeholder for consistent-behavior-consistent-locations</p><p id="consistent-behavior-consistent-functionality">placeholder for consistent-behavior-consistent-functionality</p><p id="consistent-behavior-no-extreme-changes-context">placeholder for consistent-behavior-no-extreme-changes-context</p><p id="minimize-error">placeholder for minimize-error</p><p id="minimize-error-identified">placeholder for minimize-error-identified</p><p id="minimize-error-cues">placeholder for minimize-error-cues</p><p id="minimize-error-suggestions">placeholder for minimize-error-suggestions</p><p id="minimize-error-reversible">placeholder for minimize-error-reversible</p><p id="minimize-error-context-help">placeholder for minimize-error-context-help</p><p id="minimize-error-reversible-all">placeholder for minimize-error-reversible-all</p><p id="ensure-compat">placeholder for ensure-compat</p><p id="ensure-compat-parses">placeholder for ensure-compat-parses</p><p id="ensure-compat-rsv">placeholder for ensure-compat-rsv</p><p id="G1">placeholder for G1</p><p id="G4">placeholder for G4</p><p id="G5">placeholder for G5</p><p id="G8">placeholder for G8</p><p id="G9">placeholder for G9</p><p id="G10">placeholder for G10</p><p id="G11">placeholder for G11</p><p id="G13">placeholder for G13</p><p id="G14">placeholder for G14</p><p id="G15">placeholder for G15</p><p id="G17">placeholder for G17</p><p id="G18">placeholder for G18</p><p id="G19">placeholder for G19</p><p id="G21">placeholder for G21</p><p id="G53">placeholder for G53</p><p id="G54">placeholder for G54</p><p id="G55">placeholder for G55</p><p id="G56">placeholder for G56</p><p id="G57">placeholder for G57</p><p id="G58">placeholder for G58</p><p id="G59">placeholder for G59</p><p id="G60">placeholder for G60</p><p id="G61">placeholder for G61</p><p id="G62">placeholder for G62</p><p id="G63">placeholder for G63</p><p id="G64">placeholder for G64</p><p id="G65">placeholder for G65</p><p id="G68">placeholder for G68</p><p id="G69">placeholder for G69</p><p id="G70">placeholder for G70</p><p id="G71">placeholder for G71</p><p id="G73">placeholder for G73</p><p id="G74">placeholder for G74</p><p id="G75">placeholder for G75</p><p id="G76">placeholder for G76</p><p id="G78">placeholder for G78</p><p id="G79">placeholder for G79</p><p id="G80">placeholder for G80</p><p id="G81">placeholder for G81</p><p id="G82">placeholder for G82</p><p id="G83">placeholder for G83</p><p id="G84">placeholder for G84</p><p id="G85">placeholder for G85</p><p id="G86">placeholder for G86</p><p id="G87">placeholder for G87</p><p id="G88">placeholder for G88</p><p id="G89">placeholder for G89</p><p id="G90">placeholder for G90</p><p id="G91">placeholder for G91</p><p id="G92">placeholder for G92</p><p id="G93">placeholder for G93</p><p id="G94">placeholder for G94</p><p id="G95">placeholder for G95</p><p id="G96">placeholder for G96</p><p id="G97">placeholder for G97</p><p id="G98">placeholder for G98</p><p id="G99">placeholder for G99</p><p id="G100">placeholder for G100</p><p id="G101">placeholder for G101</p><p id="G102">placeholder for G102</p><p id="G103">placeholder for G103</p><p id="G105">placeholder for G105</p><p id="G107">placeholder for G107</p><p id="G108">placeholder for G108</p><p id="G110">placeholder for G110</p><p id="G111">placeholder for G111</p><p id="G112">placeholder for G112</p><p id="G115">placeholder for G115</p><p id="G117">placeholder for G117</p><p id="G120">placeholder for G120</p><p id="G121">placeholder for G121</p><p id="G122">placeholder for G122</p><p id="G123">placeholder for G123</p><p id="G124">placeholder for G124</p><p id="G125">placeholder for G125</p><p id="G126">placeholder for G126</p><p id="G127">placeholder for G127</p><p id="G128">placeholder for G128</p><p id="G130">placeholder for G130</p><p id="G131">placeholder for G131</p><p id="G133">placeholder for G133</p><p id="G134">placeholder for G134</p><p id="G135">placeholder for G135</p><p id="G136">placeholder for G136</p><p id="G138">placeholder for G138</p><p id="G139">placeholder for G139</p><p id="G140">placeholder for G140</p><p id="G141">placeholder for G141</p><p id="G142">placeholder for G142</p><p id="G143">placeholder for G143</p><p id="G144">placeholder for G144</p><p id="G145">placeholder for G145</p><p id="G146">placeholder for G146</p><p id="G147">placeholder for G147</p><p id="G148">placeholder for G148</p><p id="G149">placeholder for G149</p><p id="G150">placeholder for G150</p><p id="G151">placeholder for G151</p><p id="G152">placeholder for G152</p><p id="G153">placeholder for G153</p><p id="G155">placeholder for G155</p><p id="G156">placeholder for G156</p><p id="G157">placeholder for G157</p><p id="G158">placeholder for G158</p><p id="G159">placeholder for G159</p><p id="G160">placeholder for G160</p><p id="G161">placeholder for G161</p><p id="G162">placeholder for G162</p><p id="G163">placeholder for G163</p><p id="G164">placeholder for G164</p><p id="G165">placeholder for G165</p><p id="G166">placeholder for G166</p><p id="G167">placeholder for G167</p><p id="G168">placeholder for G168</p><p id="G169">placeholder for G169</p><p id="G170">placeholder for G170</p><p id="G171">placeholder for G171</p><p id="G172">placeholder for G172</p><p id="G173">placeholder for G173</p><p id="G174">placeholder for G174</p><p id="G175">placeholder for G175</p><p id="G176">placeholder for G176</p><p id="G177">placeholder for G177</p><p id="G178">placeholder for G178</p><p id="G179">placeholder for G179</p><p id="G180">placeholder for G180</p><p id="G181">placeholder for G181</p><p id="G182">placeholder for G182</p><p id="G183">placeholder for G183</p><p id="G184">placeholder for G184</p><p id="G185">placeholder for G185</p><p id="G186">placeholder for G186</p><p id="G187">placeholder for G187</p><p id="G188">placeholder for G188</p><p id="G189">placeholder for G189</p><p id="G190">placeholder for G190</p><p id="G191">placeholder for G191</p><p id="G192">placeholder for G192</p><p id="G193">placeholder for G193</p><p id="G194">placeholder for G194</p><p id="G195">placeholder for G195</p><p id="G196">placeholder for G196</p><p id="G197">placeholder for G197</p><p id="G198">placeholder for G198</p><p id="H2">placeholder for H2</p><p id="H4">placeholder for H4</p><p id="H24">placeholder for H24</p><p id="H25">placeholder for H25</p><p id="H27">placeholder for H27</p><p id="H28">placeholder for H28</p><p id="H30">placeholder for H30</p><p id="H32">placeholder for H32</p><p id="H33">placeholder for H33</p><p id="H34">placeholder for H34</p><p id="H35">placeholder for H35</p><p id="H36">placeholder for H36</p><p id="H37">placeholder for H37</p><p id="H39">placeholder for H39</p><p id="H40">placeholder for H40</p><p id="H42">placeholder for H42</p><p id="H43">placeholder for H43</p><p id="H44">placeholder for H44</p><p id="H45">placeholder for H45</p><p id="H46">placeholder for H46</p><p id="H48">placeholder for H48</p><p id="H49">placeholder for H49</p><p id="H50">placeholder for H50</p><p id="H51">placeholder for H51</p><p id="H53">placeholder for H53</p><p id="H54">placeholder for H54</p><p id="H56">placeholder for H56</p><p id="H57">placeholder for H57</p><p id="H58">placeholder for H58</p><p id="H59">placeholder for H59</p><p id="H60">placeholder for H60</p><p id="H62">placeholder for H62</p><p id="H63">placeholder for H63</p><p id="H64">placeholder for H64</p><p id="H65">placeholder for H65</p><p id="H67">placeholder for H67</p><p id="H69">placeholder for H69</p><p id="H70">placeholder for H70</p><p id="H71">placeholder for H71</p><p id="H73">placeholder for H73</p><p id="H74">placeholder for H74</p><p id="H75">placeholder for H75</p><p id="H76">placeholder for H76</p><p id="H77">placeholder for H77</p><p id="H78">placeholder for H78</p><p id="H79">placeholder for H79</p><p id="H80">placeholder for H80</p><p id="H81">placeholder for H81</p><p id="H82">placeholder for H82</p><p id="H83">placeholder for H83</p><p id="H84">placeholder for H84</p><p id="H85">placeholder for H85</p><p id="H86">placeholder for H86</p><p id="H87">placeholder for H87</p><p id="H88">placeholder for H88</p><p id="H89">placeholder for H89</p><p id="H90">placeholder for H90</p><p id="H91">placeholder for H91</p><p id="C6">placeholder for C6</p><p id="C7">placeholder for C7</p><p id="C8">placeholder for C8</p><p id="C9">placeholder for C9</p><p id="C12">placeholder for C12</p><p id="C13">placeholder for C13</p><p id="C14">placeholder for C14</p><p id="C15">placeholder for C15</p><p id="C16">placeholder for C16</p><p id="C17">placeholder for C17</p><p id="C18">placeholder for C18</p><p id="C19">placeholder for C19</p><p id="C20">placeholder for C20</p><p id="C21">placeholder for C21</p><p id="C22">placeholder for C22</p><p id="C23">placeholder for C23</p><p id="C24">placeholder for C24</p><p id="C25">placeholder for C25</p><p id="C26">placeholder for C26</p><p id="C27">placeholder for C27</p><p id="C28">placeholder for C28</p><p id="C29">placeholder for C29</p><p id="C30">placeholder for C30</p><p id="SCR1">placeholder for SCR1</p><p id="SCR2">placeholder for SCR2</p><p id="SCR14">placeholder for SCR14</p><p id="SCR16">placeholder for SCR16</p><p id="SCR18">placeholder for SCR18</p><p id="SCR19">placeholder for SCR19</p><p id="SCR20">placeholder for SCR20</p><p id="SCR21">placeholder for SCR21</p><p id="SCR22">placeholder for SCR22</p><p id="SCR24">placeholder for SCR24</p><p id="SCR26">placeholder for SCR26</p><p id="SCR27">placeholder for SCR27</p><p id="SCR28">placeholder for SCR28</p><p id="SCR29">placeholder for SCR29</p><p id="SCR30">placeholder for SCR30</p><p id="SCR31">placeholder for SCR31</p><p id="SCR32">placeholder for SCR32</p><p id="SCR33">placeholder for SCR33</p><p id="SCR34">placeholder for SCR34</p><p id="SCR35">placeholder for SCR35</p><p id="SCR36">placeholder for SCR36</p><p id="SCR37">placeholder for SCR37</p><p id="SVR1">placeholder for SVR1</p><p id="SVR2">placeholder for SVR2</p><p id="SVR3">placeholder for SVR3</p><p id="SVR4">placeholder for SVR4</p><p id="SM1">placeholder for SM1</p><p id="SM2">placeholder for SM2</p><p id="SM6">placeholder for SM6</p><p id="SM7">placeholder for SM7</p><p id="SM11">placeholder for SM11</p><p id="SM12">placeholder for SM12</p><p id="SM13">placeholder for SM13</p><p id="SM14">placeholder for SM14</p><p id="T1">placeholder for T1</p><p id="T2">placeholder for T2</p><p id="T3">placeholder for T3</p><p id="ARIA1">placeholder for ARIA1</p><p id="ARIA2">placeholder for ARIA2</p><p id="ARIA3">placeholder for ARIA3</p><p id="ARIA4">placeholder for ARIA4</p><p id="F1">placeholder for F1</p><p id="F2">placeholder for F2</p><p id="F3">placeholder for F3</p><p id="F4">placeholder for F4</p><p id="F7">placeholder for F7</p><p id="F8">placeholder for F8</p><p id="F9">placeholder for F9</p><p id="F10">placeholder for F10</p><p id="F12">placeholder for F12</p><p id="F13">placeholder for F13</p><p id="F14">placeholder for F14</p><p id="F15">placeholder for F15</p><p id="F16">placeholder for F16</p><p id="F17">placeholder for F17</p><p id="F19">placeholder for F19</p><p id="F20">placeholder for F20</p><p id="F22">placeholder for F22</p><p id="F23">placeholder for F23</p><p id="F24">placeholder for F24</p><p id="F25">placeholder for F25</p><p id="F26">placeholder for F26</p><p id="F30">placeholder for F30</p><p id="F31">placeholder for F31</p><p id="F32">placeholder for F32</p><p id="F33">placeholder for F33</p><p id="F34">placeholder for F34</p><p id="F36">placeholder for F36</p><p id="F37">placeholder for F37</p><p id="F38">placeholder for F38</p><p id="F39">placeholder for F39</p><p id="F40">placeholder for F40</p><p id="F41">placeholder for F41</p><p id="F42">placeholder for F42</p><p id="F43">placeholder for F43</p><p id="F44">placeholder for F44</p><p id="F46">placeholder for F46</p><p id="F47">placeholder for F47</p><p id="F48">placeholder for F48</p><p id="F49">placeholder for F49</p><p id="F50">placeholder for F50</p><p id="F52">placeholder for F52</p><p id="F54">placeholder for F54</p><p id="F55">placeholder for F55</p><p id="F58">placeholder for F58</p><p id="F59">placeholder for F59</p><p id="F60">placeholder for F60</p><p id="F61">placeholder for F61</p><p id="F62">placeholder for F62</p><p id="F63">placeholder for F63</p><p id="F65">placeholder for F65</p><p id="F66">placeholder for F66</p><p id="F67">placeholder for F67</p><p id="F68">placeholder for F68</p><p id="F69">placeholder for F69</p><p id="F70">placeholder for F70</p><p id="F71">placeholder for F71</p><p id="F72">placeholder for F72</p><p id="F73">placeholder for F73</p><p id="F74">placeholder for F74</p><p id="F75">placeholder for F75</p><p id="F76">placeholder for F76</p><p id="F77">placeholder for F77</p><p id="F78">placeholder for F78</p><p id="F79">placeholder for F79</p><p id="F80">placeholder for F80</p><p id="F81">placeholder for F81</p><p id="F82">placeholder for F82</p><p id="F83">placeholder for F83</p><p id="F84">placeholder for F84</p><p id="F85">placeholder for F85</p><p id="F86">placeholder for F86</p><p id="F87">placeholder for F87</p><p id="F88">placeholder for F88</p><p id="F89">placeholder for F89</p></div1><div1 id="references"><head>References</head><blist><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="CSS1" key="CSS1">"Cascading Style Sheets, level 1," B. Bos, H. Wium Lie, eds., W3C Recommendation 17 Dec 1996, revised 11 Jan 1999. Available at <loc href="http://www.w3.org/TR/REC-CSS1/">http://www.w3.org/TR/REC-CSS1/</loc>.</bibl><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="CSS2" key="CSS2">"Cascading Style Sheets, level 2," B. Bos, H. Wium Lie, C. Lilley, and I. Jacobs, eds., W3C Recommendation 12 May 1998. Available at <loc href="http://www.w3.org/TR/CSS2/">http://www.w3.org/TR/CSS2/</loc>.</bibl><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="CSS21" key="CSS21">"Cascading Style Sheets, level 2 revision 1,"  B. Bos, T. Çelik,  I. Hickson,   H. Wium Lie, eds., W3C Candidate Recommendation 25 February 2004.  Available at:  <loc href="http://www.w3.org/TR/CSS21/">http://www.w3.org/TR/CSS21/</loc>
				</bibl><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="CSS3" key="CSS3">
					<titleref href="http://www.w3.org/Style/CSS/current-work#table">[CSS 2.1 and CSS 3] Roadmap</titleref>, CSS WG's table of modules and publication dates.</bibl><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="FLASH" key="FLASH">"Flash", Adobe Systems. Available at <loc href="http://www.adobe.com/devnet/swf.html">http://www.adobe.com/devnet/swf.html</loc>.</bibl><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="HTML4" key="HTML4">"HTML 4.01 Specification," D. Raggett, A. Le Hors, I. Jacobs, eds.,  W3C Recommendation 24 December 1999. Available at <loc href="http://www.w3.org/TR/html401/">http://www.w3.org/TR/html401/</loc>
				</bibl><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="WCAG20" key="WCAG20">"Web Content Accessibility Guidelines 2.0,"  B. Caldwell, M. Cooper, L. Guarino Reid, and G. Vanderheiden, eds., W3C Working Draft 11 December 2007. This W3C Working Draft is available at <loc href="http://www.w3.org/TR/2007/WD-WCAG20-20071211/">http://www.w3.org/TR/2007/WD-WCAG20-20071211/</loc>.  The latest version of WCAG 2.0 is available at <loc href="http://www.w3.org/TR/WCAG20/">http://www.w3.org/TR/WCAG20/</loc>
				</bibl><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="XHTML1" key="XHTML1">"XHTML 1.0 The Extensible HyperText Markup Language (Second Edition)," S. Pemberton, et al.,  W3C Recommendation 26 January 2000, revised 1 August 2002. Available at:  <loc href="http://www.w3.org/TR/xhtml1/">http://www.w3.org/TR/xhtml1/</loc>.</bibl></blist></div1></back></spec>